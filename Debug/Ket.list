
Ket.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a88  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08007b98  08007b98  00017b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080a4  080080a4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  080080a4  080080a4  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080a4  080080a4  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080a4  080080a4  000180a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080a8  080080a8  000180a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080080ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  200001f0  0800829c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  0800829c  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cffe  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002346  00000000  00000000  0002d217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  0002f560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  000303d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019116  00000000  00000000  00031130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011118  00000000  00000000  0004a246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bd46  00000000  00000000  0005b35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e70a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d44  00000000  00000000  000e70f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007b80 	.word	0x08007b80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08007b80 	.word	0x08007b80

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <Display_Humidity>:
uint16_t RH,TEMP;
float temperature = 0;
float humidity = 0;
uint8_t Presence = 0;
void Display_Humidity(float humidity)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	char str[20];
	lcd_send_cmd(0x80|0x14);
 8000cac:	2094      	movs	r0, #148	; 0x94
 8000cae:	f000 fcd1 	bl	8001654 <lcd_send_cmd>
	sprintf(str, "RH: %.f", humidity);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff fbb8 	bl	8000428 <__aeabi_f2d>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	f107 000c 	add.w	r0, r7, #12
 8000cc0:	4908      	ldr	r1, [pc, #32]	; (8000ce4 <Display_Humidity+0x40>)
 8000cc2:	f004 fce3 	bl	800568c <siprintf>
	lcd_send_string(str);
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 fd76 	bl	80017bc <lcd_send_string>
	lcd_send_cmd(0x80|0x1A);
 8000cd0:	209a      	movs	r0, #154	; 0x9a
 8000cd2:	f000 fcbf 	bl	8001654 <lcd_send_cmd>
	lcd_send_string("%");
 8000cd6:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <Display_Humidity+0x44>)
 8000cd8:	f000 fd70 	bl	80017bc <lcd_send_string>
}
 8000cdc:	bf00      	nop
 8000cde:	3720      	adds	r7, #32
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	08007b98 	.word	0x08007b98
 8000ce8:	08007ba0 	.word	0x08007ba0

08000cec <Display_Temperature>:

void Display_Temperature(float temperature)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	char str[20];
	lcd_send_cmd(0x80|0x54);
 8000cf4:	20d4      	movs	r0, #212	; 0xd4
 8000cf6:	f000 fcad 	bl	8001654 <lcd_send_cmd>
	sprintf(str, "TEMP: %.f", temperature);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff fb94 	bl	8000428 <__aeabi_f2d>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	f107 000c 	add.w	r0, r7, #12
 8000d08:	4908      	ldr	r1, [pc, #32]	; (8000d2c <Display_Temperature+0x40>)
 8000d0a:	f004 fcbf 	bl	800568c <siprintf>
	lcd_send_string(str);
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fd52 	bl	80017bc <lcd_send_string>
	lcd_send_cmd(0x80|0x5C);
 8000d18:	20dc      	movs	r0, #220	; 0xdc
 8000d1a:	f000 fc9b 	bl	8001654 <lcd_send_cmd>
	lcd_send_string("C");
 8000d1e:	4804      	ldr	r0, [pc, #16]	; (8000d30 <Display_Temperature+0x44>)
 8000d20:	f000 fd4c 	bl	80017bc <lcd_send_string>

}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	08007ba4 	.word	0x08007ba4
 8000d30:	08007bb0 	.word	0x08007bb0

08000d34 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d4e:	887b      	ldrh	r3, [r7, #2]
 8000d50:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	4619      	mov	r1, r3
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f001 fdeb 	bl	8002940 <HAL_GPIO_Init>
}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 0308 	add.w	r3, r7, #8
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000d8c:	887b      	ldrh	r3, [r7, #2]
 8000d8e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	4619      	mov	r1, r3
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f001 fdcc 	bl	8002940 <HAL_GPIO_Init>
}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <DHT_Start>:

void DHT_Start(void){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	Set_Pin_Output(GPIOA, GPIO_PIN_4);
 8000db4:	2110      	movs	r1, #16
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <DHT_Start+0x3c>)
 8000db8:	f7ff ffdb 	bl	8000d72 <Set_Pin_Output>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2110      	movs	r1, #16
 8000dc0:	480a      	ldr	r0, [pc, #40]	; (8000dec <DHT_Start+0x3c>)
 8000dc2:	f001 ff58 	bl	8002c76 <HAL_GPIO_WritePin>
	Delay_us(18000);
 8000dc6:	f244 6050 	movw	r0, #18000	; 0x4650
 8000dca:	f000 f9a5 	bl	8001118 <Delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	4806      	ldr	r0, [pc, #24]	; (8000dec <DHT_Start+0x3c>)
 8000dd4:	f001 ff4f 	bl	8002c76 <HAL_GPIO_WritePin>
	Delay_us(20);
 8000dd8:	2014      	movs	r0, #20
 8000dda:	f000 f99d 	bl	8001118 <Delay_us>
	Set_Pin_Input(GPIOA, GPIO_PIN_4);
 8000dde:	2110      	movs	r1, #16
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <DHT_Start+0x3c>)
 8000de2:	f7ff ffa7 	bl	8000d34 <Set_Pin_Input>
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40010800 	.word	0x40010800

08000df0 <DHT_Check>:
uint8_t DHT_Check(void){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	Set_Pin_Input(GPIOA, GPIO_PIN_4);
 8000df4:	2110      	movs	r1, #16
 8000df6:	4815      	ldr	r0, [pc, #84]	; (8000e4c <DHT_Check+0x5c>)
 8000df8:	f7ff ff9c 	bl	8000d34 <Set_Pin_Input>
	Delay_us(40);
 8000dfc:	2028      	movs	r0, #40	; 0x28
 8000dfe:	f000 f98b 	bl	8001118 <Delay_us>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0){
 8000e02:	2110      	movs	r1, #16
 8000e04:	4811      	ldr	r0, [pc, #68]	; (8000e4c <DHT_Check+0x5c>)
 8000e06:	f001 ff1f 	bl	8002c48 <HAL_GPIO_ReadPin>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d110      	bne.n	8000e32 <DHT_Check+0x42>
		Delay_us(80);
 8000e10:	2050      	movs	r0, #80	; 0x50
 8000e12:	f000 f981 	bl	8001118 <Delay_us>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1){
 8000e16:	2110      	movs	r1, #16
 8000e18:	480c      	ldr	r0, [pc, #48]	; (8000e4c <DHT_Check+0x5c>)
 8000e1a:	f001 ff15 	bl	8002c48 <HAL_GPIO_ReadPin>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d103      	bne.n	8000e2c <DHT_Check+0x3c>
			Response = 1;
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <DHT_Check+0x60>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
 8000e2a:	e002      	b.n	8000e32 <DHT_Check+0x42>
		}
		else Response = -1;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <DHT_Check+0x60>)
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	701a      	strb	r2, [r3, #0]
	}
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1);
 8000e32:	bf00      	nop
 8000e34:	2110      	movs	r1, #16
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <DHT_Check+0x5c>)
 8000e38:	f001 ff06 	bl	8002c48 <HAL_GPIO_ReadPin>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d0f8      	beq.n	8000e34 <DHT_Check+0x44>
	return Response;
 8000e42:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <DHT_Check+0x60>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40010800 	.word	0x40010800
 8000e50:	2000020c 	.word	0x2000020c

08000e54 <DHT_Read>:

uint8_t DHT_Read(void){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
	uint8_t i, j;
for(j=0; j< 8; j++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	71bb      	strb	r3, [r7, #6]
 8000e5e:	e027      	b.n	8000eb0 <DHT_Read+0x5c>
	{
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0);
 8000e60:	bf00      	nop
 8000e62:	2110      	movs	r1, #16
 8000e64:	4816      	ldr	r0, [pc, #88]	; (8000ec0 <DHT_Read+0x6c>)
 8000e66:	f001 feef 	bl	8002c48 <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f8      	beq.n	8000e62 <DHT_Read+0xe>
			Delay_us(40);
 8000e70:	2028      	movs	r0, #40	; 0x28
 8000e72:	f000 f951 	bl	8001118 <Delay_us>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8000e76:	2110      	movs	r1, #16
 8000e78:	4811      	ldr	r0, [pc, #68]	; (8000ec0 <DHT_Read+0x6c>)
 8000e7a:	f001 fee5 	bl	8002c48 <HAL_GPIO_ReadPin>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d103      	bne.n	8000e8c <DHT_Read+0x38>
			{
				i = i<<1;
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	e006      	b.n	8000e9a <DHT_Read+0x46>
			}
			else
			{
				i = (i<<1) | 0x01;
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	71fb      	strb	r3, [r7, #7]
			}
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==1);
 8000e9a:	bf00      	nop
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <DHT_Read+0x6c>)
 8000ea0:	f001 fed2 	bl	8002c48 <HAL_GPIO_ReadPin>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d0f8      	beq.n	8000e9c <DHT_Read+0x48>
for(j=0; j< 8; j++)
 8000eaa:	79bb      	ldrb	r3, [r7, #6]
 8000eac:	3301      	adds	r3, #1
 8000eae:	71bb      	strb	r3, [r7, #6]
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	2b07      	cmp	r3, #7
 8000eb4:	d9d4      	bls.n	8000e60 <DHT_Read+0xc>
	}
	return i;
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40010800 	.word	0x40010800

08000ec4 <Get_data_DHT11>:

void Get_data_DHT11(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	  Display_Temperature(temperature);
 8000ec8:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <Get_data_DHT11+0xa4>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff0d 	bl	8000cec <Display_Temperature>
	  Display_Humidity(humidity);
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <Get_data_DHT11+0xa8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fee4 	bl	8000ca4 <Display_Humidity>

	  DHT_Start();
 8000edc:	f7ff ff68 	bl	8000db0 <DHT_Start>
	  Presence = DHT_Check();
 8000ee0:	f7ff ff86 	bl	8000df0 <DHT_Check>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <Get_data_DHT11+0xac>)
 8000eea:	701a      	strb	r2, [r3, #0]
	  RH_byte1 = DHT_Read();
 8000eec:	f7ff ffb2 	bl	8000e54 <DHT_Read>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <Get_data_DHT11+0xb0>)
 8000ef6:	701a      	strb	r2, [r3, #0]
	  RH_byte2 = DHT_Read();
 8000ef8:	f7ff ffac 	bl	8000e54 <DHT_Read>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <Get_data_DHT11+0xb4>)
 8000f02:	701a      	strb	r2, [r3, #0]
	  T_byte1 = DHT_Read();
 8000f04:	f7ff ffa6 	bl	8000e54 <DHT_Read>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <Get_data_DHT11+0xb8>)
 8000f0e:	701a      	strb	r2, [r3, #0]
	  T_byte2 = DHT_Read();
 8000f10:	f7ff ffa0 	bl	8000e54 <DHT_Read>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <Get_data_DHT11+0xbc>)
 8000f1a:	701a      	strb	r2, [r3, #0]
	  Check_sum = DHT_Read();
 8000f1c:	f7ff ff9a 	bl	8000e54 <DHT_Read>
 8000f20:	4603      	mov	r3, r0
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <Get_data_DHT11+0xc0>)
 8000f26:	701a      	strb	r2, [r3, #0]

	  TEMP = T_byte1;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <Get_data_DHT11+0xb8>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <Get_data_DHT11+0xc4>)
 8000f30:	801a      	strh	r2, [r3, #0]
	  RH = RH_byte1;
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <Get_data_DHT11+0xb0>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <Get_data_DHT11+0xc8>)
 8000f3a:	801a      	strh	r2, [r3, #0]

	  temperature = (float) TEMP;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <Get_data_DHT11+0xc4>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fe57 	bl	8000bf4 <__aeabi_ui2f>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <Get_data_DHT11+0xa4>)
 8000f4a:	6013      	str	r3, [r2, #0]
	  humidity = (float) RH;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <Get_data_DHT11+0xc8>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fe4f 	bl	8000bf4 <__aeabi_ui2f>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <Get_data_DHT11+0xa8>)
 8000f5a:	6013      	str	r3, [r2, #0]

	  HAL_Delay(1000);
 8000f5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f60:	f001 fbe6 	bl	8002730 <HAL_Delay>
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000218 	.word	0x20000218
 8000f6c:	2000021c 	.word	0x2000021c
 8000f70:	20000220 	.word	0x20000220
 8000f74:	2000020d 	.word	0x2000020d
 8000f78:	2000020e 	.word	0x2000020e
 8000f7c:	2000020f 	.word	0x2000020f
 8000f80:	20000210 	.word	0x20000210
 8000f84:	20000211 	.word	0x20000211
 8000f88:	20000214 	.word	0x20000214
 8000f8c:	20000212 	.word	0x20000212

08000f90 <DectoBcd>:

Handle_time time;
extern I2C_HandleTypeDef hi2c1;
char buffer[16];

uint8_t DectoBcd(int val){
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	return (uint8_t)( (val/10*16) + (val%10) );
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <DectoBcd+0x44>)
 8000f9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa0:	1092      	asrs	r2, r2, #2
 8000fa2:	17db      	asrs	r3, r3, #31
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	b2d8      	uxtb	r0, r3
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <DectoBcd+0x44>)
 8000fb0:	fb83 1302 	smull	r1, r3, r3, r2
 8000fb4:	1099      	asrs	r1, r3, #2
 8000fb6:	17d3      	asrs	r3, r2, #31
 8000fb8:	1ac9      	subs	r1, r1, r3
 8000fba:	460b      	mov	r3, r1
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	1ad1      	subs	r1, r2, r3
 8000fc4:	b2cb      	uxtb	r3, r1
 8000fc6:	4403      	add	r3, r0
 8000fc8:	b2db      	uxtb	r3, r3
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	66666667 	.word	0x66666667

08000fd8 <BcdtoDec>:

int BcdtoDec(uint8_t val){
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4613      	mov	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	4413      	add	r3, r2
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
	...

08001008 <Set_time>:

void Set_time(int seconds, int minutes, int hour, int day, int date, int month, int year){
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af04      	add	r7, sp, #16
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
	uint8_t Time[7];
	Time[0] = DectoBcd(seconds);
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f7ff ffba 	bl	8000f90 <DectoBcd>
 800101c:	4603      	mov	r3, r0
 800101e:	743b      	strb	r3, [r7, #16]
	Time[1] = DectoBcd(minutes);
 8001020:	68b8      	ldr	r0, [r7, #8]
 8001022:	f7ff ffb5 	bl	8000f90 <DectoBcd>
 8001026:	4603      	mov	r3, r0
 8001028:	747b      	strb	r3, [r7, #17]
	Time[2] = DectoBcd(hour);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffb0 	bl	8000f90 <DectoBcd>
 8001030:	4603      	mov	r3, r0
 8001032:	74bb      	strb	r3, [r7, #18]
	Time[3] = DectoBcd(day);
 8001034:	6838      	ldr	r0, [r7, #0]
 8001036:	f7ff ffab 	bl	8000f90 <DectoBcd>
 800103a:	4603      	mov	r3, r0
 800103c:	74fb      	strb	r3, [r7, #19]
	Time[4] = DectoBcd(date);
 800103e:	6a38      	ldr	r0, [r7, #32]
 8001040:	f7ff ffa6 	bl	8000f90 <DectoBcd>
 8001044:	4603      	mov	r3, r0
 8001046:	753b      	strb	r3, [r7, #20]
	Time[5] = DectoBcd(month);
 8001048:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800104a:	f7ff ffa1 	bl	8000f90 <DectoBcd>
 800104e:	4603      	mov	r3, r0
 8001050:	757b      	strb	r3, [r7, #21]
	Time[6] = DectoBcd(year);
 8001052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001054:	f7ff ff9c 	bl	8000f90 <DectoBcd>
 8001058:	4603      	mov	r3, r0
 800105a:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_Address, Address_Start, 1, Time, 7, 1000);
 800105c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001060:	9302      	str	r3, [sp, #8]
 8001062:	2307      	movs	r3, #7
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	2200      	movs	r2, #0
 8001070:	21d0      	movs	r1, #208	; 0xd0
 8001072:	4803      	ldr	r0, [pc, #12]	; (8001080 <Set_time+0x78>)
 8001074:	f002 f85a 	bl	800312c <HAL_I2C_Mem_Write>
}
 8001078:	bf00      	nop
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000274 	.word	0x20000274

08001084 <Get_time>:

void Get_time(void){
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af04      	add	r7, sp, #16
	uint8_t Time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_Address, Address_Start, 1, Time, 7, 1000);
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	2307      	movs	r3, #7
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	463b      	mov	r3, r7
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	2200      	movs	r2, #0
 800109c:	21d0      	movs	r1, #208	; 0xd0
 800109e:	481c      	ldr	r0, [pc, #112]	; (8001110 <Get_time+0x8c>)
 80010a0:	f002 f93e 	bl	8003320 <HAL_I2C_Mem_Read>
	time.seconds = BcdtoDec(Time[0]);
 80010a4:	783b      	ldrb	r3, [r7, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff96 	bl	8000fd8 <BcdtoDec>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a19      	ldr	r2, [pc, #100]	; (8001114 <Get_time+0x90>)
 80010b0:	6013      	str	r3, [r2, #0]
	time.minutes = BcdtoDec(Time[1]);
 80010b2:	787b      	ldrb	r3, [r7, #1]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff8f 	bl	8000fd8 <BcdtoDec>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a15      	ldr	r2, [pc, #84]	; (8001114 <Get_time+0x90>)
 80010be:	6053      	str	r3, [r2, #4]
	time.hour = BcdtoDec(Time[2]);
 80010c0:	78bb      	ldrb	r3, [r7, #2]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff88 	bl	8000fd8 <BcdtoDec>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a12      	ldr	r2, [pc, #72]	; (8001114 <Get_time+0x90>)
 80010cc:	6093      	str	r3, [r2, #8]
	time.day = BcdtoDec(Time[3]);
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff81 	bl	8000fd8 <BcdtoDec>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <Get_time+0x90>)
 80010da:	60d3      	str	r3, [r2, #12]
	time.date = BcdtoDec(Time[4]);
 80010dc:	793b      	ldrb	r3, [r7, #4]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff7a 	bl	8000fd8 <BcdtoDec>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <Get_time+0x90>)
 80010e8:	6113      	str	r3, [r2, #16]
	time.month = BcdtoDec(Time[5]);
 80010ea:	797b      	ldrb	r3, [r7, #5]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff73 	bl	8000fd8 <BcdtoDec>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <Get_time+0x90>)
 80010f6:	6153      	str	r3, [r2, #20]
	time.year = BcdtoDec(Time[6]);
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff6c 	bl	8000fd8 <BcdtoDec>
 8001100:	4603      	mov	r3, r0
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <Get_time+0x90>)
 8001104:	6193      	str	r3, [r2, #24]
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000274 	.word	0x20000274
 8001114:	20000224 	.word	0x20000224

08001118 <Delay_us>:
#include "delay_us.h"

extern TIM_HandleTypeDef htim1;

void Delay_us(uint16_t us){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
	htim1.Instance->CNT = 0;
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <Delay_us+0x34>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim1);
 800112a:	4808      	ldr	r0, [pc, #32]	; (800114c <Delay_us+0x34>)
 800112c:	f003 fb92 	bl	8004854 <HAL_TIM_Base_Start>
	while(htim1.Instance->CNT < us);
 8001130:	bf00      	nop
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <Delay_us+0x34>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	429a      	cmp	r2, r3
 800113c:	d3f9      	bcc.n	8001132 <Delay_us+0x1a>
	HAL_TIM_Base_Stop(&htim1);
 800113e:	4803      	ldr	r0, [pc, #12]	; (800114c <Delay_us+0x34>)
 8001140:	f003 fbd2 	bl	80048e8 <HAL_TIM_Base_Stop>
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200002c8 	.word	0x200002c8

08001150 <Encoder_Setup>:
uint8_t button_last_state = 1;
uint8_t button_filter = 1;
uint8_t is_debouncing = 0;
uint32_t time_debounce;

void Encoder_Setup(void){
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

	begin_state = HAL_GPIO_ReadPin(GPIOA , CLK_PIN);
 8001154:	2102      	movs	r1, #2
 8001156:	4804      	ldr	r0, [pc, #16]	; (8001168 <Encoder_Setup+0x18>)
 8001158:	f001 fd76 	bl	8002c48 <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	4b02      	ldr	r3, [pc, #8]	; (800116c <Encoder_Setup+0x1c>)
 8001162:	701a      	strb	r2, [r3, #0]
	
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40010800 	.word	0x40010800
 800116c:	2000026c 	.word	0x2000026c

08001170 <Encoder_Handle>:

int Encoder_Handle(void){
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	current_state = HAL_GPIO_ReadPin(GPIOA, CLK_PIN);
 8001174:	2102      	movs	r1, #2
 8001176:	4821      	ldr	r0, [pc, #132]	; (80011fc <Encoder_Handle+0x8c>)
 8001178:	f001 fd66 	bl	8002c48 <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <Encoder_Handle+0x90>)
 8001182:	701a      	strb	r2, [r3, #0]
	if(current_state != begin_state){
 8001184:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <Encoder_Handle+0x90>)
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <Encoder_Handle+0x94>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d01e      	beq.n	80011ce <Encoder_Handle+0x5e>
		if(current_state != HAL_GPIO_ReadPin(GPIOA, DT_PIN)){
 8001190:	2104      	movs	r1, #4
 8001192:	481a      	ldr	r0, [pc, #104]	; (80011fc <Encoder_Handle+0x8c>)
 8001194:	f001 fd58 	bl	8002c48 <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <Encoder_Handle+0x90>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d005      	beq.n	80011b0 <Encoder_Handle+0x40>
			count++;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <Encoder_Handle+0x98>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3301      	adds	r3, #1
 80011aa:	4a17      	ldr	r2, [pc, #92]	; (8001208 <Encoder_Handle+0x98>)
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	e00e      	b.n	80011ce <Encoder_Handle+0x5e>
		}
		else if(current_state == HAL_GPIO_ReadPin(GPIOA, DT_PIN)){
 80011b0:	2104      	movs	r1, #4
 80011b2:	4812      	ldr	r0, [pc, #72]	; (80011fc <Encoder_Handle+0x8c>)
 80011b4:	f001 fd48 	bl	8002c48 <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <Encoder_Handle+0x90>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d104      	bne.n	80011ce <Encoder_Handle+0x5e>
			count--;
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <Encoder_Handle+0x98>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <Encoder_Handle+0x98>)
 80011cc:	6013      	str	r3, [r2, #0]
		}
	}
	if(count < 0){
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <Encoder_Handle+0x98>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	da03      	bge.n	80011de <Encoder_Handle+0x6e>
		count = 3;
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <Encoder_Handle+0x98>)
 80011d8:	2203      	movs	r2, #3
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e006      	b.n	80011ec <Encoder_Handle+0x7c>
	}
	else if(count > 3){
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <Encoder_Handle+0x98>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	dd02      	ble.n	80011ec <Encoder_Handle+0x7c>
		count = 0;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <Encoder_Handle+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
	}
	begin_state = current_state;
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <Encoder_Handle+0x90>)
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <Encoder_Handle+0x94>)
 80011f2:	701a      	strb	r2, [r3, #0]
	return count;
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <Encoder_Handle+0x98>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40010800 	.word	0x40010800
 8001200:	2000026d 	.word	0x2000026d
 8001204:	2000026c 	.word	0x2000026c
 8001208:	20000268 	.word	0x20000268

0800120c <Change_hour>:

int Change_hour(void){
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	current_state = HAL_GPIO_ReadPin(GPIOA, CLK_PIN);
 8001210:	2102      	movs	r1, #2
 8001212:	481c      	ldr	r0, [pc, #112]	; (8001284 <Change_hour+0x78>)
 8001214:	f001 fd18 	bl	8002c48 <HAL_GPIO_ReadPin>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <Change_hour+0x7c>)
 800121e:	701a      	strb	r2, [r3, #0]
	if(current_state != begin_state){
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <Change_hour+0x7c>)
 8001222:	781a      	ldrb	r2, [r3, #0]
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <Change_hour+0x80>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d014      	beq.n	8001256 <Change_hour+0x4a>
		if(current_state != HAL_GPIO_ReadPin(GPIOA, DT_PIN)){
 800122c:	2104      	movs	r1, #4
 800122e:	4815      	ldr	r0, [pc, #84]	; (8001284 <Change_hour+0x78>)
 8001230:	f001 fd0a 	bl	8002c48 <HAL_GPIO_ReadPin>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <Change_hour+0x7c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d005      	beq.n	800124c <Change_hour+0x40>
			Hour++;
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <Change_hour+0x84>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	4a12      	ldr	r2, [pc, #72]	; (8001290 <Change_hour+0x84>)
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e004      	b.n	8001256 <Change_hour+0x4a>
		}
		else{
			Hour--;
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <Change_hour+0x84>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3b01      	subs	r3, #1
 8001252:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <Change_hour+0x84>)
 8001254:	6013      	str	r3, [r2, #0]
		}
	}
	if(Hour < 0)  Hour = 24;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <Change_hour+0x84>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	da02      	bge.n	8001264 <Change_hour+0x58>
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <Change_hour+0x84>)
 8001260:	2218      	movs	r2, #24
 8001262:	601a      	str	r2, [r3, #0]
	if(Hour > 24) Hour = 0;
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <Change_hour+0x84>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b18      	cmp	r3, #24
 800126a:	dd02      	ble.n	8001272 <Change_hour+0x66>
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <Change_hour+0x84>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
	begin_state = current_state;
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <Change_hour+0x7c>)
 8001274:	781a      	ldrb	r2, [r3, #0]
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <Change_hour+0x80>)
 8001278:	701a      	strb	r2, [r3, #0]
	return Hour;
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <Change_hour+0x84>)
 800127c:	681b      	ldr	r3, [r3, #0]
}
 800127e:	4618      	mov	r0, r3
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40010800 	.word	0x40010800
 8001288:	2000026d 	.word	0x2000026d
 800128c:	2000026c 	.word	0x2000026c
 8001290:	20000258 	.word	0x20000258

08001294 <Change_minutes>:

int Change_minutes(void){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	current_state = HAL_GPIO_ReadPin(GPIOA, CLK_PIN);
 8001298:	2102      	movs	r1, #2
 800129a:	481c      	ldr	r0, [pc, #112]	; (800130c <Change_minutes+0x78>)
 800129c:	f001 fcd4 	bl	8002c48 <HAL_GPIO_ReadPin>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <Change_minutes+0x7c>)
 80012a6:	701a      	strb	r2, [r3, #0]
	if(current_state != begin_state){
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <Change_minutes+0x7c>)
 80012aa:	781a      	ldrb	r2, [r3, #0]
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <Change_minutes+0x80>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d014      	beq.n	80012de <Change_minutes+0x4a>
		if(current_state != HAL_GPIO_ReadPin(GPIOA, DT_PIN)){
 80012b4:	2104      	movs	r1, #4
 80012b6:	4815      	ldr	r0, [pc, #84]	; (800130c <Change_minutes+0x78>)
 80012b8:	f001 fcc6 	bl	8002c48 <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <Change_minutes+0x7c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d005      	beq.n	80012d4 <Change_minutes+0x40>
			Minutes++;
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <Change_minutes+0x84>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3301      	adds	r3, #1
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <Change_minutes+0x84>)
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e004      	b.n	80012de <Change_minutes+0x4a>
		}
		else{
			Minutes--;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <Change_minutes+0x84>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3b01      	subs	r3, #1
 80012da:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <Change_minutes+0x84>)
 80012dc:	6013      	str	r3, [r2, #0]
		}
	}
	if(Minutes < 0)  Minutes = 60;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <Change_minutes+0x84>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	da02      	bge.n	80012ec <Change_minutes+0x58>
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <Change_minutes+0x84>)
 80012e8:	223c      	movs	r2, #60	; 0x3c
 80012ea:	601a      	str	r2, [r3, #0]
	if(Minutes > 60) Minutes = 0;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <Change_minutes+0x84>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b3c      	cmp	r3, #60	; 0x3c
 80012f2:	dd02      	ble.n	80012fa <Change_minutes+0x66>
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <Change_minutes+0x84>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
	begin_state = current_state;
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <Change_minutes+0x7c>)
 80012fc:	781a      	ldrb	r2, [r3, #0]
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <Change_minutes+0x80>)
 8001300:	701a      	strb	r2, [r3, #0]
	return Minutes;
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <Change_minutes+0x84>)
 8001304:	681b      	ldr	r3, [r3, #0]
}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40010800 	.word	0x40010800
 8001310:	2000026d 	.word	0x2000026d
 8001314:	2000026c 	.word	0x2000026c
 8001318:	20000254 	.word	0x20000254

0800131c <Change_seconds>:

int Change_seconds(void){
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	current_state = HAL_GPIO_ReadPin(GPIOA, CLK_PIN);
 8001320:	2102      	movs	r1, #2
 8001322:	481c      	ldr	r0, [pc, #112]	; (8001394 <Change_seconds+0x78>)
 8001324:	f001 fc90 	bl	8002c48 <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <Change_seconds+0x7c>)
 800132e:	701a      	strb	r2, [r3, #0]
	if(current_state != begin_state){
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <Change_seconds+0x7c>)
 8001332:	781a      	ldrb	r2, [r3, #0]
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <Change_seconds+0x80>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d014      	beq.n	8001366 <Change_seconds+0x4a>
		if(current_state != HAL_GPIO_ReadPin(GPIOA, DT_PIN)){
 800133c:	2104      	movs	r1, #4
 800133e:	4815      	ldr	r0, [pc, #84]	; (8001394 <Change_seconds+0x78>)
 8001340:	f001 fc82 	bl	8002c48 <HAL_GPIO_ReadPin>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <Change_seconds+0x7c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d005      	beq.n	800135c <Change_seconds+0x40>
			Seconds++;
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <Change_seconds+0x84>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <Change_seconds+0x84>)
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e004      	b.n	8001366 <Change_seconds+0x4a>
		}
		else{
			Seconds--;
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <Change_seconds+0x84>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3b01      	subs	r3, #1
 8001362:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <Change_seconds+0x84>)
 8001364:	6013      	str	r3, [r2, #0]
		}
	}
	if(Seconds < 0)  Seconds = 60;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <Change_seconds+0x84>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	da02      	bge.n	8001374 <Change_seconds+0x58>
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <Change_seconds+0x84>)
 8001370:	223c      	movs	r2, #60	; 0x3c
 8001372:	601a      	str	r2, [r3, #0]
	if(Seconds > 60) Seconds = 0;
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <Change_seconds+0x84>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b3c      	cmp	r3, #60	; 0x3c
 800137a:	dd02      	ble.n	8001382 <Change_seconds+0x66>
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <Change_seconds+0x84>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
	begin_state = current_state;
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <Change_seconds+0x7c>)
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <Change_seconds+0x80>)
 8001388:	701a      	strb	r2, [r3, #0]
	return Seconds;
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <Change_seconds+0x84>)
 800138c:	681b      	ldr	r3, [r3, #0]
}
 800138e:	4618      	mov	r0, r3
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40010800 	.word	0x40010800
 8001398:	2000026d 	.word	0x2000026d
 800139c:	2000026c 	.word	0x2000026c
 80013a0:	20000250 	.word	0x20000250

080013a4 <Change_day>:

int Change_day(void){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	current_state = HAL_GPIO_ReadPin(GPIOA, CLK_PIN);
 80013a8:	2102      	movs	r1, #2
 80013aa:	4815      	ldr	r0, [pc, #84]	; (8001400 <Change_day+0x5c>)
 80013ac:	f001 fc4c 	bl	8002c48 <HAL_GPIO_ReadPin>
 80013b0:	4603      	mov	r3, r0
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <Change_day+0x60>)
 80013b6:	701a      	strb	r2, [r3, #0]
	if(current_state != begin_state){
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <Change_day+0x60>)
 80013ba:	781a      	ldrb	r2, [r3, #0]
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <Change_day+0x64>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d014      	beq.n	80013ee <Change_day+0x4a>
		if(current_state != HAL_GPIO_ReadPin(GPIOA, DT_PIN)){
 80013c4:	2104      	movs	r1, #4
 80013c6:	480e      	ldr	r0, [pc, #56]	; (8001400 <Change_day+0x5c>)
 80013c8:	f001 fc3e 	bl	8002c48 <HAL_GPIO_ReadPin>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <Change_day+0x60>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d005      	beq.n	80013e4 <Change_day+0x40>
			Day++;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <Change_day+0x68>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3301      	adds	r3, #1
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <Change_day+0x68>)
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	e004      	b.n	80013ee <Change_day+0x4a>
		}
		else{
			Day--;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <Change_day+0x68>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	4a08      	ldr	r2, [pc, #32]	; (800140c <Change_day+0x68>)
 80013ec:	6013      	str	r3, [r2, #0]
		}
	}
	begin_state = current_state;
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <Change_day+0x60>)
 80013f0:	781a      	ldrb	r2, [r3, #0]
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <Change_day+0x64>)
 80013f4:	701a      	strb	r2, [r3, #0]
	return Day;
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <Change_day+0x68>)
 80013f8:	681b      	ldr	r3, [r3, #0]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40010800 	.word	0x40010800
 8001404:	2000026d 	.word	0x2000026d
 8001408:	2000026c 	.word	0x2000026c
 800140c:	2000025c 	.word	0x2000025c

08001410 <Change_date>:

int Change_date(void){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	current_state = HAL_GPIO_ReadPin(GPIOA, CLK_PIN);
 8001414:	2102      	movs	r1, #2
 8001416:	481c      	ldr	r0, [pc, #112]	; (8001488 <Change_date+0x78>)
 8001418:	f001 fc16 	bl	8002c48 <HAL_GPIO_ReadPin>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <Change_date+0x7c>)
 8001422:	701a      	strb	r2, [r3, #0]
	if(current_state != begin_state){
 8001424:	4b19      	ldr	r3, [pc, #100]	; (800148c <Change_date+0x7c>)
 8001426:	781a      	ldrb	r2, [r3, #0]
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <Change_date+0x80>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d014      	beq.n	800145a <Change_date+0x4a>
		if(current_state != HAL_GPIO_ReadPin(GPIOA, DT_PIN)){
 8001430:	2104      	movs	r1, #4
 8001432:	4815      	ldr	r0, [pc, #84]	; (8001488 <Change_date+0x78>)
 8001434:	f001 fc08 	bl	8002c48 <HAL_GPIO_ReadPin>
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <Change_date+0x7c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	429a      	cmp	r2, r3
 8001442:	d005      	beq.n	8001450 <Change_date+0x40>
			Date++;
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <Change_date+0x84>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	4a12      	ldr	r2, [pc, #72]	; (8001494 <Change_date+0x84>)
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	e004      	b.n	800145a <Change_date+0x4a>
		}
		else{
			Date--;
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <Change_date+0x84>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	3b01      	subs	r3, #1
 8001456:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <Change_date+0x84>)
 8001458:	6013      	str	r3, [r2, #0]
		}
	}
	if(Date < 1) Date  = 31;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <Change_date+0x84>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	dc02      	bgt.n	8001468 <Change_date+0x58>
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <Change_date+0x84>)
 8001464:	221f      	movs	r2, #31
 8001466:	601a      	str	r2, [r3, #0]
	if(Date > 31) Date = 1;
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <Change_date+0x84>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b1f      	cmp	r3, #31
 800146e:	dd02      	ble.n	8001476 <Change_date+0x66>
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <Change_date+0x84>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]
	begin_state = current_state;
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <Change_date+0x7c>)
 8001478:	781a      	ldrb	r2, [r3, #0]
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <Change_date+0x80>)
 800147c:	701a      	strb	r2, [r3, #0]
	return Date;
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <Change_date+0x84>)
 8001480:	681b      	ldr	r3, [r3, #0]
}
 8001482:	4618      	mov	r0, r3
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40010800 	.word	0x40010800
 800148c:	2000026d 	.word	0x2000026d
 8001490:	2000026c 	.word	0x2000026c
 8001494:	20000260 	.word	0x20000260

08001498 <Change_month>:

int Change_month(void){
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	current_state = HAL_GPIO_ReadPin(GPIOA, CLK_PIN);
 800149c:	2102      	movs	r1, #2
 800149e:	481c      	ldr	r0, [pc, #112]	; (8001510 <Change_month+0x78>)
 80014a0:	f001 fbd2 	bl	8002c48 <HAL_GPIO_ReadPin>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <Change_month+0x7c>)
 80014aa:	701a      	strb	r2, [r3, #0]
	if(current_state != begin_state){
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <Change_month+0x7c>)
 80014ae:	781a      	ldrb	r2, [r3, #0]
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <Change_month+0x80>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d014      	beq.n	80014e2 <Change_month+0x4a>
		if(current_state != HAL_GPIO_ReadPin(GPIOA, DT_PIN)){
 80014b8:	2104      	movs	r1, #4
 80014ba:	4815      	ldr	r0, [pc, #84]	; (8001510 <Change_month+0x78>)
 80014bc:	f001 fbc4 	bl	8002c48 <HAL_GPIO_ReadPin>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <Change_month+0x7c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d005      	beq.n	80014d8 <Change_month+0x40>
			Month++;
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <Change_month+0x84>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <Change_month+0x84>)
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e004      	b.n	80014e2 <Change_month+0x4a>
		}
		else{
			Month--;
 80014d8:	4b10      	ldr	r3, [pc, #64]	; (800151c <Change_month+0x84>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3b01      	subs	r3, #1
 80014de:	4a0f      	ldr	r2, [pc, #60]	; (800151c <Change_month+0x84>)
 80014e0:	6013      	str	r3, [r2, #0]
		}
	}
	if(Month < 1) Month  = 12;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <Change_month+0x84>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	dc02      	bgt.n	80014f0 <Change_month+0x58>
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <Change_month+0x84>)
 80014ec:	220c      	movs	r2, #12
 80014ee:	601a      	str	r2, [r3, #0]
	if(Month > 12) Month = 1;
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <Change_month+0x84>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b0c      	cmp	r3, #12
 80014f6:	dd02      	ble.n	80014fe <Change_month+0x66>
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <Change_month+0x84>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]
	begin_state = current_state;
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <Change_month+0x7c>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <Change_month+0x80>)
 8001504:	701a      	strb	r2, [r3, #0]
	return Month;
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <Change_month+0x84>)
 8001508:	681b      	ldr	r3, [r3, #0]
}
 800150a:	4618      	mov	r0, r3
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40010800 	.word	0x40010800
 8001514:	2000026d 	.word	0x2000026d
 8001518:	2000026c 	.word	0x2000026c
 800151c:	20000264 	.word	0x20000264

08001520 <Change_year>:

int Change_year(void){
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	current_state = HAL_GPIO_ReadPin(GPIOA, CLK_PIN);
 8001524:	2102      	movs	r1, #2
 8001526:	481c      	ldr	r0, [pc, #112]	; (8001598 <Change_year+0x78>)
 8001528:	f001 fb8e 	bl	8002c48 <HAL_GPIO_ReadPin>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <Change_year+0x7c>)
 8001532:	701a      	strb	r2, [r3, #0]
	if(current_state != begin_state){
 8001534:	4b19      	ldr	r3, [pc, #100]	; (800159c <Change_year+0x7c>)
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <Change_year+0x80>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d014      	beq.n	800156a <Change_year+0x4a>
		if(current_state != HAL_GPIO_ReadPin(GPIOA, DT_PIN)){
 8001540:	2104      	movs	r1, #4
 8001542:	4815      	ldr	r0, [pc, #84]	; (8001598 <Change_year+0x78>)
 8001544:	f001 fb80 	bl	8002c48 <HAL_GPIO_ReadPin>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <Change_year+0x7c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d005      	beq.n	8001560 <Change_year+0x40>
			Year++;
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <Change_year+0x84>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <Change_year+0x84>)
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e004      	b.n	800156a <Change_year+0x4a>
		}
		else{
			Year--;
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <Change_year+0x84>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3b01      	subs	r3, #1
 8001566:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <Change_year+0x84>)
 8001568:	6013      	str	r3, [r2, #0]
		}
	}
	if(Year < 0) Year = 0;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <Change_year+0x84>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	da02      	bge.n	8001578 <Change_year+0x58>
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <Change_year+0x84>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
	if(Year > 99) Year = 99;
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <Change_year+0x84>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b63      	cmp	r3, #99	; 0x63
 800157e:	dd02      	ble.n	8001586 <Change_year+0x66>
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <Change_year+0x84>)
 8001582:	2263      	movs	r2, #99	; 0x63
 8001584:	601a      	str	r2, [r3, #0]
	begin_state = current_state;
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <Change_year+0x7c>)
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <Change_year+0x80>)
 800158c:	701a      	strb	r2, [r3, #0]
	return Year;
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <Change_year+0x84>)
 8001590:	681b      	ldr	r3, [r3, #0]
}
 8001592:	4618      	mov	r0, r3
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40010800 	.word	0x40010800
 800159c:	2000026d 	.word	0x2000026d
 80015a0:	2000026c 	.word	0x2000026c
 80015a4:	20000000 	.word	0x20000000

080015a8 <Button_Handle>:

int Button_Handle(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
	uint8_t sta = HAL_GPIO_ReadPin(GPIOA, SW_PIN);
 80015ae:	2108      	movs	r1, #8
 80015b0:	4821      	ldr	r0, [pc, #132]	; (8001638 <Button_Handle+0x90>)
 80015b2:	f001 fb49 	bl	8002c48 <HAL_GPIO_ReadPin>
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
	if(sta != button_filter)
 80015ba:	4b20      	ldr	r3, [pc, #128]	; (800163c <Button_Handle+0x94>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	79fa      	ldrb	r2, [r7, #7]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d00a      	beq.n	80015da <Button_Handle+0x32>
	{
		button_filter = sta;
 80015c4:	4a1d      	ldr	r2, [pc, #116]	; (800163c <Button_Handle+0x94>)
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	7013      	strb	r3, [r2, #0]
		is_debouncing = 1;
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <Button_Handle+0x98>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
		time_debounce = HAL_GetTick();
 80015d0:	f001 f8a4 	bl	800271c <HAL_GetTick>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a1b      	ldr	r2, [pc, #108]	; (8001644 <Button_Handle+0x9c>)
 80015d8:	6013      	str	r3, [r2, #0]
	}
	if(is_debouncing  && (HAL_GetTick() - time_debounce >= 15))
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <Button_Handle+0x98>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00e      	beq.n	8001600 <Button_Handle+0x58>
 80015e2:	f001 f89b 	bl	800271c <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <Button_Handle+0x9c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b0e      	cmp	r3, #14
 80015f0:	d906      	bls.n	8001600 <Button_Handle+0x58>
	{
		button_current_state = button_filter;
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <Button_Handle+0x94>)
 80015f4:	781a      	ldrb	r2, [r3, #0]
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <Button_Handle+0xa0>)
 80015f8:	701a      	strb	r2, [r3, #0]
		is_debouncing = 0;
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <Button_Handle+0x98>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
	}

	if(button_current_state != button_last_state)
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <Button_Handle+0xa0>)
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <Button_Handle+0xa4>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d00e      	beq.n	800162a <Button_Handle+0x82>
	{
		if(button_current_state == 0)
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <Button_Handle+0xa0>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d103      	bne.n	800161c <Button_Handle+0x74>
		{
			button_count = 0;
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <Button_Handle+0xa8>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	e002      	b.n	8001622 <Button_Handle+0x7a>
		}
		else
		{
			button_count = 1;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <Button_Handle+0xa8>)
 800161e:	2201      	movs	r2, #1
 8001620:	601a      	str	r2, [r3, #0]
		}
		button_last_state = button_current_state;
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <Button_Handle+0xa0>)
 8001624:	781a      	ldrb	r2, [r3, #0]
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <Button_Handle+0xa4>)
 8001628:	701a      	strb	r2, [r3, #0]
	}
	return button_count;
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <Button_Handle+0xa8>)
 800162c:	681b      	ldr	r3, [r3, #0]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40010800 	.word	0x40010800
 800163c:	2000000a 	.word	0x2000000a
 8001640:	2000026e 	.word	0x2000026e
 8001644:	20000270 	.word	0x20000270
 8001648:	20000008 	.word	0x20000008
 800164c:	20000009 	.word	0x20000009
 8001650:	20000004 	.word	0x20000004

08001654 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af02      	add	r7, sp, #8
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f023 030f 	bic.w	r3, r3, #15
 8001664:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	f043 030c 	orr.w	r3, r3, #12
 8001672:	b2db      	uxtb	r3, r3
 8001674:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	f043 0308 	orr.w	r3, r3, #8
 800167c:	b2db      	uxtb	r3, r3
 800167e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001680:	7bbb      	ldrb	r3, [r7, #14]
 8001682:	f043 030c 	orr.w	r3, r3, #12
 8001686:	b2db      	uxtb	r3, r3
 8001688:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800168a:	7bbb      	ldrb	r3, [r7, #14]
 800168c:	f043 0308 	orr.w	r3, r3, #8
 8001690:	b2db      	uxtb	r3, r3
 8001692:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001694:	f107 0208 	add.w	r2, r7, #8
 8001698:	2364      	movs	r3, #100	; 0x64
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2304      	movs	r3, #4
 800169e:	214e      	movs	r1, #78	; 0x4e
 80016a0:	4803      	ldr	r0, [pc, #12]	; (80016b0 <lcd_send_cmd+0x5c>)
 80016a2:	f001 fc45 	bl	8002f30 <HAL_I2C_Master_Transmit>
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000274 	.word	0x20000274

080016b4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	f023 030f 	bic.w	r3, r3, #15
 80016c4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	f043 030d 	orr.w	r3, r3, #13
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	f043 0309 	orr.w	r3, r3, #9
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80016e0:	7bbb      	ldrb	r3, [r7, #14]
 80016e2:	f043 030d 	orr.w	r3, r3, #13
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80016ea:	7bbb      	ldrb	r3, [r7, #14]
 80016ec:	f043 0309 	orr.w	r3, r3, #9
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80016f4:	f107 0208 	add.w	r2, r7, #8
 80016f8:	2364      	movs	r3, #100	; 0x64
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	2304      	movs	r3, #4
 80016fe:	214e      	movs	r1, #78	; 0x4e
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <lcd_send_data+0x5c>)
 8001702:	f001 fc15 	bl	8002f30 <HAL_I2C_Master_Transmit>
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000274 	.word	0x20000274

08001714 <lcd_clear>:

void lcd_clear (void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff ff9a 	bl	8001654 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8001720:	2300      	movs	r3, #0
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	e005      	b.n	8001732 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001726:	2020      	movs	r0, #32
 8001728:	f7ff ffc4 	bl	80016b4 <lcd_send_data>
	for (int i=0; i<100; i++)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3301      	adds	r3, #1
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b63      	cmp	r3, #99	; 0x63
 8001736:	ddf6      	ble.n	8001726 <lcd_clear+0x12>
	}
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <lcd_init>:

void lcd_init (void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001746:	2032      	movs	r0, #50	; 0x32
 8001748:	f000 fff2 	bl	8002730 <HAL_Delay>
	lcd_send_cmd (0x30);
 800174c:	2030      	movs	r0, #48	; 0x30
 800174e:	f7ff ff81 	bl	8001654 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001752:	2005      	movs	r0, #5
 8001754:	f000 ffec 	bl	8002730 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001758:	2030      	movs	r0, #48	; 0x30
 800175a:	f7ff ff7b 	bl	8001654 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800175e:	2001      	movs	r0, #1
 8001760:	f000 ffe6 	bl	8002730 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001764:	2030      	movs	r0, #48	; 0x30
 8001766:	f7ff ff75 	bl	8001654 <lcd_send_cmd>
	HAL_Delay(10);
 800176a:	200a      	movs	r0, #10
 800176c:	f000 ffe0 	bl	8002730 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001770:	2020      	movs	r0, #32
 8001772:	f7ff ff6f 	bl	8001654 <lcd_send_cmd>
	HAL_Delay(10);
 8001776:	200a      	movs	r0, #10
 8001778:	f000 ffda 	bl	8002730 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800177c:	2028      	movs	r0, #40	; 0x28
 800177e:	f7ff ff69 	bl	8001654 <lcd_send_cmd>
	HAL_Delay(1);
 8001782:	2001      	movs	r0, #1
 8001784:	f000 ffd4 	bl	8002730 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001788:	2008      	movs	r0, #8
 800178a:	f7ff ff63 	bl	8001654 <lcd_send_cmd>
	HAL_Delay(1);
 800178e:	2001      	movs	r0, #1
 8001790:	f000 ffce 	bl	8002730 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001794:	2001      	movs	r0, #1
 8001796:	f7ff ff5d 	bl	8001654 <lcd_send_cmd>
	HAL_Delay(1);
 800179a:	2001      	movs	r0, #1
 800179c:	f000 ffc8 	bl	8002730 <HAL_Delay>
	HAL_Delay(1);
 80017a0:	2001      	movs	r0, #1
 80017a2:	f000 ffc5 	bl	8002730 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80017a6:	2006      	movs	r0, #6
 80017a8:	f7ff ff54 	bl	8001654 <lcd_send_cmd>
	HAL_Delay(1);
 80017ac:	2001      	movs	r0, #1
 80017ae:	f000 ffbf 	bl	8002730 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80017b2:	200c      	movs	r0, #12
 80017b4:	f7ff ff4e 	bl	8001654 <lcd_send_cmd>
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}

080017bc <lcd_send_string>:

void lcd_send_string (char *str)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80017c4:	e006      	b.n	80017d4 <lcd_send_string+0x18>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ff70 	bl	80016b4 <lcd_send_data>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f4      	bne.n	80017c6 <lcd_send_string+0xa>
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ea:	f000 ff3f 	bl	800266c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ee:	f000 f80b 	bl	8001808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f2:	f000 f8c9 	bl	8001988 <MX_GPIO_Init>
  MX_TIM1_Init();
 80017f6:	f000 f877 	bl	80018e8 <MX_TIM1_Init>
  MX_I2C1_Init();
 80017fa:	f000 f847 	bl	800188c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Set_up();
 80017fe:	f000 f92f 	bl	8001a60 <Set_up>
  while (1)
  {
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	  Setup_menu();
 8001802:	f000 fc3b 	bl	800207c <Setup_menu>
 8001806:	e7fc      	b.n	8001802 <main+0x1c>

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b090      	sub	sp, #64	; 0x40
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 0318 	add.w	r3, r7, #24
 8001812:	2228      	movs	r2, #40	; 0x28
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f003 fad0 	bl	8004dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800182a:	2302      	movs	r3, #2
 800182c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800182e:	2301      	movs	r3, #1
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001832:	2310      	movs	r3, #16
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001836:	2302      	movs	r3, #2
 8001838:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800183a:	2300      	movs	r3, #0
 800183c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800183e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001842:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001844:	f107 0318 	add.w	r3, r7, #24
 8001848:	4618      	mov	r0, r3
 800184a:	f002 fbad 	bl	8003fa8 <HAL_RCC_OscConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001854:	f000 f8fe 	bl	8001a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001858:	230f      	movs	r3, #15
 800185a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800185c:	2302      	movs	r3, #2
 800185e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001868:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2102      	movs	r1, #2
 8001872:	4618      	mov	r0, r3
 8001874:	f002 fe1a 	bl	80044ac <HAL_RCC_ClockConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800187e:	f000 f8e9 	bl	8001a54 <Error_Handler>
  }
}
 8001882:	bf00      	nop
 8001884:	3740      	adds	r7, #64	; 0x40
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <MX_I2C1_Init+0x50>)
 8001892:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <MX_I2C1_Init+0x54>)
 8001894:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_I2C1_Init+0x50>)
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <MX_I2C1_Init+0x58>)
 800189a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <MX_I2C1_Init+0x50>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_I2C1_Init+0x50>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MX_I2C1_Init+0x50>)
 80018aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <MX_I2C1_Init+0x50>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <MX_I2C1_Init+0x50>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <MX_I2C1_Init+0x50>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <MX_I2C1_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018c8:	4804      	ldr	r0, [pc, #16]	; (80018dc <MX_I2C1_Init+0x50>)
 80018ca:	f001 f9ed 	bl	8002ca8 <HAL_I2C_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018d4:	f000 f8be 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000274 	.word	0x20000274
 80018e0:	40005400 	.word	0x40005400
 80018e4:	000186a0 	.word	0x000186a0

080018e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	463b      	mov	r3, r7
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001904:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <MX_TIM1_Init+0x98>)
 8001906:	4a1f      	ldr	r2, [pc, #124]	; (8001984 <MX_TIM1_Init+0x9c>)
 8001908:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <MX_TIM1_Init+0x98>)
 800190c:	223f      	movs	r2, #63	; 0x3f
 800190e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <MX_TIM1_Init+0x98>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <MX_TIM1_Init+0x98>)
 8001918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800191c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <MX_TIM1_Init+0x98>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001924:	4b16      	ldr	r3, [pc, #88]	; (8001980 <MX_TIM1_Init+0x98>)
 8001926:	2200      	movs	r2, #0
 8001928:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <MX_TIM1_Init+0x98>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001930:	4813      	ldr	r0, [pc, #76]	; (8001980 <MX_TIM1_Init+0x98>)
 8001932:	f002 ff3f 	bl	80047b4 <HAL_TIM_Base_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800193c:	f000 f88a 	bl	8001a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001944:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	4619      	mov	r1, r3
 800194c:	480c      	ldr	r0, [pc, #48]	; (8001980 <MX_TIM1_Init+0x98>)
 800194e:	f002 fff1 	bl	8004934 <HAL_TIM_ConfigClockSource>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001958:	f000 f87c 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001964:	463b      	mov	r3, r7
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_TIM1_Init+0x98>)
 800196a:	f003 f99f 	bl	8004cac <HAL_TIMEx_MasterConfigSynchronization>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001974:	f000 f86e 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	200002c8 	.word	0x200002c8
 8001984:	40012c00 	.word	0x40012c00

08001988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198e:	f107 0310 	add.w	r3, r7, #16
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <MX_GPIO_Init+0xc0>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a29      	ldr	r2, [pc, #164]	; (8001a48 <MX_GPIO_Init+0xc0>)
 80019a2:	f043 0310 	orr.w	r3, r3, #16
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <MX_GPIO_Init+0xc0>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f003 0310 	and.w	r3, r3, #16
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <MX_GPIO_Init+0xc0>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a23      	ldr	r2, [pc, #140]	; (8001a48 <MX_GPIO_Init+0xc0>)
 80019ba:	f043 0320 	orr.w	r3, r3, #32
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <MX_GPIO_Init+0xc0>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0320 	and.w	r3, r3, #32
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <MX_GPIO_Init+0xc0>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <MX_GPIO_Init+0xc0>)
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <MX_GPIO_Init+0xc0>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <MX_GPIO_Init+0xc0>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <MX_GPIO_Init+0xc0>)
 80019ea:	f043 0308 	orr.w	r3, r3, #8
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <MX_GPIO_Init+0xc0>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019fc:	2200      	movs	r2, #0
 80019fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a02:	4812      	ldr	r0, [pc, #72]	; (8001a4c <MX_GPIO_Init+0xc4>)
 8001a04:	f001 f937 	bl	8002c76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2302      	movs	r3, #2
 8001a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1a:	f107 0310 	add.w	r3, r7, #16
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480a      	ldr	r0, [pc, #40]	; (8001a4c <MX_GPIO_Init+0xc4>)
 8001a22:	f000 ff8d 	bl	8002940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001a26:	230e      	movs	r3, #14
 8001a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0310 	add.w	r3, r7, #16
 8001a36:	4619      	mov	r1, r3
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_GPIO_Init+0xc8>)
 8001a3a:	f000 ff81 	bl	8002940 <HAL_GPIO_Init>

}
 8001a3e:	bf00      	nop
 8001a40:	3720      	adds	r7, #32
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40011000 	.word	0x40011000
 8001a50:	40010800 	.word	0x40010800

08001a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
}
 8001a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <Error_Handler+0x8>
	...

08001a60 <Set_up>:

char Arrow[] = {0x00, 0x04, 0x1E, 0x1F, 0x1E, 0x04, 0x00, 0x00};
extern char buffer[16];
extern Handle_time time;

void Set_up(void){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
	lcd_init();
 8001a66:	f7ff fe6c 	bl	8001742 <lcd_init>
	Encoder_Setup();
 8001a6a:	f7ff fb71 	bl	8001150 <Encoder_Setup>
	lcd_send_cmd(0x1C);
 8001a6e:	201c      	movs	r0, #28
 8001a70:	f7ff fdf0 	bl	8001654 <lcd_send_cmd>
	lcd_send_cmd(0x40);
 8001a74:	2040      	movs	r0, #64	; 0x40
 8001a76:	f7ff fded 	bl	8001654 <lcd_send_cmd>
	for(int i = 0; i < 8; i++) lcd_send_data(Arrow[i]);
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	e009      	b.n	8001a94 <Set_up+0x34>
 8001a80:	4a08      	ldr	r2, [pc, #32]	; (8001aa4 <Set_up+0x44>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fe13 	bl	80016b4 <lcd_send_data>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3301      	adds	r3, #1
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b07      	cmp	r3, #7
 8001a98:	ddf2      	ble.n	8001a80 <Set_up+0x20>
}
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000000c 	.word	0x2000000c

08001aa8 <Print_arrow>:

void Print_arrow(int location){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

	switch(location){
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d86e      	bhi.n	8001b94 <Print_arrow+0xec>
 8001ab6:	a201      	add	r2, pc, #4	; (adr r2, 8001abc <Print_arrow+0x14>)
 8001ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abc:	08001acd 	.word	0x08001acd
 8001ac0:	08001aff 	.word	0x08001aff
 8001ac4:	08001b31 	.word	0x08001b31
 8001ac8:	08001b63 	.word	0x08001b63
		default:
			break;
		case 0:
			lcd_send_cmd(0x80|0x15);
 8001acc:	2095      	movs	r0, #149	; 0x95
 8001ace:	f7ff fdc1 	bl	8001654 <lcd_send_cmd>
			lcd_send_data(0);
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f7ff fdee 	bl	80016b4 <lcd_send_data>
			lcd_send_cmd(0x80|0x55);
 8001ad8:	20d5      	movs	r0, #213	; 0xd5
 8001ada:	f7ff fdbb 	bl	8001654 <lcd_send_cmd>
			lcd_send_string(" ");
 8001ade:	4830      	ldr	r0, [pc, #192]	; (8001ba0 <Print_arrow+0xf8>)
 8001ae0:	f7ff fe6c 	bl	80017bc <lcd_send_string>
			lcd_send_cmd(0x80|0x1F);
 8001ae4:	209f      	movs	r0, #159	; 0x9f
 8001ae6:	f7ff fdb5 	bl	8001654 <lcd_send_cmd>
			lcd_send_string(" ");
 8001aea:	482d      	ldr	r0, [pc, #180]	; (8001ba0 <Print_arrow+0xf8>)
 8001aec:	f7ff fe66 	bl	80017bc <lcd_send_string>
			lcd_send_cmd(0x80|0x5F);
 8001af0:	20df      	movs	r0, #223	; 0xdf
 8001af2:	f7ff fdaf 	bl	8001654 <lcd_send_cmd>
			lcd_send_string(" ");
 8001af6:	482a      	ldr	r0, [pc, #168]	; (8001ba0 <Print_arrow+0xf8>)
 8001af8:	f7ff fe60 	bl	80017bc <lcd_send_string>
			break;
 8001afc:	e04b      	b.n	8001b96 <Print_arrow+0xee>
		case 1:
			lcd_send_cmd(0x80|0x15);
 8001afe:	2095      	movs	r0, #149	; 0x95
 8001b00:	f7ff fda8 	bl	8001654 <lcd_send_cmd>
			lcd_send_string(" ");
 8001b04:	4826      	ldr	r0, [pc, #152]	; (8001ba0 <Print_arrow+0xf8>)
 8001b06:	f7ff fe59 	bl	80017bc <lcd_send_string>
			lcd_send_cmd(0x80|0x55);
 8001b0a:	20d5      	movs	r0, #213	; 0xd5
 8001b0c:	f7ff fda2 	bl	8001654 <lcd_send_cmd>
			lcd_send_data(0);
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff fdcf 	bl	80016b4 <lcd_send_data>
			lcd_send_cmd(0x80|0x1F);
 8001b16:	209f      	movs	r0, #159	; 0x9f
 8001b18:	f7ff fd9c 	bl	8001654 <lcd_send_cmd>
			lcd_send_string(" ");
 8001b1c:	4820      	ldr	r0, [pc, #128]	; (8001ba0 <Print_arrow+0xf8>)
 8001b1e:	f7ff fe4d 	bl	80017bc <lcd_send_string>
			lcd_send_cmd(0x80|0x5F);
 8001b22:	20df      	movs	r0, #223	; 0xdf
 8001b24:	f7ff fd96 	bl	8001654 <lcd_send_cmd>
			lcd_send_string(" ");
 8001b28:	481d      	ldr	r0, [pc, #116]	; (8001ba0 <Print_arrow+0xf8>)
 8001b2a:	f7ff fe47 	bl	80017bc <lcd_send_string>
			break;
 8001b2e:	e032      	b.n	8001b96 <Print_arrow+0xee>
		case 2:
			lcd_send_cmd(0x80|0x15);
 8001b30:	2095      	movs	r0, #149	; 0x95
 8001b32:	f7ff fd8f 	bl	8001654 <lcd_send_cmd>
			lcd_send_string(" ");
 8001b36:	481a      	ldr	r0, [pc, #104]	; (8001ba0 <Print_arrow+0xf8>)
 8001b38:	f7ff fe40 	bl	80017bc <lcd_send_string>
			lcd_send_cmd(0x80|0x55);
 8001b3c:	20d5      	movs	r0, #213	; 0xd5
 8001b3e:	f7ff fd89 	bl	8001654 <lcd_send_cmd>
			lcd_send_string(" ");
 8001b42:	4817      	ldr	r0, [pc, #92]	; (8001ba0 <Print_arrow+0xf8>)
 8001b44:	f7ff fe3a 	bl	80017bc <lcd_send_string>
			lcd_send_cmd(0x80|0x1F);
 8001b48:	209f      	movs	r0, #159	; 0x9f
 8001b4a:	f7ff fd83 	bl	8001654 <lcd_send_cmd>
			lcd_send_data(0);
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f7ff fdb0 	bl	80016b4 <lcd_send_data>
			lcd_send_cmd(0x80|0x5F);
 8001b54:	20df      	movs	r0, #223	; 0xdf
 8001b56:	f7ff fd7d 	bl	8001654 <lcd_send_cmd>
			lcd_send_string(" ");
 8001b5a:	4811      	ldr	r0, [pc, #68]	; (8001ba0 <Print_arrow+0xf8>)
 8001b5c:	f7ff fe2e 	bl	80017bc <lcd_send_string>
			break;
 8001b60:	e019      	b.n	8001b96 <Print_arrow+0xee>
		case 3:
			lcd_send_cmd(0x80|0x15);
 8001b62:	2095      	movs	r0, #149	; 0x95
 8001b64:	f7ff fd76 	bl	8001654 <lcd_send_cmd>
			lcd_send_string(" ");
 8001b68:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <Print_arrow+0xf8>)
 8001b6a:	f7ff fe27 	bl	80017bc <lcd_send_string>
			lcd_send_cmd(0x80|0x55);
 8001b6e:	20d5      	movs	r0, #213	; 0xd5
 8001b70:	f7ff fd70 	bl	8001654 <lcd_send_cmd>
			lcd_send_string(" ");
 8001b74:	480a      	ldr	r0, [pc, #40]	; (8001ba0 <Print_arrow+0xf8>)
 8001b76:	f7ff fe21 	bl	80017bc <lcd_send_string>
			lcd_send_cmd(0x80|0x1F);
 8001b7a:	209f      	movs	r0, #159	; 0x9f
 8001b7c:	f7ff fd6a 	bl	8001654 <lcd_send_cmd>
			lcd_send_string(" ");
 8001b80:	4807      	ldr	r0, [pc, #28]	; (8001ba0 <Print_arrow+0xf8>)
 8001b82:	f7ff fe1b 	bl	80017bc <lcd_send_string>
			lcd_send_cmd(0x80|0x5F);
 8001b86:	20df      	movs	r0, #223	; 0xdf
 8001b88:	f7ff fd64 	bl	8001654 <lcd_send_cmd>
			lcd_send_data(0);
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f7ff fd91 	bl	80016b4 <lcd_send_data>
			break;
 8001b92:	e000      	b.n	8001b96 <Print_arrow+0xee>
			break;
 8001b94:	bf00      	nop
	}
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	08007bb4 	.word	0x08007bb4

08001ba4 <Setting_menu_1>:

void Setting_menu_1(void){
 8001ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af04      	add	r7, sp, #16
	lcd_send_cmd(0x80|0x03);
 8001bac:	2083      	movs	r0, #131	; 0x83
 8001bae:	f7ff fd51 	bl	8001654 <lcd_send_cmd>
	lcd_send_string("SETTING TIME");
 8001bb2:	4828      	ldr	r0, [pc, #160]	; (8001c54 <Setting_menu_1+0xb0>)
 8001bb4:	f7ff fe02 	bl	80017bc <lcd_send_string>
	Set_time(Change_seconds(), Change_minutes(), Change_hour(), Change_day(), Change_date(), Change_month(), Change_year());
 8001bb8:	f7ff fbb0 	bl	800131c <Change_seconds>
 8001bbc:	4606      	mov	r6, r0
 8001bbe:	f7ff fb69 	bl	8001294 <Change_minutes>
 8001bc2:	4680      	mov	r8, r0
 8001bc4:	f7ff fb22 	bl	800120c <Change_hour>
 8001bc8:	4681      	mov	r9, r0
 8001bca:	f7ff fbeb 	bl	80013a4 <Change_day>
 8001bce:	4682      	mov	sl, r0
 8001bd0:	f7ff fc1e 	bl	8001410 <Change_date>
 8001bd4:	4604      	mov	r4, r0
 8001bd6:	f7ff fc5f 	bl	8001498 <Change_month>
 8001bda:	4605      	mov	r5, r0
 8001bdc:	f7ff fca0 	bl	8001520 <Change_year>
 8001be0:	4603      	mov	r3, r0
 8001be2:	9302      	str	r3, [sp, #8]
 8001be4:	9501      	str	r5, [sp, #4]
 8001be6:	9400      	str	r4, [sp, #0]
 8001be8:	4653      	mov	r3, sl
 8001bea:	464a      	mov	r2, r9
 8001bec:	4641      	mov	r1, r8
 8001bee:	4630      	mov	r0, r6
 8001bf0:	f7ff fa0a 	bl	8001008 <Set_time>
	Get_time();
 8001bf4:	f7ff fa46 	bl	8001084 <Get_time>
	sprintf (buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <Setting_menu_1+0xb4>)
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <Setting_menu_1+0xb4>)
 8001bfe:	6859      	ldr	r1, [r3, #4]
 8001c00:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <Setting_menu_1+0xb4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	460b      	mov	r3, r1
 8001c08:	4914      	ldr	r1, [pc, #80]	; (8001c5c <Setting_menu_1+0xb8>)
 8001c0a:	4815      	ldr	r0, [pc, #84]	; (8001c60 <Setting_menu_1+0xbc>)
 8001c0c:	f003 fd3e 	bl	800568c <siprintf>
	lcd_send_cmd(0x80|0x45);
 8001c10:	20c5      	movs	r0, #197	; 0xc5
 8001c12:	f7ff fd1f 	bl	8001654 <lcd_send_cmd>
	lcd_send_string(buffer);
 8001c16:	4812      	ldr	r0, [pc, #72]	; (8001c60 <Setting_menu_1+0xbc>)
 8001c18:	f7ff fdd0 	bl	80017bc <lcd_send_string>
	lcd_send_cmd(0x80|0x16);
 8001c1c:	2096      	movs	r0, #150	; 0x96
 8001c1e:	f7ff fd19 	bl	8001654 <lcd_send_cmd>
	lcd_send_string("HOUR");
 8001c22:	4810      	ldr	r0, [pc, #64]	; (8001c64 <Setting_menu_1+0xc0>)
 8001c24:	f7ff fdca 	bl	80017bc <lcd_send_string>
	lcd_send_cmd(0x80|0x56);
 8001c28:	20d6      	movs	r0, #214	; 0xd6
 8001c2a:	f7ff fd13 	bl	8001654 <lcd_send_cmd>
	lcd_send_string("MINUTES");
 8001c2e:	480e      	ldr	r0, [pc, #56]	; (8001c68 <Setting_menu_1+0xc4>)
 8001c30:	f7ff fdc4 	bl	80017bc <lcd_send_string>
	lcd_send_cmd(0x80|0x20);
 8001c34:	20a0      	movs	r0, #160	; 0xa0
 8001c36:	f7ff fd0d 	bl	8001654 <lcd_send_cmd>
	lcd_send_string("SECONDS");
 8001c3a:	480c      	ldr	r0, [pc, #48]	; (8001c6c <Setting_menu_1+0xc8>)
 8001c3c:	f7ff fdbe 	bl	80017bc <lcd_send_string>
	lcd_send_cmd(0x80|0x60);
 8001c40:	20e0      	movs	r0, #224	; 0xe0
 8001c42:	f7ff fd07 	bl	8001654 <lcd_send_cmd>
	lcd_send_string("CONFIRM");
 8001c46:	480a      	ldr	r0, [pc, #40]	; (8001c70 <Setting_menu_1+0xcc>)
 8001c48:	f7ff fdb8 	bl	80017bc <lcd_send_string>
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c54:	08007bb8 	.word	0x08007bb8
 8001c58:	20000224 	.word	0x20000224
 8001c5c:	08007bc8 	.word	0x08007bc8
 8001c60:	20000240 	.word	0x20000240
 8001c64:	08007bd8 	.word	0x08007bd8
 8001c68:	08007be0 	.word	0x08007be0
 8001c6c:	08007be8 	.word	0x08007be8
 8001c70:	08007bf0 	.word	0x08007bf0

08001c74 <Setting_menu_2>:
void Setting_menu_2(void){
 8001c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c78:	b084      	sub	sp, #16
 8001c7a:	af04      	add	r7, sp, #16
	lcd_send_cmd(0x80|0x03);
 8001c7c:	2083      	movs	r0, #131	; 0x83
 8001c7e:	f7ff fce9 	bl	8001654 <lcd_send_cmd>
	lcd_send_string("SETTING DATE");
 8001c82:	4828      	ldr	r0, [pc, #160]	; (8001d24 <Setting_menu_2+0xb0>)
 8001c84:	f7ff fd9a 	bl	80017bc <lcd_send_string>
	Set_time(Change_seconds(), Change_minutes(), Change_hour(), Change_day(), Change_date(), Change_month(), Change_year());
 8001c88:	f7ff fb48 	bl	800131c <Change_seconds>
 8001c8c:	4606      	mov	r6, r0
 8001c8e:	f7ff fb01 	bl	8001294 <Change_minutes>
 8001c92:	4680      	mov	r8, r0
 8001c94:	f7ff faba 	bl	800120c <Change_hour>
 8001c98:	4681      	mov	r9, r0
 8001c9a:	f7ff fb83 	bl	80013a4 <Change_day>
 8001c9e:	4682      	mov	sl, r0
 8001ca0:	f7ff fbb6 	bl	8001410 <Change_date>
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	f7ff fbf7 	bl	8001498 <Change_month>
 8001caa:	4605      	mov	r5, r0
 8001cac:	f7ff fc38 	bl	8001520 <Change_year>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	9302      	str	r3, [sp, #8]
 8001cb4:	9501      	str	r5, [sp, #4]
 8001cb6:	9400      	str	r4, [sp, #0]
 8001cb8:	4653      	mov	r3, sl
 8001cba:	464a      	mov	r2, r9
 8001cbc:	4641      	mov	r1, r8
 8001cbe:	4630      	mov	r0, r6
 8001cc0:	f7ff f9a2 	bl	8001008 <Set_time>
	Get_time();
 8001cc4:	f7ff f9de 	bl	8001084 <Get_time>
	sprintf (buffer, "%02d-%02d-20%02d", time.date, time.month, time.year);
 8001cc8:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <Setting_menu_2+0xb4>)
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <Setting_menu_2+0xb4>)
 8001cce:	6959      	ldr	r1, [r3, #20]
 8001cd0:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <Setting_menu_2+0xb4>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4914      	ldr	r1, [pc, #80]	; (8001d2c <Setting_menu_2+0xb8>)
 8001cda:	4815      	ldr	r0, [pc, #84]	; (8001d30 <Setting_menu_2+0xbc>)
 8001cdc:	f003 fcd6 	bl	800568c <siprintf>
	lcd_send_cmd(0x80|0x44);
 8001ce0:	20c4      	movs	r0, #196	; 0xc4
 8001ce2:	f7ff fcb7 	bl	8001654 <lcd_send_cmd>
	lcd_send_string(buffer);
 8001ce6:	4812      	ldr	r0, [pc, #72]	; (8001d30 <Setting_menu_2+0xbc>)
 8001ce8:	f7ff fd68 	bl	80017bc <lcd_send_string>
	lcd_send_cmd(0x80|0x16);
 8001cec:	2096      	movs	r0, #150	; 0x96
 8001cee:	f7ff fcb1 	bl	8001654 <lcd_send_cmd>
	lcd_send_string("DATE");
 8001cf2:	4810      	ldr	r0, [pc, #64]	; (8001d34 <Setting_menu_2+0xc0>)
 8001cf4:	f7ff fd62 	bl	80017bc <lcd_send_string>
	lcd_send_cmd(0x80|0x56);
 8001cf8:	20d6      	movs	r0, #214	; 0xd6
 8001cfa:	f7ff fcab 	bl	8001654 <lcd_send_cmd>
	lcd_send_string("MONTH");
 8001cfe:	480e      	ldr	r0, [pc, #56]	; (8001d38 <Setting_menu_2+0xc4>)
 8001d00:	f7ff fd5c 	bl	80017bc <lcd_send_string>
	lcd_send_cmd(0x80|0x20);
 8001d04:	20a0      	movs	r0, #160	; 0xa0
 8001d06:	f7ff fca5 	bl	8001654 <lcd_send_cmd>
	lcd_send_string("YEAR");
 8001d0a:	480c      	ldr	r0, [pc, #48]	; (8001d3c <Setting_menu_2+0xc8>)
 8001d0c:	f7ff fd56 	bl	80017bc <lcd_send_string>
	lcd_send_cmd(0x80|0x60);
 8001d10:	20e0      	movs	r0, #224	; 0xe0
 8001d12:	f7ff fc9f 	bl	8001654 <lcd_send_cmd>
	lcd_send_string("CONFIRM");
 8001d16:	480a      	ldr	r0, [pc, #40]	; (8001d40 <Setting_menu_2+0xcc>)
 8001d18:	f7ff fd50 	bl	80017bc <lcd_send_string>
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d24:	08007bf8 	.word	0x08007bf8
 8001d28:	20000224 	.word	0x20000224
 8001d2c:	08007c08 	.word	0x08007c08
 8001d30:	20000240 	.word	0x20000240
 8001d34:	08007c1c 	.word	0x08007c1c
 8001d38:	08007c24 	.word	0x08007c24
 8001d3c:	08007c2c 	.word	0x08007c2c
 8001d40:	08007bf0 	.word	0x08007bf0

08001d44 <Main_menu>:

void Main_menu(void){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af02      	add	r7, sp, #8
	  lcd_send_cmd(0x80|0x01);
 8001d4a:	2081      	movs	r0, #129	; 0x81
 8001d4c:	f7ff fc82 	bl	8001654 <lcd_send_cmd>
	  lcd_send_string("WELCOME TO COSIO");
 8001d50:	481e      	ldr	r0, [pc, #120]	; (8001dcc <Main_menu+0x88>)
 8001d52:	f7ff fd33 	bl	80017bc <lcd_send_string>
	  lcd_send_cmd(0x80|0x43);
 8001d56:	20c3      	movs	r0, #195	; 0xc3
 8001d58:	f7ff fc7c 	bl	8001654 <lcd_send_cmd>
	  lcd_send_string("PLEASE WAIT");
 8001d5c:	481c      	ldr	r0, [pc, #112]	; (8001dd0 <Main_menu+0x8c>)
 8001d5e:	f7ff fd2d 	bl	80017bc <lcd_send_string>
	  lcd_send_cmd(0x80|0x17);
 8001d62:	2097      	movs	r0, #151	; 0x97
 8001d64:	f7ff fc76 	bl	8001654 <lcd_send_cmd>
	  lcd_send_string("FOR SETTING");
 8001d68:	481a      	ldr	r0, [pc, #104]	; (8001dd4 <Main_menu+0x90>)
 8001d6a:	f7ff fd27 	bl	80017bc <lcd_send_string>
	  HAL_Delay(3000);
 8001d6e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001d72:	f000 fcdd 	bl	8002730 <HAL_Delay>
	  lcd_clear();
 8001d76:	f7ff fccd 	bl	8001714 <lcd_clear>
	  while(1){
	  Get_time();
 8001d7a:	f7ff f983 	bl	8001084 <Get_time>
	  sprintf (buffer, "TIME: %02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <Main_menu+0x94>)
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <Main_menu+0x94>)
 8001d84:	6859      	ldr	r1, [r3, #4]
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <Main_menu+0x94>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4913      	ldr	r1, [pc, #76]	; (8001ddc <Main_menu+0x98>)
 8001d90:	4813      	ldr	r0, [pc, #76]	; (8001de0 <Main_menu+0x9c>)
 8001d92:	f003 fc7b 	bl	800568c <siprintf>
	  lcd_send_cmd(0x80|0x00);
 8001d96:	2080      	movs	r0, #128	; 0x80
 8001d98:	f7ff fc5c 	bl	8001654 <lcd_send_cmd>
	  lcd_send_string(buffer);
 8001d9c:	4810      	ldr	r0, [pc, #64]	; (8001de0 <Main_menu+0x9c>)
 8001d9e:	f7ff fd0d 	bl	80017bc <lcd_send_string>
	  sprintf (buffer, "DATE: %02d-%02d-20%02d", time.date, time.month, time.year);
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <Main_menu+0x94>)
 8001da4:	691a      	ldr	r2, [r3, #16]
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <Main_menu+0x94>)
 8001da8:	6959      	ldr	r1, [r3, #20]
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <Main_menu+0x94>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	460b      	mov	r3, r1
 8001db2:	490c      	ldr	r1, [pc, #48]	; (8001de4 <Main_menu+0xa0>)
 8001db4:	480a      	ldr	r0, [pc, #40]	; (8001de0 <Main_menu+0x9c>)
 8001db6:	f003 fc69 	bl	800568c <siprintf>
	  lcd_send_cmd(0x80|0x40);
 8001dba:	20c0      	movs	r0, #192	; 0xc0
 8001dbc:	f7ff fc4a 	bl	8001654 <lcd_send_cmd>
	  lcd_send_string(buffer);
 8001dc0:	4807      	ldr	r0, [pc, #28]	; (8001de0 <Main_menu+0x9c>)
 8001dc2:	f7ff fcfb 	bl	80017bc <lcd_send_string>
	  Get_data_DHT11();
 8001dc6:	f7ff f87d 	bl	8000ec4 <Get_data_DHT11>
	  Get_time();
 8001dca:	e7d6      	b.n	8001d7a <Main_menu+0x36>
 8001dcc:	08007c34 	.word	0x08007c34
 8001dd0:	08007c48 	.word	0x08007c48
 8001dd4:	08007c54 	.word	0x08007c54
 8001dd8:	20000224 	.word	0x20000224
 8001ddc:	08007c60 	.word	0x08007c60
 8001de0:	20000240 	.word	0x20000240
 8001de4:	08007c78 	.word	0x08007c78

08001de8 <Change_hour_button>:
	  }
}

void Change_hour_button(void){
 8001de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dec:	b084      	sub	sp, #16
 8001dee:	af04      	add	r7, sp, #16
    Change_hour();
 8001df0:	f7ff fa0c 	bl	800120c <Change_hour>
    Set_time(Change_seconds(), Change_minutes(), Change_hour(), Change_day(), Change_date(), Change_month(), Change_year());
 8001df4:	f7ff fa92 	bl	800131c <Change_seconds>
 8001df8:	4606      	mov	r6, r0
 8001dfa:	f7ff fa4b 	bl	8001294 <Change_minutes>
 8001dfe:	4680      	mov	r8, r0
 8001e00:	f7ff fa04 	bl	800120c <Change_hour>
 8001e04:	4681      	mov	r9, r0
 8001e06:	f7ff facd 	bl	80013a4 <Change_day>
 8001e0a:	4682      	mov	sl, r0
 8001e0c:	f7ff fb00 	bl	8001410 <Change_date>
 8001e10:	4604      	mov	r4, r0
 8001e12:	f7ff fb41 	bl	8001498 <Change_month>
 8001e16:	4605      	mov	r5, r0
 8001e18:	f7ff fb82 	bl	8001520 <Change_year>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	9302      	str	r3, [sp, #8]
 8001e20:	9501      	str	r5, [sp, #4]
 8001e22:	9400      	str	r4, [sp, #0]
 8001e24:	4653      	mov	r3, sl
 8001e26:	464a      	mov	r2, r9
 8001e28:	4641      	mov	r1, r8
 8001e2a:	4630      	mov	r0, r6
 8001e2c:	f7ff f8ec 	bl	8001008 <Set_time>
    Get_time();
 8001e30:	f7ff f928 	bl	8001084 <Get_time>
    sprintf (buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <Change_hour_button+0x78>)
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <Change_hour_button+0x78>)
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <Change_hour_button+0x78>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	460b      	mov	r3, r1
 8001e44:	4907      	ldr	r1, [pc, #28]	; (8001e64 <Change_hour_button+0x7c>)
 8001e46:	4808      	ldr	r0, [pc, #32]	; (8001e68 <Change_hour_button+0x80>)
 8001e48:	f003 fc20 	bl	800568c <siprintf>
    lcd_send_cmd(0x80|0x45);
 8001e4c:	20c5      	movs	r0, #197	; 0xc5
 8001e4e:	f7ff fc01 	bl	8001654 <lcd_send_cmd>
    lcd_send_string(buffer);
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <Change_hour_button+0x80>)
 8001e54:	f7ff fcb2 	bl	80017bc <lcd_send_string>
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e60:	20000224 	.word	0x20000224
 8001e64:	08007bc8 	.word	0x08007bc8
 8001e68:	20000240 	.word	0x20000240

08001e6c <Change_minutes_button>:

void Change_minutes_button(void){
 8001e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af04      	add	r7, sp, #16
	Change_minutes();
 8001e74:	f7ff fa0e 	bl	8001294 <Change_minutes>
	Set_time(Change_seconds(), Change_minutes(), Change_hour(), Change_day(), Change_date(), Change_month(), Change_year());
 8001e78:	f7ff fa50 	bl	800131c <Change_seconds>
 8001e7c:	4606      	mov	r6, r0
 8001e7e:	f7ff fa09 	bl	8001294 <Change_minutes>
 8001e82:	4680      	mov	r8, r0
 8001e84:	f7ff f9c2 	bl	800120c <Change_hour>
 8001e88:	4681      	mov	r9, r0
 8001e8a:	f7ff fa8b 	bl	80013a4 <Change_day>
 8001e8e:	4682      	mov	sl, r0
 8001e90:	f7ff fabe 	bl	8001410 <Change_date>
 8001e94:	4604      	mov	r4, r0
 8001e96:	f7ff faff 	bl	8001498 <Change_month>
 8001e9a:	4605      	mov	r5, r0
 8001e9c:	f7ff fb40 	bl	8001520 <Change_year>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	9302      	str	r3, [sp, #8]
 8001ea4:	9501      	str	r5, [sp, #4]
 8001ea6:	9400      	str	r4, [sp, #0]
 8001ea8:	4653      	mov	r3, sl
 8001eaa:	464a      	mov	r2, r9
 8001eac:	4641      	mov	r1, r8
 8001eae:	4630      	mov	r0, r6
 8001eb0:	f7ff f8aa 	bl	8001008 <Set_time>
	Get_time();
 8001eb4:	f7ff f8e6 	bl	8001084 <Get_time>
	sprintf (buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <Change_minutes_button+0x78>)
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <Change_minutes_button+0x78>)
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <Change_minutes_button+0x78>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4907      	ldr	r1, [pc, #28]	; (8001ee8 <Change_minutes_button+0x7c>)
 8001eca:	4808      	ldr	r0, [pc, #32]	; (8001eec <Change_minutes_button+0x80>)
 8001ecc:	f003 fbde 	bl	800568c <siprintf>
	lcd_send_cmd(0x80|0x45);
 8001ed0:	20c5      	movs	r0, #197	; 0xc5
 8001ed2:	f7ff fbbf 	bl	8001654 <lcd_send_cmd>
	lcd_send_string(buffer);
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <Change_minutes_button+0x80>)
 8001ed8:	f7ff fc70 	bl	80017bc <lcd_send_string>
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ee4:	20000224 	.word	0x20000224
 8001ee8:	08007bc8 	.word	0x08007bc8
 8001eec:	20000240 	.word	0x20000240

08001ef0 <Change_seconds_button>:

void Change_seconds_button(void){
 8001ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af04      	add	r7, sp, #16
	Change_seconds();
 8001ef8:	f7ff fa10 	bl	800131c <Change_seconds>
	Set_time(Change_seconds(), Change_minutes(), Change_hour(), Change_day(), Change_date(), Change_month(), Change_year());
 8001efc:	f7ff fa0e 	bl	800131c <Change_seconds>
 8001f00:	4606      	mov	r6, r0
 8001f02:	f7ff f9c7 	bl	8001294 <Change_minutes>
 8001f06:	4680      	mov	r8, r0
 8001f08:	f7ff f980 	bl	800120c <Change_hour>
 8001f0c:	4681      	mov	r9, r0
 8001f0e:	f7ff fa49 	bl	80013a4 <Change_day>
 8001f12:	4682      	mov	sl, r0
 8001f14:	f7ff fa7c 	bl	8001410 <Change_date>
 8001f18:	4604      	mov	r4, r0
 8001f1a:	f7ff fabd 	bl	8001498 <Change_month>
 8001f1e:	4605      	mov	r5, r0
 8001f20:	f7ff fafe 	bl	8001520 <Change_year>
 8001f24:	4603      	mov	r3, r0
 8001f26:	9302      	str	r3, [sp, #8]
 8001f28:	9501      	str	r5, [sp, #4]
 8001f2a:	9400      	str	r4, [sp, #0]
 8001f2c:	4653      	mov	r3, sl
 8001f2e:	464a      	mov	r2, r9
 8001f30:	4641      	mov	r1, r8
 8001f32:	4630      	mov	r0, r6
 8001f34:	f7ff f868 	bl	8001008 <Set_time>
	Get_time();
 8001f38:	f7ff f8a4 	bl	8001084 <Get_time>
	sprintf (buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <Change_seconds_button+0x78>)
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <Change_seconds_button+0x78>)
 8001f42:	6859      	ldr	r1, [r3, #4]
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <Change_seconds_button+0x78>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <Change_seconds_button+0x7c>)
 8001f4e:	4808      	ldr	r0, [pc, #32]	; (8001f70 <Change_seconds_button+0x80>)
 8001f50:	f003 fb9c 	bl	800568c <siprintf>
	lcd_send_cmd(0x80|0x45);
 8001f54:	20c5      	movs	r0, #197	; 0xc5
 8001f56:	f7ff fb7d 	bl	8001654 <lcd_send_cmd>
	lcd_send_string(buffer);
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <Change_seconds_button+0x80>)
 8001f5c:	f7ff fc2e 	bl	80017bc <lcd_send_string>
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f68:	20000224 	.word	0x20000224
 8001f6c:	08007bc8 	.word	0x08007bc8
 8001f70:	20000240 	.word	0x20000240

08001f74 <Change_date_button>:

void Change_date_button(void){
 8001f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f78:	b084      	sub	sp, #16
 8001f7a:	af04      	add	r7, sp, #16
	Change_date();
 8001f7c:	f7ff fa48 	bl	8001410 <Change_date>
	Set_time(Change_seconds(), Change_minutes(), Change_hour(), Change_day(), Change_date(), Change_month(), Change_year());
 8001f80:	f7ff f9cc 	bl	800131c <Change_seconds>
 8001f84:	4606      	mov	r6, r0
 8001f86:	f7ff f985 	bl	8001294 <Change_minutes>
 8001f8a:	4680      	mov	r8, r0
 8001f8c:	f7ff f93e 	bl	800120c <Change_hour>
 8001f90:	4681      	mov	r9, r0
 8001f92:	f7ff fa07 	bl	80013a4 <Change_day>
 8001f96:	4682      	mov	sl, r0
 8001f98:	f7ff fa3a 	bl	8001410 <Change_date>
 8001f9c:	4604      	mov	r4, r0
 8001f9e:	f7ff fa7b 	bl	8001498 <Change_month>
 8001fa2:	4605      	mov	r5, r0
 8001fa4:	f7ff fabc 	bl	8001520 <Change_year>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	9302      	str	r3, [sp, #8]
 8001fac:	9501      	str	r5, [sp, #4]
 8001fae:	9400      	str	r4, [sp, #0]
 8001fb0:	4653      	mov	r3, sl
 8001fb2:	464a      	mov	r2, r9
 8001fb4:	4641      	mov	r1, r8
 8001fb6:	4630      	mov	r0, r6
 8001fb8:	f7ff f826 	bl	8001008 <Set_time>
	Get_time();
 8001fbc:	f7ff f862 	bl	8001084 <Get_time>
	sprintf (buffer, "%02d-%02d-20%02d", time.date, time.month, time.year);
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <Change_date_button+0x78>)
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <Change_date_button+0x78>)
 8001fc6:	6959      	ldr	r1, [r3, #20]
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <Change_date_button+0x78>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4907      	ldr	r1, [pc, #28]	; (8001ff0 <Change_date_button+0x7c>)
 8001fd2:	4808      	ldr	r0, [pc, #32]	; (8001ff4 <Change_date_button+0x80>)
 8001fd4:	f003 fb5a 	bl	800568c <siprintf>
	lcd_send_cmd(0x80|0x45);
 8001fd8:	20c5      	movs	r0, #197	; 0xc5
 8001fda:	f7ff fb3b 	bl	8001654 <lcd_send_cmd>
	lcd_send_string(buffer);
 8001fde:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <Change_date_button+0x80>)
 8001fe0:	f7ff fbec 	bl	80017bc <lcd_send_string>
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fec:	20000224 	.word	0x20000224
 8001ff0:	08007c08 	.word	0x08007c08
 8001ff4:	20000240 	.word	0x20000240

08001ff8 <Change_year_button>:
	sprintf (buffer, "%02d-%02d-20%02d", time.date, time.month, time.year);
	lcd_send_cmd(0x80|0x45);
	lcd_send_string(buffer);
}

void Change_year_button(void){
 8001ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af04      	add	r7, sp, #16
	Change_year();
 8002000:	f7ff fa8e 	bl	8001520 <Change_year>
	Set_time(Change_seconds(), Change_minutes(), Change_hour(), Change_day(), Change_date(), Change_month(), Change_year());
 8002004:	f7ff f98a 	bl	800131c <Change_seconds>
 8002008:	4606      	mov	r6, r0
 800200a:	f7ff f943 	bl	8001294 <Change_minutes>
 800200e:	4680      	mov	r8, r0
 8002010:	f7ff f8fc 	bl	800120c <Change_hour>
 8002014:	4681      	mov	r9, r0
 8002016:	f7ff f9c5 	bl	80013a4 <Change_day>
 800201a:	4682      	mov	sl, r0
 800201c:	f7ff f9f8 	bl	8001410 <Change_date>
 8002020:	4604      	mov	r4, r0
 8002022:	f7ff fa39 	bl	8001498 <Change_month>
 8002026:	4605      	mov	r5, r0
 8002028:	f7ff fa7a 	bl	8001520 <Change_year>
 800202c:	4603      	mov	r3, r0
 800202e:	9302      	str	r3, [sp, #8]
 8002030:	9501      	str	r5, [sp, #4]
 8002032:	9400      	str	r4, [sp, #0]
 8002034:	4653      	mov	r3, sl
 8002036:	464a      	mov	r2, r9
 8002038:	4641      	mov	r1, r8
 800203a:	4630      	mov	r0, r6
 800203c:	f7fe ffe4 	bl	8001008 <Set_time>
	Get_time();
 8002040:	f7ff f820 	bl	8001084 <Get_time>
	sprintf (buffer, "%02d-%02d-20%02d", time.date, time.month, time.year);
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <Change_year_button+0x78>)
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	4b09      	ldr	r3, [pc, #36]	; (8002070 <Change_year_button+0x78>)
 800204a:	6959      	ldr	r1, [r3, #20]
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <Change_year_button+0x78>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	460b      	mov	r3, r1
 8002054:	4907      	ldr	r1, [pc, #28]	; (8002074 <Change_year_button+0x7c>)
 8002056:	4808      	ldr	r0, [pc, #32]	; (8002078 <Change_year_button+0x80>)
 8002058:	f003 fb18 	bl	800568c <siprintf>
	lcd_send_cmd(0x80|0x45);
 800205c:	20c5      	movs	r0, #197	; 0xc5
 800205e:	f7ff faf9 	bl	8001654 <lcd_send_cmd>
	lcd_send_string(buffer);
 8002062:	4805      	ldr	r0, [pc, #20]	; (8002078 <Change_year_button+0x80>)
 8002064:	f7ff fbaa 	bl	80017bc <lcd_send_string>
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002070:	20000224 	.word	0x20000224
 8002074:	08007c08 	.word	0x08007c08
 8002078:	20000240 	.word	0x20000240

0800207c <Setup_menu>:

void Setup_menu(void){
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	switch(Encoder_Handle()){
 8002080:	f7ff f876 	bl	8001170 <Encoder_Handle>
 8002084:	4603      	mov	r3, r0
 8002086:	2b03      	cmp	r3, #3
 8002088:	f200 8149 	bhi.w	800231e <Setup_menu+0x2a2>
 800208c:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <Setup_menu+0x18>)
 800208e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002092:	bf00      	nop
 8002094:	080020a5 	.word	0x080020a5
 8002098:	080020fb 	.word	0x080020fb
 800209c:	08002151 	.word	0x08002151
 80020a0:	080021a7 	.word	0x080021a7
		default:
			break;
		case 0:
			Print_arrow(Encoder_Handle());
 80020a4:	f7ff f864 	bl	8001170 <Encoder_Handle>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fcfc 	bl	8001aa8 <Print_arrow>
				if(Button_Handle() == 0){
 80020b0:	f7ff fa7a 	bl	80015a8 <Button_Handle>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d11c      	bne.n	80020f4 <Setup_menu+0x78>
					lcd_clear();
 80020ba:	f7ff fb2b 	bl	8001714 <lcd_clear>
					lcd_send_cmd(0x80|0x17);
 80020be:	2097      	movs	r0, #151	; 0x97
 80020c0:	f7ff fac8 	bl	8001654 <lcd_send_cmd>
					lcd_send_string("PRESS BUTTON");
 80020c4:	4897      	ldr	r0, [pc, #604]	; (8002324 <Setup_menu+0x2a8>)
 80020c6:	f7ff fb79 	bl	80017bc <lcd_send_string>
						while(1){
						  while(Button_Handle() == 0);
 80020ca:	bf00      	nop
 80020cc:	f7ff fa6c 	bl	80015a8 <Button_Handle>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0fa      	beq.n	80020cc <Setup_menu+0x50>
						  Change_hour_button();
 80020d6:	f7ff fe87 	bl	8001de8 <Change_hour_button>
						  if(Button_Handle() == 0){
 80020da:	f7ff fa65 	bl	80015a8 <Button_Handle>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f2      	bne.n	80020ca <Setup_menu+0x4e>
								  while(Button_Handle() == 0);
 80020e4:	bf00      	nop
 80020e6:	f7ff fa5f 	bl	80015a8 <Button_Handle>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0fa      	beq.n	80020e6 <Setup_menu+0x6a>
								  lcd_clear();
 80020f0:	f7ff fb10 	bl	8001714 <lcd_clear>
								  break;
							  }
					}
				}
				Setting_menu_1();
 80020f4:	f7ff fd56 	bl	8001ba4 <Setting_menu_1>
			break;
 80020f8:	e112      	b.n	8002320 <Setup_menu+0x2a4>
		case 1:
			Print_arrow(Encoder_Handle());
 80020fa:	f7ff f839 	bl	8001170 <Encoder_Handle>
 80020fe:	4603      	mov	r3, r0
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fcd1 	bl	8001aa8 <Print_arrow>
			if(Button_Handle() == 0){
 8002106:	f7ff fa4f 	bl	80015a8 <Button_Handle>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d11c      	bne.n	800214a <Setup_menu+0xce>
				lcd_clear();
 8002110:	f7ff fb00 	bl	8001714 <lcd_clear>
				lcd_send_cmd(0x80|0x17);
 8002114:	2097      	movs	r0, #151	; 0x97
 8002116:	f7ff fa9d 	bl	8001654 <lcd_send_cmd>
				lcd_send_string("PRESS BUTTON");
 800211a:	4882      	ldr	r0, [pc, #520]	; (8002324 <Setup_menu+0x2a8>)
 800211c:	f7ff fb4e 	bl	80017bc <lcd_send_string>
					while(1){
					  while(Button_Handle() == 0);
 8002120:	bf00      	nop
 8002122:	f7ff fa41 	bl	80015a8 <Button_Handle>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0fa      	beq.n	8002122 <Setup_menu+0xa6>
					  Change_minutes_button();
 800212c:	f7ff fe9e 	bl	8001e6c <Change_minutes_button>
					  if(Button_Handle() == 0){
 8002130:	f7ff fa3a 	bl	80015a8 <Button_Handle>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f2      	bne.n	8002120 <Setup_menu+0xa4>
						  while(Button_Handle() == 0);
 800213a:	bf00      	nop
 800213c:	f7ff fa34 	bl	80015a8 <Button_Handle>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0fa      	beq.n	800213c <Setup_menu+0xc0>
						  lcd_clear();
 8002146:	f7ff fae5 	bl	8001714 <lcd_clear>
						  break;
					  }
				}
			}
			Setting_menu_1();
 800214a:	f7ff fd2b 	bl	8001ba4 <Setting_menu_1>
			break;
 800214e:	e0e7      	b.n	8002320 <Setup_menu+0x2a4>
		case 2:
			Print_arrow(Encoder_Handle());
 8002150:	f7ff f80e 	bl	8001170 <Encoder_Handle>
 8002154:	4603      	mov	r3, r0
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fca6 	bl	8001aa8 <Print_arrow>
			if(Button_Handle() == 0){
 800215c:	f7ff fa24 	bl	80015a8 <Button_Handle>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d11c      	bne.n	80021a0 <Setup_menu+0x124>
				lcd_clear();
 8002166:	f7ff fad5 	bl	8001714 <lcd_clear>
				lcd_send_cmd(0x80|0x17);
 800216a:	2097      	movs	r0, #151	; 0x97
 800216c:	f7ff fa72 	bl	8001654 <lcd_send_cmd>
				lcd_send_string("PRESS BUTTON");
 8002170:	486c      	ldr	r0, [pc, #432]	; (8002324 <Setup_menu+0x2a8>)
 8002172:	f7ff fb23 	bl	80017bc <lcd_send_string>
					while(1){
					  while(Button_Handle() == 0);
 8002176:	bf00      	nop
 8002178:	f7ff fa16 	bl	80015a8 <Button_Handle>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0fa      	beq.n	8002178 <Setup_menu+0xfc>
					  Change_seconds_button();
 8002182:	f7ff feb5 	bl	8001ef0 <Change_seconds_button>
					  if(Button_Handle() == 0){
 8002186:	f7ff fa0f 	bl	80015a8 <Button_Handle>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f2      	bne.n	8002176 <Setup_menu+0xfa>
						  while(Button_Handle() == 0);
 8002190:	bf00      	nop
 8002192:	f7ff fa09 	bl	80015a8 <Button_Handle>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0fa      	beq.n	8002192 <Setup_menu+0x116>
						  lcd_clear();
 800219c:	f7ff faba 	bl	8001714 <lcd_clear>
						  break;
					  }
				}
			}
			Setting_menu_1();
 80021a0:	f7ff fd00 	bl	8001ba4 <Setting_menu_1>
			break;
 80021a4:	e0bc      	b.n	8002320 <Setup_menu+0x2a4>
		case 3:
			Print_arrow(Encoder_Handle());
 80021a6:	f7fe ffe3 	bl	8001170 <Encoder_Handle>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fc7b 	bl	8001aa8 <Print_arrow>
			if(Button_Handle() == 0){
 80021b2:	f7ff f9f9 	bl	80015a8 <Button_Handle>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f040 80b1 	bne.w	8002320 <Setup_menu+0x2a4>
				while(Button_Handle() == 0);
 80021be:	bf00      	nop
 80021c0:	f7ff f9f2 	bl	80015a8 <Button_Handle>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0fa      	beq.n	80021c0 <Setup_menu+0x144>
				lcd_clear();
 80021ca:	f7ff faa3 	bl	8001714 <lcd_clear>
				Setting_menu_2();
 80021ce:	f7ff fd51 	bl	8001c74 <Setting_menu_2>
				while(1){
					switch(Encoder_Handle()){
 80021d2:	f7fe ffcd 	bl	8001170 <Encoder_Handle>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b03      	cmp	r3, #3
 80021da:	f200 809c 	bhi.w	8002316 <Setup_menu+0x29a>
 80021de:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <Setup_menu+0x168>)
 80021e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e4:	080021f5 	.word	0x080021f5
 80021e8:	0800224b 	.word	0x0800224b
 80021ec:	08002295 	.word	0x08002295
 80021f0:	080022eb 	.word	0x080022eb
					default:
						break;
					case 0:
						Print_arrow(Encoder_Handle());
 80021f4:	f7fe ffbc 	bl	8001170 <Encoder_Handle>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fc54 	bl	8001aa8 <Print_arrow>
						if(Button_Handle() == 0){
 8002200:	f7ff f9d2 	bl	80015a8 <Button_Handle>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d11c      	bne.n	8002244 <Setup_menu+0x1c8>
							lcd_clear();
 800220a:	f7ff fa83 	bl	8001714 <lcd_clear>
							lcd_send_cmd(0x80|0x17);
 800220e:	2097      	movs	r0, #151	; 0x97
 8002210:	f7ff fa20 	bl	8001654 <lcd_send_cmd>
							lcd_send_string("PRESS BUTTON");
 8002214:	4843      	ldr	r0, [pc, #268]	; (8002324 <Setup_menu+0x2a8>)
 8002216:	f7ff fad1 	bl	80017bc <lcd_send_string>
								while(1){
								  while(Button_Handle() == 0);
 800221a:	bf00      	nop
 800221c:	f7ff f9c4 	bl	80015a8 <Button_Handle>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0fa      	beq.n	800221c <Setup_menu+0x1a0>
								  Change_date_button();
 8002226:	f7ff fea5 	bl	8001f74 <Change_date_button>
								  if(Button_Handle() == 0){
 800222a:	f7ff f9bd 	bl	80015a8 <Button_Handle>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f2      	bne.n	800221a <Setup_menu+0x19e>
									  while(Button_Handle() == 0);
 8002234:	bf00      	nop
 8002236:	f7ff f9b7 	bl	80015a8 <Button_Handle>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0fa      	beq.n	8002236 <Setup_menu+0x1ba>
									  lcd_clear();
 8002240:	f7ff fa68 	bl	8001714 <lcd_clear>
								  }

							}

						}
						Setting_menu_2();
 8002244:	f7ff fd16 	bl	8001c74 <Setting_menu_2>
						break;
 8002248:	e068      	b.n	800231c <Setup_menu+0x2a0>
					case 1:
						Print_arrow(Encoder_Handle());
 800224a:	f7fe ff91 	bl	8001170 <Encoder_Handle>
 800224e:	4603      	mov	r3, r0
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fc29 	bl	8001aa8 <Print_arrow>
						if(Button_Handle() == 0){
 8002256:	f7ff f9a7 	bl	80015a8 <Button_Handle>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d116      	bne.n	800228e <Setup_menu+0x212>
							lcd_clear();
 8002260:	f7ff fa58 	bl	8001714 <lcd_clear>
							lcd_send_cmd(0x80|0x17);
 8002264:	2097      	movs	r0, #151	; 0x97
 8002266:	f7ff f9f5 	bl	8001654 <lcd_send_cmd>
							lcd_send_string("PRESS BUTTON");
 800226a:	482e      	ldr	r0, [pc, #184]	; (8002324 <Setup_menu+0x2a8>)
 800226c:	f7ff faa6 	bl	80017bc <lcd_send_string>
								while(1){
									Change_date_button();
 8002270:	f7ff fe80 	bl	8001f74 <Change_date_button>
								  if(Button_Handle() == 0){
 8002274:	f7ff f998 	bl	80015a8 <Button_Handle>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f8      	bne.n	8002270 <Setup_menu+0x1f4>
									  while(Button_Handle() == 0);
 800227e:	bf00      	nop
 8002280:	f7ff f992 	bl	80015a8 <Button_Handle>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0fa      	beq.n	8002280 <Setup_menu+0x204>
									  lcd_clear();
 800228a:	f7ff fa43 	bl	8001714 <lcd_clear>
									  break;
								  }
							}
						}
						Setting_menu_2();
 800228e:	f7ff fcf1 	bl	8001c74 <Setting_menu_2>
						break;
 8002292:	e043      	b.n	800231c <Setup_menu+0x2a0>
					case 2:
						Print_arrow(Encoder_Handle());
 8002294:	f7fe ff6c 	bl	8001170 <Encoder_Handle>
 8002298:	4603      	mov	r3, r0
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fc04 	bl	8001aa8 <Print_arrow>
						if(Button_Handle() == 0){
 80022a0:	f7ff f982 	bl	80015a8 <Button_Handle>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d11c      	bne.n	80022e4 <Setup_menu+0x268>
							lcd_clear();
 80022aa:	f7ff fa33 	bl	8001714 <lcd_clear>
							lcd_send_cmd(0x80|0x17);
 80022ae:	2097      	movs	r0, #151	; 0x97
 80022b0:	f7ff f9d0 	bl	8001654 <lcd_send_cmd>
							lcd_send_string("PRESS BUTTON");
 80022b4:	481b      	ldr	r0, [pc, #108]	; (8002324 <Setup_menu+0x2a8>)
 80022b6:	f7ff fa81 	bl	80017bc <lcd_send_string>
								while(1){
								  while(Button_Handle() == 0);
 80022ba:	bf00      	nop
 80022bc:	f7ff f974 	bl	80015a8 <Button_Handle>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0fa      	beq.n	80022bc <Setup_menu+0x240>
								  Change_year_button();
 80022c6:	f7ff fe97 	bl	8001ff8 <Change_year_button>
								  if(Button_Handle() == 0){
 80022ca:	f7ff f96d 	bl	80015a8 <Button_Handle>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f2      	bne.n	80022ba <Setup_menu+0x23e>
									  while(Button_Handle() == 0);
 80022d4:	bf00      	nop
 80022d6:	f7ff f967 	bl	80015a8 <Button_Handle>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0fa      	beq.n	80022d6 <Setup_menu+0x25a>
									  lcd_clear();
 80022e0:	f7ff fa18 	bl	8001714 <lcd_clear>
									  break;
								  }
							}
						}
						Setting_menu_2();
 80022e4:	f7ff fcc6 	bl	8001c74 <Setting_menu_2>
						break;
 80022e8:	e018      	b.n	800231c <Setup_menu+0x2a0>
					case 3:
						Print_arrow(Encoder_Handle());
 80022ea:	f7fe ff41 	bl	8001170 <Encoder_Handle>
 80022ee:	4603      	mov	r3, r0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fbd9 	bl	8001aa8 <Print_arrow>
						if(Button_Handle() == 0){
 80022f6:	f7ff f957 	bl	80015a8 <Button_Handle>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10c      	bne.n	800231a <Setup_menu+0x29e>
							lcd_clear();
 8002300:	f7ff fa08 	bl	8001714 <lcd_clear>
								while(1){
								  while(Button_Handle() == 0);
 8002304:	bf00      	nop
 8002306:	f7ff f94f 	bl	80015a8 <Button_Handle>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0fa      	beq.n	8002306 <Setup_menu+0x28a>
								  Main_menu();
 8002310:	f7ff fd18 	bl	8001d44 <Main_menu>
								  while(Button_Handle() == 0);
 8002314:	e7f6      	b.n	8002304 <Setup_menu+0x288>
						break;
 8002316:	bf00      	nop
 8002318:	e75b      	b.n	80021d2 <Setup_menu+0x156>
							}
						}
						break;
 800231a:	bf00      	nop
					switch(Encoder_Handle()){
 800231c:	e759      	b.n	80021d2 <Setup_menu+0x156>
			break;
 800231e:	bf00      	nop
				}
	}
			}
	}
}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	08007c90 	.word	0x08007c90

08002328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <HAL_MspInit+0x5c>)
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	4a14      	ldr	r2, [pc, #80]	; (8002384 <HAL_MspInit+0x5c>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6193      	str	r3, [r2, #24]
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_MspInit+0x5c>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_MspInit+0x5c>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4a0e      	ldr	r2, [pc, #56]	; (8002384 <HAL_MspInit+0x5c>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002350:	61d3      	str	r3, [r2, #28]
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_MspInit+0x5c>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <HAL_MspInit+0x60>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <HAL_MspInit+0x60>)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	40021000 	.word	0x40021000
 8002388:	40010000 	.word	0x40010000

0800238c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0310 	add.w	r3, r7, #16
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a15      	ldr	r2, [pc, #84]	; (80023fc <HAL_I2C_MspInit+0x70>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d123      	bne.n	80023f4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_I2C_MspInit+0x74>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	4a13      	ldr	r2, [pc, #76]	; (8002400 <HAL_I2C_MspInit+0x74>)
 80023b2:	f043 0308 	orr.w	r3, r3, #8
 80023b6:	6193      	str	r3, [r2, #24]
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_I2C_MspInit+0x74>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023c4:	23c0      	movs	r3, #192	; 0xc0
 80023c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023c8:	2312      	movs	r3, #18
 80023ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023cc:	2303      	movs	r3, #3
 80023ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d0:	f107 0310 	add.w	r3, r7, #16
 80023d4:	4619      	mov	r1, r3
 80023d6:	480b      	ldr	r0, [pc, #44]	; (8002404 <HAL_I2C_MspInit+0x78>)
 80023d8:	f000 fab2 	bl	8002940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_I2C_MspInit+0x74>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	4a07      	ldr	r2, [pc, #28]	; (8002400 <HAL_I2C_MspInit+0x74>)
 80023e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023e6:	61d3      	str	r3, [r2, #28]
 80023e8:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_I2C_MspInit+0x74>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023f4:	bf00      	nop
 80023f6:	3720      	adds	r7, #32
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40005400 	.word	0x40005400
 8002400:	40021000 	.word	0x40021000
 8002404:	40010c00 	.word	0x40010c00

08002408 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a09      	ldr	r2, [pc, #36]	; (800243c <HAL_TIM_Base_MspInit+0x34>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d10b      	bne.n	8002432 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_TIM_Base_MspInit+0x38>)
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	4a08      	ldr	r2, [pc, #32]	; (8002440 <HAL_TIM_Base_MspInit+0x38>)
 8002420:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002424:	6193      	str	r3, [r2, #24]
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_TIM_Base_MspInit+0x38>)
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	40012c00 	.word	0x40012c00
 8002440:	40021000 	.word	0x40021000

08002444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <NMI_Handler+0x4>

0800244a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244e:	e7fe      	b.n	800244e <HardFault_Handler+0x4>

08002450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <MemManage_Handler+0x4>

08002456 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <BusFault_Handler+0x4>

0800245c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <UsageFault_Handler+0x4>

08002462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800248a:	f000 f935 	bl	80026f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}

08002492 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  return 1;
 8002496:	2301      	movs	r3, #1
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <_kill>:

int _kill(int pid, int sig)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024aa:	f002 fc5d 	bl	8004d68 <__errno>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2216      	movs	r2, #22
 80024b2:	601a      	str	r2, [r3, #0]
  return -1;
 80024b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <_exit>:

void _exit (int status)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024c8:	f04f 31ff 	mov.w	r1, #4294967295
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ffe7 	bl	80024a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024d2:	e7fe      	b.n	80024d2 <_exit+0x12>

080024d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	e00a      	b.n	80024fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024e6:	f3af 8000 	nop.w
 80024ea:	4601      	mov	r1, r0
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	60ba      	str	r2, [r7, #8]
 80024f2:	b2ca      	uxtb	r2, r1
 80024f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3301      	adds	r3, #1
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	dbf0      	blt.n	80024e6 <_read+0x12>
  }

  return len;
 8002504:	687b      	ldr	r3, [r7, #4]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	e009      	b.n	8002534 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	60ba      	str	r2, [r7, #8]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	3301      	adds	r3, #1
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	429a      	cmp	r2, r3
 800253a:	dbf1      	blt.n	8002520 <_write+0x12>
  }
  return len;
 800253c:	687b      	ldr	r3, [r7, #4]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <_close>:

int _close(int file)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800256c:	605a      	str	r2, [r3, #4]
  return 0;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <_isatty>:

int _isatty(int file)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800258e:	b480      	push	{r7}
 8002590:	b085      	sub	sp, #20
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
	...

080025a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b0:	4a14      	ldr	r2, [pc, #80]	; (8002604 <_sbrk+0x5c>)
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <_sbrk+0x60>)
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025bc:	4b13      	ldr	r3, [pc, #76]	; (800260c <_sbrk+0x64>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d102      	bne.n	80025ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <_sbrk+0x64>)
 80025c6:	4a12      	ldr	r2, [pc, #72]	; (8002610 <_sbrk+0x68>)
 80025c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <_sbrk+0x64>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d207      	bcs.n	80025e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025d8:	f002 fbc6 	bl	8004d68 <__errno>
 80025dc:	4603      	mov	r3, r0
 80025de:	220c      	movs	r2, #12
 80025e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295
 80025e6:	e009      	b.n	80025fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <_sbrk+0x64>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <_sbrk+0x64>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	4a05      	ldr	r2, [pc, #20]	; (800260c <_sbrk+0x64>)
 80025f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025fa:	68fb      	ldr	r3, [r7, #12]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20005000 	.word	0x20005000
 8002608:	00000400 	.word	0x00000400
 800260c:	20000310 	.word	0x20000310
 8002610:	20000328 	.word	0x20000328

08002614 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002620:	480c      	ldr	r0, [pc, #48]	; (8002654 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002622:	490d      	ldr	r1, [pc, #52]	; (8002658 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002624:	4a0d      	ldr	r2, [pc, #52]	; (800265c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002628:	e002      	b.n	8002630 <LoopCopyDataInit>

0800262a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800262a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800262c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800262e:	3304      	adds	r3, #4

08002630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002634:	d3f9      	bcc.n	800262a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002636:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002638:	4c0a      	ldr	r4, [pc, #40]	; (8002664 <LoopFillZerobss+0x22>)
  movs r3, #0
 800263a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800263c:	e001      	b.n	8002642 <LoopFillZerobss>

0800263e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800263e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002640:	3204      	adds	r2, #4

08002642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002644:	d3fb      	bcc.n	800263e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002646:	f7ff ffe5 	bl	8002614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800264a:	f002 fb93 	bl	8004d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800264e:	f7ff f8ca 	bl	80017e6 <main>
  bx lr
 8002652:	4770      	bx	lr
  ldr r0, =_sdata
 8002654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002658:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800265c:	080080ac 	.word	0x080080ac
  ldr r2, =_sbss
 8002660:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002664:	20000328 	.word	0x20000328

08002668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002668:	e7fe      	b.n	8002668 <ADC1_2_IRQHandler>
	...

0800266c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_Init+0x28>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a07      	ldr	r2, [pc, #28]	; (8002694 <HAL_Init+0x28>)
 8002676:	f043 0310 	orr.w	r3, r3, #16
 800267a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800267c:	2003      	movs	r0, #3
 800267e:	f000 f92b 	bl	80028d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002682:	200f      	movs	r0, #15
 8002684:	f000 f808 	bl	8002698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002688:	f7ff fe4e 	bl	8002328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40022000 	.word	0x40022000

08002698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_InitTick+0x54>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_InitTick+0x58>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	4619      	mov	r1, r3
 80026aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80026b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f935 	bl	8002926 <HAL_SYSTICK_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00e      	b.n	80026e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b0f      	cmp	r3, #15
 80026ca:	d80a      	bhi.n	80026e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026cc:	2200      	movs	r2, #0
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f000 f90b 	bl	80028ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d8:	4a06      	ldr	r2, [pc, #24]	; (80026f4 <HAL_InitTick+0x5c>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e000      	b.n	80026e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000014 	.word	0x20000014
 80026f0:	2000001c 	.word	0x2000001c
 80026f4:	20000018 	.word	0x20000018

080026f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_IncTick+0x1c>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_IncTick+0x20>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4413      	add	r3, r2
 8002708:	4a03      	ldr	r2, [pc, #12]	; (8002718 <HAL_IncTick+0x20>)
 800270a:	6013      	str	r3, [r2, #0]
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	2000001c 	.word	0x2000001c
 8002718:	20000314 	.word	0x20000314

0800271c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return uwTick;
 8002720:	4b02      	ldr	r3, [pc, #8]	; (800272c <HAL_GetTick+0x10>)
 8002722:	681b      	ldr	r3, [r3, #0]
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	20000314 	.word	0x20000314

08002730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002738:	f7ff fff0 	bl	800271c <HAL_GetTick>
 800273c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d005      	beq.n	8002756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <HAL_Delay+0x44>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4413      	add	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002756:	bf00      	nop
 8002758:	f7ff ffe0 	bl	800271c <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	429a      	cmp	r2, r3
 8002766:	d8f7      	bhi.n	8002758 <HAL_Delay+0x28>
  {
  }
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	2000001c 	.word	0x2000001c

08002778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <__NVIC_SetPriorityGrouping+0x44>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002794:	4013      	ands	r3, r2
 8002796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027aa:	4a04      	ldr	r2, [pc, #16]	; (80027bc <__NVIC_SetPriorityGrouping+0x44>)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	60d3      	str	r3, [r2, #12]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <__NVIC_GetPriorityGrouping+0x18>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	0a1b      	lsrs	r3, r3, #8
 80027ca:	f003 0307 	and.w	r3, r3, #7
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	6039      	str	r1, [r7, #0]
 80027e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	db0a      	blt.n	8002806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	490c      	ldr	r1, [pc, #48]	; (8002828 <__NVIC_SetPriority+0x4c>)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	0112      	lsls	r2, r2, #4
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	440b      	add	r3, r1
 8002800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002804:	e00a      	b.n	800281c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4908      	ldr	r1, [pc, #32]	; (800282c <__NVIC_SetPriority+0x50>)
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	3b04      	subs	r3, #4
 8002814:	0112      	lsls	r2, r2, #4
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	440b      	add	r3, r1
 800281a:	761a      	strb	r2, [r3, #24]
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000e100 	.word	0xe000e100
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002830:	b480      	push	{r7}
 8002832:	b089      	sub	sp, #36	; 0x24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f1c3 0307 	rsb	r3, r3, #7
 800284a:	2b04      	cmp	r3, #4
 800284c:	bf28      	it	cs
 800284e:	2304      	movcs	r3, #4
 8002850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3304      	adds	r3, #4
 8002856:	2b06      	cmp	r3, #6
 8002858:	d902      	bls.n	8002860 <NVIC_EncodePriority+0x30>
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3b03      	subs	r3, #3
 800285e:	e000      	b.n	8002862 <NVIC_EncodePriority+0x32>
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	f04f 32ff 	mov.w	r2, #4294967295
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43da      	mvns	r2, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	401a      	ands	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002878:	f04f 31ff 	mov.w	r1, #4294967295
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	fa01 f303 	lsl.w	r3, r1, r3
 8002882:	43d9      	mvns	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002888:	4313      	orrs	r3, r2
         );
}
 800288a:	4618      	mov	r0, r3
 800288c:	3724      	adds	r7, #36	; 0x24
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028a4:	d301      	bcc.n	80028aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00f      	b.n	80028ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <SysTick_Config+0x40>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b2:	210f      	movs	r1, #15
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	f7ff ff90 	bl	80027dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <SysTick_Config+0x40>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c2:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <SysTick_Config+0x40>)
 80028c4:	2207      	movs	r2, #7
 80028c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	e000e010 	.word	0xe000e010

080028d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ff49 	bl	8002778 <__NVIC_SetPriorityGrouping>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002900:	f7ff ff5e 	bl	80027c0 <__NVIC_GetPriorityGrouping>
 8002904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f7ff ff90 	bl	8002830 <NVIC_EncodePriority>
 8002910:	4602      	mov	r2, r0
 8002912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff5f 	bl	80027dc <__NVIC_SetPriority>
}
 800291e:	bf00      	nop
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff ffb0 	bl	8002894 <SysTick_Config>
 8002934:	4603      	mov	r3, r0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002940:	b480      	push	{r7}
 8002942:	b08b      	sub	sp, #44	; 0x2c
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800294a:	2300      	movs	r3, #0
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800294e:	2300      	movs	r3, #0
 8002950:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002952:	e169      	b.n	8002c28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002954:	2201      	movs	r2, #1
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	429a      	cmp	r2, r3
 800296e:	f040 8158 	bne.w	8002c22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4a9a      	ldr	r2, [pc, #616]	; (8002be0 <HAL_GPIO_Init+0x2a0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d05e      	beq.n	8002a3a <HAL_GPIO_Init+0xfa>
 800297c:	4a98      	ldr	r2, [pc, #608]	; (8002be0 <HAL_GPIO_Init+0x2a0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d875      	bhi.n	8002a6e <HAL_GPIO_Init+0x12e>
 8002982:	4a98      	ldr	r2, [pc, #608]	; (8002be4 <HAL_GPIO_Init+0x2a4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d058      	beq.n	8002a3a <HAL_GPIO_Init+0xfa>
 8002988:	4a96      	ldr	r2, [pc, #600]	; (8002be4 <HAL_GPIO_Init+0x2a4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d86f      	bhi.n	8002a6e <HAL_GPIO_Init+0x12e>
 800298e:	4a96      	ldr	r2, [pc, #600]	; (8002be8 <HAL_GPIO_Init+0x2a8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d052      	beq.n	8002a3a <HAL_GPIO_Init+0xfa>
 8002994:	4a94      	ldr	r2, [pc, #592]	; (8002be8 <HAL_GPIO_Init+0x2a8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d869      	bhi.n	8002a6e <HAL_GPIO_Init+0x12e>
 800299a:	4a94      	ldr	r2, [pc, #592]	; (8002bec <HAL_GPIO_Init+0x2ac>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d04c      	beq.n	8002a3a <HAL_GPIO_Init+0xfa>
 80029a0:	4a92      	ldr	r2, [pc, #584]	; (8002bec <HAL_GPIO_Init+0x2ac>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d863      	bhi.n	8002a6e <HAL_GPIO_Init+0x12e>
 80029a6:	4a92      	ldr	r2, [pc, #584]	; (8002bf0 <HAL_GPIO_Init+0x2b0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d046      	beq.n	8002a3a <HAL_GPIO_Init+0xfa>
 80029ac:	4a90      	ldr	r2, [pc, #576]	; (8002bf0 <HAL_GPIO_Init+0x2b0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d85d      	bhi.n	8002a6e <HAL_GPIO_Init+0x12e>
 80029b2:	2b12      	cmp	r3, #18
 80029b4:	d82a      	bhi.n	8002a0c <HAL_GPIO_Init+0xcc>
 80029b6:	2b12      	cmp	r3, #18
 80029b8:	d859      	bhi.n	8002a6e <HAL_GPIO_Init+0x12e>
 80029ba:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <HAL_GPIO_Init+0x80>)
 80029bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c0:	08002a3b 	.word	0x08002a3b
 80029c4:	08002a15 	.word	0x08002a15
 80029c8:	08002a27 	.word	0x08002a27
 80029cc:	08002a69 	.word	0x08002a69
 80029d0:	08002a6f 	.word	0x08002a6f
 80029d4:	08002a6f 	.word	0x08002a6f
 80029d8:	08002a6f 	.word	0x08002a6f
 80029dc:	08002a6f 	.word	0x08002a6f
 80029e0:	08002a6f 	.word	0x08002a6f
 80029e4:	08002a6f 	.word	0x08002a6f
 80029e8:	08002a6f 	.word	0x08002a6f
 80029ec:	08002a6f 	.word	0x08002a6f
 80029f0:	08002a6f 	.word	0x08002a6f
 80029f4:	08002a6f 	.word	0x08002a6f
 80029f8:	08002a6f 	.word	0x08002a6f
 80029fc:	08002a6f 	.word	0x08002a6f
 8002a00:	08002a6f 	.word	0x08002a6f
 8002a04:	08002a1d 	.word	0x08002a1d
 8002a08:	08002a31 	.word	0x08002a31
 8002a0c:	4a79      	ldr	r2, [pc, #484]	; (8002bf4 <HAL_GPIO_Init+0x2b4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a12:	e02c      	b.n	8002a6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	623b      	str	r3, [r7, #32]
          break;
 8002a1a:	e029      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	3304      	adds	r3, #4
 8002a22:	623b      	str	r3, [r7, #32]
          break;
 8002a24:	e024      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	623b      	str	r3, [r7, #32]
          break;
 8002a2e:	e01f      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	330c      	adds	r3, #12
 8002a36:	623b      	str	r3, [r7, #32]
          break;
 8002a38:	e01a      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d102      	bne.n	8002a48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a42:	2304      	movs	r3, #4
 8002a44:	623b      	str	r3, [r7, #32]
          break;
 8002a46:	e013      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a50:	2308      	movs	r3, #8
 8002a52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	611a      	str	r2, [r3, #16]
          break;
 8002a5a:	e009      	b.n	8002a70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a5c:	2308      	movs	r3, #8
 8002a5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	615a      	str	r2, [r3, #20]
          break;
 8002a66:	e003      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	623b      	str	r3, [r7, #32]
          break;
 8002a6c:	e000      	b.n	8002a70 <HAL_GPIO_Init+0x130>
          break;
 8002a6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2bff      	cmp	r3, #255	; 0xff
 8002a74:	d801      	bhi.n	8002a7a <HAL_GPIO_Init+0x13a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	e001      	b.n	8002a7e <HAL_GPIO_Init+0x13e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	2bff      	cmp	r3, #255	; 0xff
 8002a84:	d802      	bhi.n	8002a8c <HAL_GPIO_Init+0x14c>
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	e002      	b.n	8002a92 <HAL_GPIO_Init+0x152>
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	3b08      	subs	r3, #8
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	210f      	movs	r1, #15
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	6a39      	ldr	r1, [r7, #32]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	431a      	orrs	r2, r3
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 80b1 	beq.w	8002c22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ac0:	4b4d      	ldr	r3, [pc, #308]	; (8002bf8 <HAL_GPIO_Init+0x2b8>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4a4c      	ldr	r2, [pc, #304]	; (8002bf8 <HAL_GPIO_Init+0x2b8>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6193      	str	r3, [r2, #24]
 8002acc:	4b4a      	ldr	r3, [pc, #296]	; (8002bf8 <HAL_GPIO_Init+0x2b8>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ad8:	4a48      	ldr	r2, [pc, #288]	; (8002bfc <HAL_GPIO_Init+0x2bc>)
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	089b      	lsrs	r3, r3, #2
 8002ade:	3302      	adds	r3, #2
 8002ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	220f      	movs	r2, #15
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a40      	ldr	r2, [pc, #256]	; (8002c00 <HAL_GPIO_Init+0x2c0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d013      	beq.n	8002b2c <HAL_GPIO_Init+0x1ec>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a3f      	ldr	r2, [pc, #252]	; (8002c04 <HAL_GPIO_Init+0x2c4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00d      	beq.n	8002b28 <HAL_GPIO_Init+0x1e8>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a3e      	ldr	r2, [pc, #248]	; (8002c08 <HAL_GPIO_Init+0x2c8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d007      	beq.n	8002b24 <HAL_GPIO_Init+0x1e4>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a3d      	ldr	r2, [pc, #244]	; (8002c0c <HAL_GPIO_Init+0x2cc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d101      	bne.n	8002b20 <HAL_GPIO_Init+0x1e0>
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e006      	b.n	8002b2e <HAL_GPIO_Init+0x1ee>
 8002b20:	2304      	movs	r3, #4
 8002b22:	e004      	b.n	8002b2e <HAL_GPIO_Init+0x1ee>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e002      	b.n	8002b2e <HAL_GPIO_Init+0x1ee>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_GPIO_Init+0x1ee>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b30:	f002 0203 	and.w	r2, r2, #3
 8002b34:	0092      	lsls	r2, r2, #2
 8002b36:	4093      	lsls	r3, r2
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b3e:	492f      	ldr	r1, [pc, #188]	; (8002bfc <HAL_GPIO_Init+0x2bc>)
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	3302      	adds	r3, #2
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d006      	beq.n	8002b66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b58:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	492c      	ldr	r1, [pc, #176]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]
 8002b64:	e006      	b.n	8002b74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b66:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	4928      	ldr	r1, [pc, #160]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d006      	beq.n	8002b8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b80:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	4922      	ldr	r1, [pc, #136]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
 8002b8c:	e006      	b.n	8002b9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	491e      	ldr	r1, [pc, #120]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d006      	beq.n	8002bb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ba8:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	4918      	ldr	r1, [pc, #96]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]
 8002bb4:	e006      	b.n	8002bc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bb6:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	4914      	ldr	r1, [pc, #80]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d021      	beq.n	8002c14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	490e      	ldr	r1, [pc, #56]	; (8002c10 <HAL_GPIO_Init+0x2d0>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60cb      	str	r3, [r1, #12]
 8002bdc:	e021      	b.n	8002c22 <HAL_GPIO_Init+0x2e2>
 8002bde:	bf00      	nop
 8002be0:	10320000 	.word	0x10320000
 8002be4:	10310000 	.word	0x10310000
 8002be8:	10220000 	.word	0x10220000
 8002bec:	10210000 	.word	0x10210000
 8002bf0:	10120000 	.word	0x10120000
 8002bf4:	10110000 	.word	0x10110000
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40010000 	.word	0x40010000
 8002c00:	40010800 	.word	0x40010800
 8002c04:	40010c00 	.word	0x40010c00
 8002c08:	40011000 	.word	0x40011000
 8002c0c:	40011400 	.word	0x40011400
 8002c10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	4909      	ldr	r1, [pc, #36]	; (8002c44 <HAL_GPIO_Init+0x304>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	3301      	adds	r3, #1
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f47f ae8e 	bne.w	8002954 <HAL_GPIO_Init+0x14>
  }
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	372c      	adds	r7, #44	; 0x2c
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	40010400 	.word	0x40010400

08002c48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	887b      	ldrh	r3, [r7, #2]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	e001      	b.n	8002c6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	807b      	strh	r3, [r7, #2]
 8002c82:	4613      	mov	r3, r2
 8002c84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c86:	787b      	ldrb	r3, [r7, #1]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c8c:	887a      	ldrh	r2, [r7, #2]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c92:	e003      	b.n	8002c9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c94:	887b      	ldrh	r3, [r7, #2]
 8002c96:	041a      	lsls	r2, r3, #16
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	611a      	str	r2, [r3, #16]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
	...

08002ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e12b      	b.n	8002f12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff fb5c 	bl	800238c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2224      	movs	r2, #36	; 0x24
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d0c:	f001 fd20 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8002d10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4a81      	ldr	r2, [pc, #516]	; (8002f1c <HAL_I2C_Init+0x274>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d807      	bhi.n	8002d2c <HAL_I2C_Init+0x84>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4a80      	ldr	r2, [pc, #512]	; (8002f20 <HAL_I2C_Init+0x278>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	bf94      	ite	ls
 8002d24:	2301      	movls	r3, #1
 8002d26:	2300      	movhi	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	e006      	b.n	8002d3a <HAL_I2C_Init+0x92>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4a7d      	ldr	r2, [pc, #500]	; (8002f24 <HAL_I2C_Init+0x27c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	bf94      	ite	ls
 8002d34:	2301      	movls	r3, #1
 8002d36:	2300      	movhi	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e0e7      	b.n	8002f12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4a78      	ldr	r2, [pc, #480]	; (8002f28 <HAL_I2C_Init+0x280>)
 8002d46:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4a:	0c9b      	lsrs	r3, r3, #18
 8002d4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	4a6a      	ldr	r2, [pc, #424]	; (8002f1c <HAL_I2C_Init+0x274>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d802      	bhi.n	8002d7c <HAL_I2C_Init+0xd4>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	e009      	b.n	8002d90 <HAL_I2C_Init+0xe8>
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d82:	fb02 f303 	mul.w	r3, r2, r3
 8002d86:	4a69      	ldr	r2, [pc, #420]	; (8002f2c <HAL_I2C_Init+0x284>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	099b      	lsrs	r3, r3, #6
 8002d8e:	3301      	adds	r3, #1
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	430b      	orrs	r3, r1
 8002d96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002da2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	495c      	ldr	r1, [pc, #368]	; (8002f1c <HAL_I2C_Init+0x274>)
 8002dac:	428b      	cmp	r3, r1
 8002dae:	d819      	bhi.n	8002de4 <HAL_I2C_Init+0x13c>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	1e59      	subs	r1, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dbe:	1c59      	adds	r1, r3, #1
 8002dc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002dc4:	400b      	ands	r3, r1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_I2C_Init+0x138>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1e59      	subs	r1, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dde:	e051      	b.n	8002e84 <HAL_I2C_Init+0x1dc>
 8002de0:	2304      	movs	r3, #4
 8002de2:	e04f      	b.n	8002e84 <HAL_I2C_Init+0x1dc>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d111      	bne.n	8002e10 <HAL_I2C_Init+0x168>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1e58      	subs	r0, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	440b      	add	r3, r1
 8002dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e012      	b.n	8002e36 <HAL_I2C_Init+0x18e>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1e58      	subs	r0, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	0099      	lsls	r1, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e26:	3301      	adds	r3, #1
 8002e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_Init+0x196>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e022      	b.n	8002e84 <HAL_I2C_Init+0x1dc>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10e      	bne.n	8002e64 <HAL_I2C_Init+0x1bc>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1e58      	subs	r0, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6859      	ldr	r1, [r3, #4]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	440b      	add	r3, r1
 8002e54:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e58:	3301      	adds	r3, #1
 8002e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e62:	e00f      	b.n	8002e84 <HAL_I2C_Init+0x1dc>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1e58      	subs	r0, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6859      	ldr	r1, [r3, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	0099      	lsls	r1, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	6809      	ldr	r1, [r1, #0]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69da      	ldr	r2, [r3, #28]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002eb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6911      	ldr	r1, [r2, #16]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68d2      	ldr	r2, [r2, #12]
 8002ebe:	4311      	orrs	r1, r2
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	000186a0 	.word	0x000186a0
 8002f20:	001e847f 	.word	0x001e847f
 8002f24:	003d08ff 	.word	0x003d08ff
 8002f28:	431bde83 	.word	0x431bde83
 8002f2c:	10624dd3 	.word	0x10624dd3

08002f30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	817b      	strh	r3, [r7, #10]
 8002f40:	4613      	mov	r3, r2
 8002f42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f44:	f7ff fbea 	bl	800271c <HAL_GetTick>
 8002f48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	f040 80e0 	bne.w	8003118 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	2319      	movs	r3, #25
 8002f5e:	2201      	movs	r2, #1
 8002f60:	4970      	ldr	r1, [pc, #448]	; (8003124 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fe44 	bl	8003bf0 <I2C_WaitOnFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e0d3      	b.n	800311a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_I2C_Master_Transmit+0x50>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e0cc      	b.n	800311a <HAL_I2C_Master_Transmit+0x1ea>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d007      	beq.n	8002fa6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2221      	movs	r2, #33	; 0x21
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2210      	movs	r2, #16
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	893a      	ldrh	r2, [r7, #8]
 8002fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4a50      	ldr	r2, [pc, #320]	; (8003128 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fe8:	8979      	ldrh	r1, [r7, #10]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	6a3a      	ldr	r2, [r7, #32]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fbfe 	bl	80037f0 <I2C_MasterRequestWrite>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e08d      	b.n	800311a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003014:	e066      	b.n	80030e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	6a39      	ldr	r1, [r7, #32]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 febe 	bl	8003d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00d      	beq.n	8003042 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	2b04      	cmp	r3, #4
 800302c:	d107      	bne.n	800303e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e06b      	b.n	800311a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	781a      	ldrb	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b04      	cmp	r3, #4
 800307e:	d11b      	bne.n	80030b8 <HAL_I2C_Master_Transmit+0x188>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003084:	2b00      	cmp	r3, #0
 8003086:	d017      	beq.n	80030b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	781a      	ldrb	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	6a39      	ldr	r1, [r7, #32]
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 feae 	bl	8003e1e <I2C_WaitOnBTFFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00d      	beq.n	80030e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d107      	bne.n	80030e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e01a      	b.n	800311a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d194      	bne.n	8003016 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	e000      	b.n	800311a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003118:	2302      	movs	r3, #2
  }
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	00100002 	.word	0x00100002
 8003128:	ffff0000 	.word	0xffff0000

0800312c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	4608      	mov	r0, r1
 8003136:	4611      	mov	r1, r2
 8003138:	461a      	mov	r2, r3
 800313a:	4603      	mov	r3, r0
 800313c:	817b      	strh	r3, [r7, #10]
 800313e:	460b      	mov	r3, r1
 8003140:	813b      	strh	r3, [r7, #8]
 8003142:	4613      	mov	r3, r2
 8003144:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003146:	f7ff fae9 	bl	800271c <HAL_GetTick>
 800314a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b20      	cmp	r3, #32
 8003156:	f040 80d9 	bne.w	800330c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	2319      	movs	r3, #25
 8003160:	2201      	movs	r2, #1
 8003162:	496d      	ldr	r1, [pc, #436]	; (8003318 <HAL_I2C_Mem_Write+0x1ec>)
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fd43 	bl	8003bf0 <I2C_WaitOnFlagUntilTimeout>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003170:	2302      	movs	r3, #2
 8003172:	e0cc      	b.n	800330e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_I2C_Mem_Write+0x56>
 800317e:	2302      	movs	r3, #2
 8003180:	e0c5      	b.n	800330e <HAL_I2C_Mem_Write+0x1e2>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d007      	beq.n	80031a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2221      	movs	r2, #33	; 0x21
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2240      	movs	r2, #64	; 0x40
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a3a      	ldr	r2, [r7, #32]
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4a4d      	ldr	r2, [pc, #308]	; (800331c <HAL_I2C_Mem_Write+0x1f0>)
 80031e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031ea:	88f8      	ldrh	r0, [r7, #6]
 80031ec:	893a      	ldrh	r2, [r7, #8]
 80031ee:	8979      	ldrh	r1, [r7, #10]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	9301      	str	r3, [sp, #4]
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	4603      	mov	r3, r0
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 fb7a 	bl	80038f4 <I2C_RequestMemoryWrite>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d052      	beq.n	80032ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e081      	b.n	800330e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fdc4 	bl	8003d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00d      	beq.n	8003236 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	2b04      	cmp	r3, #4
 8003220:	d107      	bne.n	8003232 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003230:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e06b      	b.n	800330e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	781a      	ldrb	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b04      	cmp	r3, #4
 8003272:	d11b      	bne.n	80032ac <HAL_I2C_Mem_Write+0x180>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003278:	2b00      	cmp	r3, #0
 800327a:	d017      	beq.n	80032ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	781a      	ldrb	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1aa      	bne.n	800320a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fdb0 	bl	8003e1e <I2C_WaitOnBTFFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00d      	beq.n	80032e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d107      	bne.n	80032dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e016      	b.n	800330e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	e000      	b.n	800330e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800330c:	2302      	movs	r3, #2
  }
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	00100002 	.word	0x00100002
 800331c:	ffff0000 	.word	0xffff0000

08003320 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08c      	sub	sp, #48	; 0x30
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	4608      	mov	r0, r1
 800332a:	4611      	mov	r1, r2
 800332c:	461a      	mov	r2, r3
 800332e:	4603      	mov	r3, r0
 8003330:	817b      	strh	r3, [r7, #10]
 8003332:	460b      	mov	r3, r1
 8003334:	813b      	strh	r3, [r7, #8]
 8003336:	4613      	mov	r3, r2
 8003338:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800333e:	f7ff f9ed 	bl	800271c <HAL_GetTick>
 8003342:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b20      	cmp	r3, #32
 800334e:	f040 8244 	bne.w	80037da <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	2319      	movs	r3, #25
 8003358:	2201      	movs	r2, #1
 800335a:	4982      	ldr	r1, [pc, #520]	; (8003564 <HAL_I2C_Mem_Read+0x244>)
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 fc47 	bl	8003bf0 <I2C_WaitOnFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003368:	2302      	movs	r3, #2
 800336a:	e237      	b.n	80037dc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_I2C_Mem_Read+0x5a>
 8003376:	2302      	movs	r3, #2
 8003378:	e230      	b.n	80037dc <HAL_I2C_Mem_Read+0x4bc>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b01      	cmp	r3, #1
 800338e:	d007      	beq.n	80033a0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2222      	movs	r2, #34	; 0x22
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2240      	movs	r2, #64	; 0x40
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80033d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4a62      	ldr	r2, [pc, #392]	; (8003568 <HAL_I2C_Mem_Read+0x248>)
 80033e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033e2:	88f8      	ldrh	r0, [r7, #6]
 80033e4:	893a      	ldrh	r2, [r7, #8]
 80033e6:	8979      	ldrh	r1, [r7, #10]
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	4603      	mov	r3, r0
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 fb14 	bl	8003a20 <I2C_RequestMemoryRead>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e1ec      	b.n	80037dc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003406:	2b00      	cmp	r3, #0
 8003408:	d113      	bne.n	8003432 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	61fb      	str	r3, [r7, #28]
 800341e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e1c0      	b.n	80037b4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003436:	2b01      	cmp	r3, #1
 8003438:	d11e      	bne.n	8003478 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003448:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800344a:	b672      	cpsid	i
}
 800344c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003472:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003474:	b662      	cpsie	i
}
 8003476:	e035      	b.n	80034e4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347c:	2b02      	cmp	r3, #2
 800347e:	d11e      	bne.n	80034be <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800348e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003490:	b672      	cpsid	i
}
 8003492:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034ba:	b662      	cpsie	i
}
 80034bc:	e012      	b.n	80034e4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034cc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80034e4:	e166      	b.n	80037b4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	f200 811f 	bhi.w	800372e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d123      	bne.n	8003540 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fccf 	bl	8003ea0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e167      	b.n	80037dc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003534:	b29b      	uxth	r3, r3
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800353e:	e139      	b.n	80037b4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003544:	2b02      	cmp	r3, #2
 8003546:	d152      	bne.n	80035ee <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354e:	2200      	movs	r2, #0
 8003550:	4906      	ldr	r1, [pc, #24]	; (800356c <HAL_I2C_Mem_Read+0x24c>)
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 fb4c 	bl	8003bf0 <I2C_WaitOnFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e13c      	b.n	80037dc <HAL_I2C_Mem_Read+0x4bc>
 8003562:	bf00      	nop
 8003564:	00100002 	.word	0x00100002
 8003568:	ffff0000 	.word	0xffff0000
 800356c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003570:	b672      	cpsid	i
}
 8003572:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003582:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80035b6:	b662      	cpsie	i
}
 80035b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035ec:	e0e2      	b.n	80037b4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f4:	2200      	movs	r2, #0
 80035f6:	497b      	ldr	r1, [pc, #492]	; (80037e4 <HAL_I2C_Mem_Read+0x4c4>)
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 faf9 	bl	8003bf0 <I2C_WaitOnFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0e9      	b.n	80037dc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003616:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003618:	b672      	cpsid	i
}
 800361a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691a      	ldr	r2, [r3, #16]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800364e:	4b66      	ldr	r3, [pc, #408]	; (80037e8 <HAL_I2C_Mem_Read+0x4c8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	08db      	lsrs	r3, r3, #3
 8003654:	4a65      	ldr	r2, [pc, #404]	; (80037ec <HAL_I2C_Mem_Read+0x4cc>)
 8003656:	fba2 2303 	umull	r2, r3, r2, r3
 800365a:	0a1a      	lsrs	r2, r3, #8
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	00da      	lsls	r2, r3, #3
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	3b01      	subs	r3, #1
 800366c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d118      	bne.n	80036a6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003696:	b662      	cpsie	i
}
 8003698:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e09a      	b.n	80037dc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d1d9      	bne.n	8003668 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036f6:	b662      	cpsie	i
}
 80036f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800372c:	e042      	b.n	80037b4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800372e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003730:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 fbb4 	bl	8003ea0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e04c      	b.n	80037dc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b04      	cmp	r3, #4
 8003780:	d118      	bne.n	80037b4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f47f ae94 	bne.w	80034e6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e000      	b.n	80037dc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80037da:	2302      	movs	r3, #2
  }
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3728      	adds	r7, #40	; 0x28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	00010004 	.word	0x00010004
 80037e8:	20000014 	.word	0x20000014
 80037ec:	14f8b589 	.word	0x14f8b589

080037f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	460b      	mov	r3, r1
 80037fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d006      	beq.n	800381a <I2C_MasterRequestWrite+0x2a>
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d003      	beq.n	800381a <I2C_MasterRequestWrite+0x2a>
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003818:	d108      	bne.n	800382c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	e00b      	b.n	8003844 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	2b12      	cmp	r3, #18
 8003832:	d107      	bne.n	8003844 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003842:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 f9cd 	bl	8003bf0 <I2C_WaitOnFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00d      	beq.n	8003878 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800386a:	d103      	bne.n	8003874 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003872:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e035      	b.n	80038e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003880:	d108      	bne.n	8003894 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003882:	897b      	ldrh	r3, [r7, #10]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	461a      	mov	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003890:	611a      	str	r2, [r3, #16]
 8003892:	e01b      	b.n	80038cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003894:	897b      	ldrh	r3, [r7, #10]
 8003896:	11db      	asrs	r3, r3, #7
 8003898:	b2db      	uxtb	r3, r3
 800389a:	f003 0306 	and.w	r3, r3, #6
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f063 030f 	orn	r3, r3, #15
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	490e      	ldr	r1, [pc, #56]	; (80038ec <I2C_MasterRequestWrite+0xfc>)
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f9f3 	bl	8003c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e010      	b.n	80038e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038c2:	897b      	ldrh	r3, [r7, #10]
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	4907      	ldr	r1, [pc, #28]	; (80038f0 <I2C_MasterRequestWrite+0x100>)
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f9e3 	bl	8003c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	00010008 	.word	0x00010008
 80038f0:	00010002 	.word	0x00010002

080038f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	4608      	mov	r0, r1
 80038fe:	4611      	mov	r1, r2
 8003900:	461a      	mov	r2, r3
 8003902:	4603      	mov	r3, r0
 8003904:	817b      	strh	r3, [r7, #10]
 8003906:	460b      	mov	r3, r1
 8003908:	813b      	strh	r3, [r7, #8]
 800390a:	4613      	mov	r3, r2
 800390c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800391c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	2200      	movs	r2, #0
 8003926:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f960 	bl	8003bf0 <I2C_WaitOnFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00d      	beq.n	8003952 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003944:	d103      	bne.n	800394e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800394c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e05f      	b.n	8003a12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003952:	897b      	ldrh	r3, [r7, #10]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	461a      	mov	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003960:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	6a3a      	ldr	r2, [r7, #32]
 8003966:	492d      	ldr	r1, [pc, #180]	; (8003a1c <I2C_RequestMemoryWrite+0x128>)
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f998 	bl	8003c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e04c      	b.n	8003a12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800398e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003990:	6a39      	ldr	r1, [r7, #32]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fa02 	bl	8003d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00d      	beq.n	80039ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d107      	bne.n	80039b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e02b      	b.n	8003a12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ba:	88fb      	ldrh	r3, [r7, #6]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d105      	bne.n	80039cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039c0:	893b      	ldrh	r3, [r7, #8]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	611a      	str	r2, [r3, #16]
 80039ca:	e021      	b.n	8003a10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039cc:	893b      	ldrh	r3, [r7, #8]
 80039ce:	0a1b      	lsrs	r3, r3, #8
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039dc:	6a39      	ldr	r1, [r7, #32]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f9dc 	bl	8003d9c <I2C_WaitOnTXEFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00d      	beq.n	8003a06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d107      	bne.n	8003a02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e005      	b.n	8003a12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a06:	893b      	ldrh	r3, [r7, #8]
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	00010002 	.word	0x00010002

08003a20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	4608      	mov	r0, r1
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	817b      	strh	r3, [r7, #10]
 8003a32:	460b      	mov	r3, r1
 8003a34:	813b      	strh	r3, [r7, #8]
 8003a36:	4613      	mov	r3, r2
 8003a38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f8c2 	bl	8003bf0 <I2C_WaitOnFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00d      	beq.n	8003a8e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a80:	d103      	bne.n	8003a8a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e0aa      	b.n	8003be4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a8e:	897b      	ldrh	r3, [r7, #10]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	461a      	mov	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	6a3a      	ldr	r2, [r7, #32]
 8003aa2:	4952      	ldr	r1, [pc, #328]	; (8003bec <I2C_RequestMemoryRead+0x1cc>)
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f8fa 	bl	8003c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e097      	b.n	8003be4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003acc:	6a39      	ldr	r1, [r7, #32]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f964 	bl	8003d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00d      	beq.n	8003af6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d107      	bne.n	8003af2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e076      	b.n	8003be4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d105      	bne.n	8003b08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003afc:	893b      	ldrh	r3, [r7, #8]
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	611a      	str	r2, [r3, #16]
 8003b06:	e021      	b.n	8003b4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b08:	893b      	ldrh	r3, [r7, #8]
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b18:	6a39      	ldr	r1, [r7, #32]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f93e 	bl	8003d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00d      	beq.n	8003b42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d107      	bne.n	8003b3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e050      	b.n	8003be4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b42:	893b      	ldrh	r3, [r7, #8]
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	6a39      	ldr	r1, [r7, #32]
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f923 	bl	8003d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00d      	beq.n	8003b78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d107      	bne.n	8003b74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e035      	b.n	8003be4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 f82b 	bl	8003bf0 <I2C_WaitOnFlagUntilTimeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00d      	beq.n	8003bbc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bae:	d103      	bne.n	8003bb8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e013      	b.n	8003be4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bbc:	897b      	ldrh	r3, [r7, #10]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	6a3a      	ldr	r2, [r7, #32]
 8003bd0:	4906      	ldr	r1, [pc, #24]	; (8003bec <I2C_RequestMemoryRead+0x1cc>)
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f863 	bl	8003c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	00010002 	.word	0x00010002

08003bf0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c00:	e025      	b.n	8003c4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c08:	d021      	beq.n	8003c4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0a:	f7fe fd87 	bl	800271c <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d302      	bcc.n	8003c20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d116      	bne.n	8003c4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f043 0220 	orr.w	r2, r3, #32
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e023      	b.n	8003c96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	0c1b      	lsrs	r3, r3, #16
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d10d      	bne.n	8003c74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	43da      	mvns	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4013      	ands	r3, r2
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	bf0c      	ite	eq
 8003c6a:	2301      	moveq	r3, #1
 8003c6c:	2300      	movne	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	e00c      	b.n	8003c8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	43da      	mvns	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bf0c      	ite	eq
 8003c86:	2301      	moveq	r3, #1
 8003c88:	2300      	movne	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d0b6      	beq.n	8003c02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b084      	sub	sp, #16
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	607a      	str	r2, [r7, #4]
 8003caa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cac:	e051      	b.n	8003d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cbc:	d123      	bne.n	8003d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ccc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f043 0204 	orr.w	r2, r3, #4
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e046      	b.n	8003d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0c:	d021      	beq.n	8003d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d0e:	f7fe fd05 	bl	800271c <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d302      	bcc.n	8003d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d116      	bne.n	8003d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f043 0220 	orr.w	r2, r3, #32
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e020      	b.n	8003d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	0c1b      	lsrs	r3, r3, #16
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d10c      	bne.n	8003d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	43da      	mvns	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4013      	ands	r3, r2
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bf14      	ite	ne
 8003d6e:	2301      	movne	r3, #1
 8003d70:	2300      	moveq	r3, #0
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	e00b      	b.n	8003d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	43da      	mvns	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	4013      	ands	r3, r2
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	bf14      	ite	ne
 8003d88:	2301      	movne	r3, #1
 8003d8a:	2300      	moveq	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d18d      	bne.n	8003cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003da8:	e02d      	b.n	8003e06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f8ce 	bl	8003f4c <I2C_IsAcknowledgeFailed>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e02d      	b.n	8003e16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc0:	d021      	beq.n	8003e06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc2:	f7fe fcab 	bl	800271c <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d302      	bcc.n	8003dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d116      	bne.n	8003e06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f043 0220 	orr.w	r2, r3, #32
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e007      	b.n	8003e16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e10:	2b80      	cmp	r3, #128	; 0x80
 8003e12:	d1ca      	bne.n	8003daa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e2a:	e02d      	b.n	8003e88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f88d 	bl	8003f4c <I2C_IsAcknowledgeFailed>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e02d      	b.n	8003e98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e42:	d021      	beq.n	8003e88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e44:	f7fe fc6a 	bl	800271c <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d302      	bcc.n	8003e5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d116      	bne.n	8003e88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	f043 0220 	orr.w	r2, r3, #32
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e007      	b.n	8003e98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d1ca      	bne.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003eac:	e042      	b.n	8003f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	f003 0310 	and.w	r3, r3, #16
 8003eb8:	2b10      	cmp	r3, #16
 8003eba:	d119      	bne.n	8003ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0210 	mvn.w	r2, #16
 8003ec4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e029      	b.n	8003f44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef0:	f7fe fc14 	bl	800271c <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d302      	bcc.n	8003f06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d116      	bne.n	8003f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	f043 0220 	orr.w	r2, r3, #32
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e007      	b.n	8003f44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3e:	2b40      	cmp	r3, #64	; 0x40
 8003f40:	d1b5      	bne.n	8003eae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f62:	d11b      	bne.n	8003f9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	f043 0204 	orr.w	r2, r3, #4
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e272      	b.n	80044a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8087 	beq.w	80040d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fc8:	4b92      	ldr	r3, [pc, #584]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 030c 	and.w	r3, r3, #12
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d00c      	beq.n	8003fee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fd4:	4b8f      	ldr	r3, [pc, #572]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d112      	bne.n	8004006 <HAL_RCC_OscConfig+0x5e>
 8003fe0:	4b8c      	ldr	r3, [pc, #560]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fec:	d10b      	bne.n	8004006 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fee:	4b89      	ldr	r3, [pc, #548]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d06c      	beq.n	80040d4 <HAL_RCC_OscConfig+0x12c>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d168      	bne.n	80040d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e24c      	b.n	80044a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400e:	d106      	bne.n	800401e <HAL_RCC_OscConfig+0x76>
 8004010:	4b80      	ldr	r3, [pc, #512]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a7f      	ldr	r2, [pc, #508]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 8004016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	e02e      	b.n	800407c <HAL_RCC_OscConfig+0xd4>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10c      	bne.n	8004040 <HAL_RCC_OscConfig+0x98>
 8004026:	4b7b      	ldr	r3, [pc, #492]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a7a      	ldr	r2, [pc, #488]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 800402c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	4b78      	ldr	r3, [pc, #480]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a77      	ldr	r2, [pc, #476]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 8004038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	e01d      	b.n	800407c <HAL_RCC_OscConfig+0xd4>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004048:	d10c      	bne.n	8004064 <HAL_RCC_OscConfig+0xbc>
 800404a:	4b72      	ldr	r3, [pc, #456]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a71      	ldr	r2, [pc, #452]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 8004050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	4b6f      	ldr	r3, [pc, #444]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a6e      	ldr	r2, [pc, #440]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 800405c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e00b      	b.n	800407c <HAL_RCC_OscConfig+0xd4>
 8004064:	4b6b      	ldr	r3, [pc, #428]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a6a      	ldr	r2, [pc, #424]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 800406a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	4b68      	ldr	r3, [pc, #416]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a67      	ldr	r2, [pc, #412]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 8004076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800407a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d013      	beq.n	80040ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fe fb4a 	bl	800271c <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800408c:	f7fe fb46 	bl	800271c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	; 0x64
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e200      	b.n	80044a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409e:	4b5d      	ldr	r3, [pc, #372]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0xe4>
 80040aa:	e014      	b.n	80040d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fe fb36 	bl	800271c <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b4:	f7fe fb32 	bl	800271c <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b64      	cmp	r3, #100	; 0x64
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e1ec      	b.n	80044a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040c6:	4b53      	ldr	r3, [pc, #332]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x10c>
 80040d2:	e000      	b.n	80040d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d063      	beq.n	80041aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040e2:	4b4c      	ldr	r3, [pc, #304]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 030c 	and.w	r3, r3, #12
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00b      	beq.n	8004106 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040ee:	4b49      	ldr	r3, [pc, #292]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d11c      	bne.n	8004134 <HAL_RCC_OscConfig+0x18c>
 80040fa:	4b46      	ldr	r3, [pc, #280]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d116      	bne.n	8004134 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004106:	4b43      	ldr	r3, [pc, #268]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <HAL_RCC_OscConfig+0x176>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d001      	beq.n	800411e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e1c0      	b.n	80044a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411e:	4b3d      	ldr	r3, [pc, #244]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4939      	ldr	r1, [pc, #228]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004132:	e03a      	b.n	80041aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d020      	beq.n	800417e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800413c:	4b36      	ldr	r3, [pc, #216]	; (8004218 <HAL_RCC_OscConfig+0x270>)
 800413e:	2201      	movs	r2, #1
 8004140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004142:	f7fe faeb 	bl	800271c <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800414a:	f7fe fae7 	bl	800271c <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e1a1      	b.n	80044a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415c:	4b2d      	ldr	r3, [pc, #180]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004168:	4b2a      	ldr	r3, [pc, #168]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4927      	ldr	r1, [pc, #156]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 8004178:	4313      	orrs	r3, r2
 800417a:	600b      	str	r3, [r1, #0]
 800417c:	e015      	b.n	80041aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800417e:	4b26      	ldr	r3, [pc, #152]	; (8004218 <HAL_RCC_OscConfig+0x270>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fe faca 	bl	800271c <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800418c:	f7fe fac6 	bl	800271c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e180      	b.n	80044a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800419e:	4b1d      	ldr	r3, [pc, #116]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d03a      	beq.n	800422c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d019      	beq.n	80041f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041be:	4b17      	ldr	r3, [pc, #92]	; (800421c <HAL_RCC_OscConfig+0x274>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c4:	f7fe faaa 	bl	800271c <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041cc:	f7fe faa6 	bl	800271c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e160      	b.n	80044a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041de:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <HAL_RCC_OscConfig+0x26c>)
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041ea:	2001      	movs	r0, #1
 80041ec:	f000 fac4 	bl	8004778 <RCC_Delay>
 80041f0:	e01c      	b.n	800422c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <HAL_RCC_OscConfig+0x274>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f8:	f7fe fa90 	bl	800271c <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041fe:	e00f      	b.n	8004220 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004200:	f7fe fa8c 	bl	800271c <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d908      	bls.n	8004220 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e146      	b.n	80044a0 <HAL_RCC_OscConfig+0x4f8>
 8004212:	bf00      	nop
 8004214:	40021000 	.word	0x40021000
 8004218:	42420000 	.word	0x42420000
 800421c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004220:	4b92      	ldr	r3, [pc, #584]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e9      	bne.n	8004200 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 80a6 	beq.w	8004386 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800423a:	2300      	movs	r3, #0
 800423c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800423e:	4b8b      	ldr	r3, [pc, #556]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10d      	bne.n	8004266 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800424a:	4b88      	ldr	r3, [pc, #544]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	4a87      	ldr	r2, [pc, #540]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 8004250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004254:	61d3      	str	r3, [r2, #28]
 8004256:	4b85      	ldr	r3, [pc, #532]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425e:	60bb      	str	r3, [r7, #8]
 8004260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004262:	2301      	movs	r3, #1
 8004264:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004266:	4b82      	ldr	r3, [pc, #520]	; (8004470 <HAL_RCC_OscConfig+0x4c8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426e:	2b00      	cmp	r3, #0
 8004270:	d118      	bne.n	80042a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004272:	4b7f      	ldr	r3, [pc, #508]	; (8004470 <HAL_RCC_OscConfig+0x4c8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a7e      	ldr	r2, [pc, #504]	; (8004470 <HAL_RCC_OscConfig+0x4c8>)
 8004278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800427e:	f7fe fa4d 	bl	800271c <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004286:	f7fe fa49 	bl	800271c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b64      	cmp	r3, #100	; 0x64
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e103      	b.n	80044a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004298:	4b75      	ldr	r3, [pc, #468]	; (8004470 <HAL_RCC_OscConfig+0x4c8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d106      	bne.n	80042ba <HAL_RCC_OscConfig+0x312>
 80042ac:	4b6f      	ldr	r3, [pc, #444]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	4a6e      	ldr	r2, [pc, #440]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	6213      	str	r3, [r2, #32]
 80042b8:	e02d      	b.n	8004316 <HAL_RCC_OscConfig+0x36e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10c      	bne.n	80042dc <HAL_RCC_OscConfig+0x334>
 80042c2:	4b6a      	ldr	r3, [pc, #424]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	4a69      	ldr	r2, [pc, #420]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	6213      	str	r3, [r2, #32]
 80042ce:	4b67      	ldr	r3, [pc, #412]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	4a66      	ldr	r2, [pc, #408]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 80042d4:	f023 0304 	bic.w	r3, r3, #4
 80042d8:	6213      	str	r3, [r2, #32]
 80042da:	e01c      	b.n	8004316 <HAL_RCC_OscConfig+0x36e>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	2b05      	cmp	r3, #5
 80042e2:	d10c      	bne.n	80042fe <HAL_RCC_OscConfig+0x356>
 80042e4:	4b61      	ldr	r3, [pc, #388]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	4a60      	ldr	r2, [pc, #384]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 80042ea:	f043 0304 	orr.w	r3, r3, #4
 80042ee:	6213      	str	r3, [r2, #32]
 80042f0:	4b5e      	ldr	r3, [pc, #376]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	4a5d      	ldr	r2, [pc, #372]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	6213      	str	r3, [r2, #32]
 80042fc:	e00b      	b.n	8004316 <HAL_RCC_OscConfig+0x36e>
 80042fe:	4b5b      	ldr	r3, [pc, #364]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	4a5a      	ldr	r2, [pc, #360]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	6213      	str	r3, [r2, #32]
 800430a:	4b58      	ldr	r3, [pc, #352]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	4a57      	ldr	r2, [pc, #348]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 8004310:	f023 0304 	bic.w	r3, r3, #4
 8004314:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d015      	beq.n	800434a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800431e:	f7fe f9fd 	bl	800271c <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004324:	e00a      	b.n	800433c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004326:	f7fe f9f9 	bl	800271c <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	f241 3288 	movw	r2, #5000	; 0x1388
 8004334:	4293      	cmp	r3, r2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e0b1      	b.n	80044a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433c:	4b4b      	ldr	r3, [pc, #300]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0ee      	beq.n	8004326 <HAL_RCC_OscConfig+0x37e>
 8004348:	e014      	b.n	8004374 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800434a:	f7fe f9e7 	bl	800271c <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004350:	e00a      	b.n	8004368 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004352:	f7fe f9e3 	bl	800271c <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004360:	4293      	cmp	r3, r2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e09b      	b.n	80044a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004368:	4b40      	ldr	r3, [pc, #256]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1ee      	bne.n	8004352 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004374:	7dfb      	ldrb	r3, [r7, #23]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d105      	bne.n	8004386 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800437a:	4b3c      	ldr	r3, [pc, #240]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	4a3b      	ldr	r2, [pc, #236]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 8004380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004384:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 8087 	beq.w	800449e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004390:	4b36      	ldr	r3, [pc, #216]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f003 030c 	and.w	r3, r3, #12
 8004398:	2b08      	cmp	r3, #8
 800439a:	d061      	beq.n	8004460 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d146      	bne.n	8004432 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a4:	4b33      	ldr	r3, [pc, #204]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043aa:	f7fe f9b7 	bl	800271c <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b2:	f7fe f9b3 	bl	800271c <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e06d      	b.n	80044a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043c4:	4b29      	ldr	r3, [pc, #164]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1f0      	bne.n	80043b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d8:	d108      	bne.n	80043ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043da:	4b24      	ldr	r3, [pc, #144]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	4921      	ldr	r1, [pc, #132]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043ec:	4b1f      	ldr	r3, [pc, #124]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a19      	ldr	r1, [r3, #32]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	430b      	orrs	r3, r1
 80043fe:	491b      	ldr	r1, [pc, #108]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 8004400:	4313      	orrs	r3, r2
 8004402:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004404:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004406:	2201      	movs	r2, #1
 8004408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440a:	f7fe f987 	bl	800271c <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004412:	f7fe f983 	bl	800271c <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e03d      	b.n	80044a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004424:	4b11      	ldr	r3, [pc, #68]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <HAL_RCC_OscConfig+0x46a>
 8004430:	e035      	b.n	800449e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004432:	4b10      	ldr	r3, [pc, #64]	; (8004474 <HAL_RCC_OscConfig+0x4cc>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004438:	f7fe f970 	bl	800271c <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004440:	f7fe f96c 	bl	800271c <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e026      	b.n	80044a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004452:	4b06      	ldr	r3, [pc, #24]	; (800446c <HAL_RCC_OscConfig+0x4c4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x498>
 800445e:	e01e      	b.n	800449e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d107      	bne.n	8004478 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e019      	b.n	80044a0 <HAL_RCC_OscConfig+0x4f8>
 800446c:	40021000 	.word	0x40021000
 8004470:	40007000 	.word	0x40007000
 8004474:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <HAL_RCC_OscConfig+0x500>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	429a      	cmp	r2, r3
 800448a:	d106      	bne.n	800449a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004496:	429a      	cmp	r2, r3
 8004498:	d001      	beq.n	800449e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40021000 	.word	0x40021000

080044ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0d0      	b.n	8004662 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044c0:	4b6a      	ldr	r3, [pc, #424]	; (800466c <HAL_RCC_ClockConfig+0x1c0>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d910      	bls.n	80044f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ce:	4b67      	ldr	r3, [pc, #412]	; (800466c <HAL_RCC_ClockConfig+0x1c0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f023 0207 	bic.w	r2, r3, #7
 80044d6:	4965      	ldr	r1, [pc, #404]	; (800466c <HAL_RCC_ClockConfig+0x1c0>)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	4313      	orrs	r3, r2
 80044dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044de:	4b63      	ldr	r3, [pc, #396]	; (800466c <HAL_RCC_ClockConfig+0x1c0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d001      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0b8      	b.n	8004662 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d020      	beq.n	800453e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004508:	4b59      	ldr	r3, [pc, #356]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	4a58      	ldr	r2, [pc, #352]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 800450e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004512:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004520:	4b53      	ldr	r3, [pc, #332]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	4a52      	ldr	r2, [pc, #328]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 8004526:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800452a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800452c:	4b50      	ldr	r3, [pc, #320]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	494d      	ldr	r1, [pc, #308]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 800453a:	4313      	orrs	r3, r2
 800453c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d040      	beq.n	80045cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d107      	bne.n	8004562 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004552:	4b47      	ldr	r3, [pc, #284]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d115      	bne.n	800458a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e07f      	b.n	8004662 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d107      	bne.n	800457a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456a:	4b41      	ldr	r3, [pc, #260]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e073      	b.n	8004662 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457a:	4b3d      	ldr	r3, [pc, #244]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e06b      	b.n	8004662 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800458a:	4b39      	ldr	r3, [pc, #228]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f023 0203 	bic.w	r2, r3, #3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4936      	ldr	r1, [pc, #216]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800459c:	f7fe f8be 	bl	800271c <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a2:	e00a      	b.n	80045ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a4:	f7fe f8ba 	bl	800271c <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e053      	b.n	8004662 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ba:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f003 020c 	and.w	r2, r3, #12
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d1eb      	bne.n	80045a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045cc:	4b27      	ldr	r3, [pc, #156]	; (800466c <HAL_RCC_ClockConfig+0x1c0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d210      	bcs.n	80045fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045da:	4b24      	ldr	r3, [pc, #144]	; (800466c <HAL_RCC_ClockConfig+0x1c0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f023 0207 	bic.w	r2, r3, #7
 80045e2:	4922      	ldr	r1, [pc, #136]	; (800466c <HAL_RCC_ClockConfig+0x1c0>)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	4b20      	ldr	r3, [pc, #128]	; (800466c <HAL_RCC_ClockConfig+0x1c0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e032      	b.n	8004662 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d008      	beq.n	800461a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004608:	4b19      	ldr	r3, [pc, #100]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4916      	ldr	r1, [pc, #88]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 8004616:	4313      	orrs	r3, r2
 8004618:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004626:	4b12      	ldr	r3, [pc, #72]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	490e      	ldr	r1, [pc, #56]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 8004636:	4313      	orrs	r3, r2
 8004638:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800463a:	f000 f821 	bl	8004680 <HAL_RCC_GetSysClockFreq>
 800463e:	4602      	mov	r2, r0
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	091b      	lsrs	r3, r3, #4
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	490a      	ldr	r1, [pc, #40]	; (8004674 <HAL_RCC_ClockConfig+0x1c8>)
 800464c:	5ccb      	ldrb	r3, [r1, r3]
 800464e:	fa22 f303 	lsr.w	r3, r2, r3
 8004652:	4a09      	ldr	r2, [pc, #36]	; (8004678 <HAL_RCC_ClockConfig+0x1cc>)
 8004654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004656:	4b09      	ldr	r3, [pc, #36]	; (800467c <HAL_RCC_ClockConfig+0x1d0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe f81c 	bl	8002698 <HAL_InitTick>

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40022000 	.word	0x40022000
 8004670:	40021000 	.word	0x40021000
 8004674:	08007cb0 	.word	0x08007cb0
 8004678:	20000014 	.word	0x20000014
 800467c:	20000018 	.word	0x20000018

08004680 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004680:	b490      	push	{r4, r7}
 8004682:	b08a      	sub	sp, #40	; 0x28
 8004684:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004686:	4b29      	ldr	r3, [pc, #164]	; (800472c <HAL_RCC_GetSysClockFreq+0xac>)
 8004688:	1d3c      	adds	r4, r7, #4
 800468a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800468c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004690:	f240 2301 	movw	r3, #513	; 0x201
 8004694:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	2300      	movs	r3, #0
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	2300      	movs	r3, #0
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80046aa:	4b21      	ldr	r3, [pc, #132]	; (8004730 <HAL_RCC_GetSysClockFreq+0xb0>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d002      	beq.n	80046c0 <HAL_RCC_GetSysClockFreq+0x40>
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d003      	beq.n	80046c6 <HAL_RCC_GetSysClockFreq+0x46>
 80046be:	e02b      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046c0:	4b1c      	ldr	r3, [pc, #112]	; (8004734 <HAL_RCC_GetSysClockFreq+0xb4>)
 80046c2:	623b      	str	r3, [r7, #32]
      break;
 80046c4:	e02b      	b.n	800471e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	0c9b      	lsrs	r3, r3, #18
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	3328      	adds	r3, #40	; 0x28
 80046d0:	443b      	add	r3, r7
 80046d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80046d6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d012      	beq.n	8004708 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046e2:	4b13      	ldr	r3, [pc, #76]	; (8004730 <HAL_RCC_GetSysClockFreq+0xb0>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	0c5b      	lsrs	r3, r3, #17
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	3328      	adds	r3, #40	; 0x28
 80046ee:	443b      	add	r3, r7
 80046f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80046f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	4a0e      	ldr	r2, [pc, #56]	; (8004734 <HAL_RCC_GetSysClockFreq+0xb4>)
 80046fa:	fb03 f202 	mul.w	r2, r3, r2
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	fbb2 f3f3 	udiv	r3, r2, r3
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
 8004706:	e004      	b.n	8004712 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	4a0b      	ldr	r2, [pc, #44]	; (8004738 <HAL_RCC_GetSysClockFreq+0xb8>)
 800470c:	fb02 f303 	mul.w	r3, r2, r3
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	623b      	str	r3, [r7, #32]
      break;
 8004716:	e002      	b.n	800471e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004718:	4b06      	ldr	r3, [pc, #24]	; (8004734 <HAL_RCC_GetSysClockFreq+0xb4>)
 800471a:	623b      	str	r3, [r7, #32]
      break;
 800471c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800471e:	6a3b      	ldr	r3, [r7, #32]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3728      	adds	r7, #40	; 0x28
 8004724:	46bd      	mov	sp, r7
 8004726:	bc90      	pop	{r4, r7}
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	08007ca0 	.word	0x08007ca0
 8004730:	40021000 	.word	0x40021000
 8004734:	007a1200 	.word	0x007a1200
 8004738:	003d0900 	.word	0x003d0900

0800473c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004740:	4b02      	ldr	r3, [pc, #8]	; (800474c <HAL_RCC_GetHCLKFreq+0x10>)
 8004742:	681b      	ldr	r3, [r3, #0]
}
 8004744:	4618      	mov	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr
 800474c:	20000014 	.word	0x20000014

08004750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004754:	f7ff fff2 	bl	800473c <HAL_RCC_GetHCLKFreq>
 8004758:	4602      	mov	r2, r0
 800475a:	4b05      	ldr	r3, [pc, #20]	; (8004770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	4903      	ldr	r1, [pc, #12]	; (8004774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004766:	5ccb      	ldrb	r3, [r1, r3]
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800476c:	4618      	mov	r0, r3
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40021000 	.word	0x40021000
 8004774:	08007cc0 	.word	0x08007cc0

08004778 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004780:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <RCC_Delay+0x34>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a0a      	ldr	r2, [pc, #40]	; (80047b0 <RCC_Delay+0x38>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	0a5b      	lsrs	r3, r3, #9
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004794:	bf00      	nop
  }
  while (Delay --);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1e5a      	subs	r2, r3, #1
 800479a:	60fa      	str	r2, [r7, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f9      	bne.n	8004794 <RCC_Delay+0x1c>
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr
 80047ac:	20000014 	.word	0x20000014
 80047b0:	10624dd3 	.word	0x10624dd3

080047b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e041      	b.n	800484a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fd fe14 	bl	8002408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3304      	adds	r3, #4
 80047f0:	4619      	mov	r1, r3
 80047f2:	4610      	mov	r0, r2
 80047f4:	f000 f962 	bl	8004abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	d001      	beq.n	800486c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e032      	b.n	80048d2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a18      	ldr	r2, [pc, #96]	; (80048dc <HAL_TIM_Base_Start+0x88>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00e      	beq.n	800489c <HAL_TIM_Base_Start+0x48>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004886:	d009      	beq.n	800489c <HAL_TIM_Base_Start+0x48>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a14      	ldr	r2, [pc, #80]	; (80048e0 <HAL_TIM_Base_Start+0x8c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d004      	beq.n	800489c <HAL_TIM_Base_Start+0x48>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a13      	ldr	r2, [pc, #76]	; (80048e4 <HAL_TIM_Base_Start+0x90>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d111      	bne.n	80048c0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b06      	cmp	r3, #6
 80048ac:	d010      	beq.n	80048d0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0201 	orr.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048be:	e007      	b.n	80048d0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr
 80048dc:	40012c00 	.word	0x40012c00
 80048e0:	40000400 	.word	0x40000400
 80048e4:	40000800 	.word	0x40000800

080048e8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6a1a      	ldr	r2, [r3, #32]
 80048f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10f      	bne.n	8004920 <HAL_TIM_Base_Stop+0x38>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6a1a      	ldr	r2, [r3, #32]
 8004906:	f240 4344 	movw	r3, #1092	; 0x444
 800490a:	4013      	ands	r3, r2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d107      	bne.n	8004920 <HAL_TIM_Base_Stop+0x38>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0201 	bic.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	bc80      	pop	{r7}
 8004932:	4770      	bx	lr

08004934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_TIM_ConfigClockSource+0x18>
 8004948:	2302      	movs	r3, #2
 800494a:	e0b3      	b.n	8004ab4 <HAL_TIM_ConfigClockSource+0x180>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800496a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004972:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004984:	d03e      	beq.n	8004a04 <HAL_TIM_ConfigClockSource+0xd0>
 8004986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800498a:	f200 8087 	bhi.w	8004a9c <HAL_TIM_ConfigClockSource+0x168>
 800498e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004992:	f000 8085 	beq.w	8004aa0 <HAL_TIM_ConfigClockSource+0x16c>
 8004996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800499a:	d87f      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x168>
 800499c:	2b70      	cmp	r3, #112	; 0x70
 800499e:	d01a      	beq.n	80049d6 <HAL_TIM_ConfigClockSource+0xa2>
 80049a0:	2b70      	cmp	r3, #112	; 0x70
 80049a2:	d87b      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x168>
 80049a4:	2b60      	cmp	r3, #96	; 0x60
 80049a6:	d050      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x116>
 80049a8:	2b60      	cmp	r3, #96	; 0x60
 80049aa:	d877      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x168>
 80049ac:	2b50      	cmp	r3, #80	; 0x50
 80049ae:	d03c      	beq.n	8004a2a <HAL_TIM_ConfigClockSource+0xf6>
 80049b0:	2b50      	cmp	r3, #80	; 0x50
 80049b2:	d873      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x168>
 80049b4:	2b40      	cmp	r3, #64	; 0x40
 80049b6:	d058      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0x136>
 80049b8:	2b40      	cmp	r3, #64	; 0x40
 80049ba:	d86f      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x168>
 80049bc:	2b30      	cmp	r3, #48	; 0x30
 80049be:	d064      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x156>
 80049c0:	2b30      	cmp	r3, #48	; 0x30
 80049c2:	d86b      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x168>
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d060      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x156>
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d867      	bhi.n	8004a9c <HAL_TIM_ConfigClockSource+0x168>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d05c      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x156>
 80049d0:	2b10      	cmp	r3, #16
 80049d2:	d05a      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80049d4:	e062      	b.n	8004a9c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	6899      	ldr	r1, [r3, #8]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f000 f942 	bl	8004c6e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	609a      	str	r2, [r3, #8]
      break;
 8004a02:	e04e      	b.n	8004aa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	6899      	ldr	r1, [r3, #8]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f000 f92b 	bl	8004c6e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a26:	609a      	str	r2, [r3, #8]
      break;
 8004a28:	e03b      	b.n	8004aa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	6859      	ldr	r1, [r3, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	461a      	mov	r2, r3
 8004a38:	f000 f8a2 	bl	8004b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2150      	movs	r1, #80	; 0x50
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 f8f9 	bl	8004c3a <TIM_ITRx_SetConfig>
      break;
 8004a48:	e02b      	b.n	8004aa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	6859      	ldr	r1, [r3, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	461a      	mov	r2, r3
 8004a58:	f000 f8c0 	bl	8004bdc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2160      	movs	r1, #96	; 0x60
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 f8e9 	bl	8004c3a <TIM_ITRx_SetConfig>
      break;
 8004a68:	e01b      	b.n	8004aa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	6859      	ldr	r1, [r3, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	461a      	mov	r2, r3
 8004a78:	f000 f882 	bl	8004b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2140      	movs	r1, #64	; 0x40
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f8d9 	bl	8004c3a <TIM_ITRx_SetConfig>
      break;
 8004a88:	e00b      	b.n	8004aa2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4619      	mov	r1, r3
 8004a94:	4610      	mov	r0, r2
 8004a96:	f000 f8d0 	bl	8004c3a <TIM_ITRx_SetConfig>
        break;
 8004a9a:	e002      	b.n	8004aa2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004a9c:	bf00      	nop
 8004a9e:	e000      	b.n	8004aa2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004aa0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a29      	ldr	r2, [pc, #164]	; (8004b74 <TIM_Base_SetConfig+0xb8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00b      	beq.n	8004aec <TIM_Base_SetConfig+0x30>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ada:	d007      	beq.n	8004aec <TIM_Base_SetConfig+0x30>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a26      	ldr	r2, [pc, #152]	; (8004b78 <TIM_Base_SetConfig+0xbc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d003      	beq.n	8004aec <TIM_Base_SetConfig+0x30>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a25      	ldr	r2, [pc, #148]	; (8004b7c <TIM_Base_SetConfig+0xc0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d108      	bne.n	8004afe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <TIM_Base_SetConfig+0xb8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00b      	beq.n	8004b1e <TIM_Base_SetConfig+0x62>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b0c:	d007      	beq.n	8004b1e <TIM_Base_SetConfig+0x62>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a19      	ldr	r2, [pc, #100]	; (8004b78 <TIM_Base_SetConfig+0xbc>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d003      	beq.n	8004b1e <TIM_Base_SetConfig+0x62>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a18      	ldr	r2, [pc, #96]	; (8004b7c <TIM_Base_SetConfig+0xc0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d108      	bne.n	8004b30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <TIM_Base_SetConfig+0xb8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d103      	bne.n	8004b64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	615a      	str	r2, [r3, #20]
}
 8004b6a:	bf00      	nop
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr
 8004b74:	40012c00 	.word	0x40012c00
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800

08004b80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	f023 0201 	bic.w	r2, r3, #1
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f023 030a 	bic.w	r3, r3, #10
 8004bbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	621a      	str	r2, [r3, #32]
}
 8004bd2:	bf00      	nop
 8004bd4:	371c      	adds	r7, #28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr

08004bdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	f023 0210 	bic.w	r2, r3, #16
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	031b      	lsls	r3, r3, #12
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	621a      	str	r2, [r3, #32]
}
 8004c30:	bf00      	nop
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr

08004c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b085      	sub	sp, #20
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f043 0307 	orr.w	r3, r3, #7
 8004c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	609a      	str	r2, [r3, #8]
}
 8004c64:	bf00      	nop
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr

08004c6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b087      	sub	sp, #28
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	607a      	str	r2, [r7, #4]
 8004c7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	021a      	lsls	r2, r3, #8
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	431a      	orrs	r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	609a      	str	r2, [r3, #8]
}
 8004ca2:	bf00      	nop
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e046      	b.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00e      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d10:	d009      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a12      	ldr	r2, [pc, #72]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d004      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a10      	ldr	r2, [pc, #64]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d10c      	bne.n	8004d40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc80      	pop	{r7}
 8004d5a:	4770      	bx	lr
 8004d5c:	40012c00 	.word	0x40012c00
 8004d60:	40000400 	.word	0x40000400
 8004d64:	40000800 	.word	0x40000800

08004d68 <__errno>:
 8004d68:	4b01      	ldr	r3, [pc, #4]	; (8004d70 <__errno+0x8>)
 8004d6a:	6818      	ldr	r0, [r3, #0]
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	20000020 	.word	0x20000020

08004d74 <__libc_init_array>:
 8004d74:	b570      	push	{r4, r5, r6, lr}
 8004d76:	2600      	movs	r6, #0
 8004d78:	4d0c      	ldr	r5, [pc, #48]	; (8004dac <__libc_init_array+0x38>)
 8004d7a:	4c0d      	ldr	r4, [pc, #52]	; (8004db0 <__libc_init_array+0x3c>)
 8004d7c:	1b64      	subs	r4, r4, r5
 8004d7e:	10a4      	asrs	r4, r4, #2
 8004d80:	42a6      	cmp	r6, r4
 8004d82:	d109      	bne.n	8004d98 <__libc_init_array+0x24>
 8004d84:	f002 fefc 	bl	8007b80 <_init>
 8004d88:	2600      	movs	r6, #0
 8004d8a:	4d0a      	ldr	r5, [pc, #40]	; (8004db4 <__libc_init_array+0x40>)
 8004d8c:	4c0a      	ldr	r4, [pc, #40]	; (8004db8 <__libc_init_array+0x44>)
 8004d8e:	1b64      	subs	r4, r4, r5
 8004d90:	10a4      	asrs	r4, r4, #2
 8004d92:	42a6      	cmp	r6, r4
 8004d94:	d105      	bne.n	8004da2 <__libc_init_array+0x2e>
 8004d96:	bd70      	pop	{r4, r5, r6, pc}
 8004d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d9c:	4798      	blx	r3
 8004d9e:	3601      	adds	r6, #1
 8004da0:	e7ee      	b.n	8004d80 <__libc_init_array+0xc>
 8004da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da6:	4798      	blx	r3
 8004da8:	3601      	adds	r6, #1
 8004daa:	e7f2      	b.n	8004d92 <__libc_init_array+0x1e>
 8004dac:	080080a4 	.word	0x080080a4
 8004db0:	080080a4 	.word	0x080080a4
 8004db4:	080080a4 	.word	0x080080a4
 8004db8:	080080a8 	.word	0x080080a8

08004dbc <memset>:
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	4402      	add	r2, r0
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d100      	bne.n	8004dc6 <memset+0xa>
 8004dc4:	4770      	bx	lr
 8004dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dca:	e7f9      	b.n	8004dc0 <memset+0x4>

08004dcc <__cvt>:
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd2:	461f      	mov	r7, r3
 8004dd4:	bfbb      	ittet	lt
 8004dd6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004dda:	461f      	movlt	r7, r3
 8004ddc:	2300      	movge	r3, #0
 8004dde:	232d      	movlt	r3, #45	; 0x2d
 8004de0:	b088      	sub	sp, #32
 8004de2:	4614      	mov	r4, r2
 8004de4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004de6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004de8:	7013      	strb	r3, [r2, #0]
 8004dea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004dec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004df0:	f023 0820 	bic.w	r8, r3, #32
 8004df4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004df8:	d005      	beq.n	8004e06 <__cvt+0x3a>
 8004dfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004dfe:	d100      	bne.n	8004e02 <__cvt+0x36>
 8004e00:	3501      	adds	r5, #1
 8004e02:	2302      	movs	r3, #2
 8004e04:	e000      	b.n	8004e08 <__cvt+0x3c>
 8004e06:	2303      	movs	r3, #3
 8004e08:	aa07      	add	r2, sp, #28
 8004e0a:	9204      	str	r2, [sp, #16]
 8004e0c:	aa06      	add	r2, sp, #24
 8004e0e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004e12:	e9cd 3500 	strd	r3, r5, [sp]
 8004e16:	4622      	mov	r2, r4
 8004e18:	463b      	mov	r3, r7
 8004e1a:	f000 fce5 	bl	80057e8 <_dtoa_r>
 8004e1e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e22:	4606      	mov	r6, r0
 8004e24:	d102      	bne.n	8004e2c <__cvt+0x60>
 8004e26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e28:	07db      	lsls	r3, r3, #31
 8004e2a:	d522      	bpl.n	8004e72 <__cvt+0xa6>
 8004e2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e30:	eb06 0905 	add.w	r9, r6, r5
 8004e34:	d110      	bne.n	8004e58 <__cvt+0x8c>
 8004e36:	7833      	ldrb	r3, [r6, #0]
 8004e38:	2b30      	cmp	r3, #48	; 0x30
 8004e3a:	d10a      	bne.n	8004e52 <__cvt+0x86>
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2300      	movs	r3, #0
 8004e40:	4620      	mov	r0, r4
 8004e42:	4639      	mov	r1, r7
 8004e44:	f7fb fdb0 	bl	80009a8 <__aeabi_dcmpeq>
 8004e48:	b918      	cbnz	r0, 8004e52 <__cvt+0x86>
 8004e4a:	f1c5 0501 	rsb	r5, r5, #1
 8004e4e:	f8ca 5000 	str.w	r5, [sl]
 8004e52:	f8da 3000 	ldr.w	r3, [sl]
 8004e56:	4499      	add	r9, r3
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	4639      	mov	r1, r7
 8004e60:	f7fb fda2 	bl	80009a8 <__aeabi_dcmpeq>
 8004e64:	b108      	cbz	r0, 8004e6a <__cvt+0x9e>
 8004e66:	f8cd 901c 	str.w	r9, [sp, #28]
 8004e6a:	2230      	movs	r2, #48	; 0x30
 8004e6c:	9b07      	ldr	r3, [sp, #28]
 8004e6e:	454b      	cmp	r3, r9
 8004e70:	d307      	bcc.n	8004e82 <__cvt+0xb6>
 8004e72:	4630      	mov	r0, r6
 8004e74:	9b07      	ldr	r3, [sp, #28]
 8004e76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004e78:	1b9b      	subs	r3, r3, r6
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	b008      	add	sp, #32
 8004e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e82:	1c59      	adds	r1, r3, #1
 8004e84:	9107      	str	r1, [sp, #28]
 8004e86:	701a      	strb	r2, [r3, #0]
 8004e88:	e7f0      	b.n	8004e6c <__cvt+0xa0>

08004e8a <__exponent>:
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e8e:	2900      	cmp	r1, #0
 8004e90:	f803 2b02 	strb.w	r2, [r3], #2
 8004e94:	bfb6      	itet	lt
 8004e96:	222d      	movlt	r2, #45	; 0x2d
 8004e98:	222b      	movge	r2, #43	; 0x2b
 8004e9a:	4249      	neglt	r1, r1
 8004e9c:	2909      	cmp	r1, #9
 8004e9e:	7042      	strb	r2, [r0, #1]
 8004ea0:	dd2b      	ble.n	8004efa <__exponent+0x70>
 8004ea2:	f10d 0407 	add.w	r4, sp, #7
 8004ea6:	46a4      	mov	ip, r4
 8004ea8:	270a      	movs	r7, #10
 8004eaa:	fb91 f6f7 	sdiv	r6, r1, r7
 8004eae:	460a      	mov	r2, r1
 8004eb0:	46a6      	mov	lr, r4
 8004eb2:	fb07 1516 	mls	r5, r7, r6, r1
 8004eb6:	2a63      	cmp	r2, #99	; 0x63
 8004eb8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004ebc:	4631      	mov	r1, r6
 8004ebe:	f104 34ff 	add.w	r4, r4, #4294967295
 8004ec2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004ec6:	dcf0      	bgt.n	8004eaa <__exponent+0x20>
 8004ec8:	3130      	adds	r1, #48	; 0x30
 8004eca:	f1ae 0502 	sub.w	r5, lr, #2
 8004ece:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	1c44      	adds	r4, r0, #1
 8004ed6:	4561      	cmp	r1, ip
 8004ed8:	d30a      	bcc.n	8004ef0 <__exponent+0x66>
 8004eda:	f10d 0209 	add.w	r2, sp, #9
 8004ede:	eba2 020e 	sub.w	r2, r2, lr
 8004ee2:	4565      	cmp	r5, ip
 8004ee4:	bf88      	it	hi
 8004ee6:	2200      	movhi	r2, #0
 8004ee8:	4413      	add	r3, r2
 8004eea:	1a18      	subs	r0, r3, r0
 8004eec:	b003      	add	sp, #12
 8004eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ef4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004ef8:	e7ed      	b.n	8004ed6 <__exponent+0x4c>
 8004efa:	2330      	movs	r3, #48	; 0x30
 8004efc:	3130      	adds	r1, #48	; 0x30
 8004efe:	7083      	strb	r3, [r0, #2]
 8004f00:	70c1      	strb	r1, [r0, #3]
 8004f02:	1d03      	adds	r3, r0, #4
 8004f04:	e7f1      	b.n	8004eea <__exponent+0x60>
	...

08004f08 <_printf_float>:
 8004f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f0c:	b091      	sub	sp, #68	; 0x44
 8004f0e:	460c      	mov	r4, r1
 8004f10:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004f14:	4616      	mov	r6, r2
 8004f16:	461f      	mov	r7, r3
 8004f18:	4605      	mov	r5, r0
 8004f1a:	f001 fa53 	bl	80063c4 <_localeconv_r>
 8004f1e:	6803      	ldr	r3, [r0, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	9309      	str	r3, [sp, #36]	; 0x24
 8004f24:	f7fb f914 	bl	8000150 <strlen>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	930e      	str	r3, [sp, #56]	; 0x38
 8004f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8004f30:	900a      	str	r0, [sp, #40]	; 0x28
 8004f32:	3307      	adds	r3, #7
 8004f34:	f023 0307 	bic.w	r3, r3, #7
 8004f38:	f103 0208 	add.w	r2, r3, #8
 8004f3c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004f40:	f8d4 b000 	ldr.w	fp, [r4]
 8004f44:	f8c8 2000 	str.w	r2, [r8]
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004f50:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004f54:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004f58:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5e:	4640      	mov	r0, r8
 8004f60:	4b9c      	ldr	r3, [pc, #624]	; (80051d4 <_printf_float+0x2cc>)
 8004f62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f64:	f7fb fd52 	bl	8000a0c <__aeabi_dcmpun>
 8004f68:	bb70      	cbnz	r0, 8004fc8 <_printf_float+0xc0>
 8004f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6e:	4640      	mov	r0, r8
 8004f70:	4b98      	ldr	r3, [pc, #608]	; (80051d4 <_printf_float+0x2cc>)
 8004f72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f74:	f7fb fd2c 	bl	80009d0 <__aeabi_dcmple>
 8004f78:	bb30      	cbnz	r0, 8004fc8 <_printf_float+0xc0>
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	4640      	mov	r0, r8
 8004f80:	4651      	mov	r1, sl
 8004f82:	f7fb fd1b 	bl	80009bc <__aeabi_dcmplt>
 8004f86:	b110      	cbz	r0, 8004f8e <_printf_float+0x86>
 8004f88:	232d      	movs	r3, #45	; 0x2d
 8004f8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f8e:	4b92      	ldr	r3, [pc, #584]	; (80051d8 <_printf_float+0x2d0>)
 8004f90:	4892      	ldr	r0, [pc, #584]	; (80051dc <_printf_float+0x2d4>)
 8004f92:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004f96:	bf94      	ite	ls
 8004f98:	4698      	movls	r8, r3
 8004f9a:	4680      	movhi	r8, r0
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	f04f 0a00 	mov.w	sl, #0
 8004fa2:	6123      	str	r3, [r4, #16]
 8004fa4:	f02b 0304 	bic.w	r3, fp, #4
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	4633      	mov	r3, r6
 8004fac:	4621      	mov	r1, r4
 8004fae:	4628      	mov	r0, r5
 8004fb0:	9700      	str	r7, [sp, #0]
 8004fb2:	aa0f      	add	r2, sp, #60	; 0x3c
 8004fb4:	f000 f9d4 	bl	8005360 <_printf_common>
 8004fb8:	3001      	adds	r0, #1
 8004fba:	f040 8090 	bne.w	80050de <_printf_float+0x1d6>
 8004fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc2:	b011      	add	sp, #68	; 0x44
 8004fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc8:	4642      	mov	r2, r8
 8004fca:	4653      	mov	r3, sl
 8004fcc:	4640      	mov	r0, r8
 8004fce:	4651      	mov	r1, sl
 8004fd0:	f7fb fd1c 	bl	8000a0c <__aeabi_dcmpun>
 8004fd4:	b148      	cbz	r0, 8004fea <_printf_float+0xe2>
 8004fd6:	f1ba 0f00 	cmp.w	sl, #0
 8004fda:	bfb8      	it	lt
 8004fdc:	232d      	movlt	r3, #45	; 0x2d
 8004fde:	4880      	ldr	r0, [pc, #512]	; (80051e0 <_printf_float+0x2d8>)
 8004fe0:	bfb8      	it	lt
 8004fe2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004fe6:	4b7f      	ldr	r3, [pc, #508]	; (80051e4 <_printf_float+0x2dc>)
 8004fe8:	e7d3      	b.n	8004f92 <_printf_float+0x8a>
 8004fea:	6863      	ldr	r3, [r4, #4]
 8004fec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	d142      	bne.n	800507a <_printf_float+0x172>
 8004ff4:	2306      	movs	r3, #6
 8004ff6:	6063      	str	r3, [r4, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	9206      	str	r2, [sp, #24]
 8004ffc:	aa0e      	add	r2, sp, #56	; 0x38
 8004ffe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005002:	aa0d      	add	r2, sp, #52	; 0x34
 8005004:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005008:	9203      	str	r2, [sp, #12]
 800500a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800500e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005012:	6023      	str	r3, [r4, #0]
 8005014:	6863      	ldr	r3, [r4, #4]
 8005016:	4642      	mov	r2, r8
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	4628      	mov	r0, r5
 800501c:	4653      	mov	r3, sl
 800501e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005020:	f7ff fed4 	bl	8004dcc <__cvt>
 8005024:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005026:	4680      	mov	r8, r0
 8005028:	2947      	cmp	r1, #71	; 0x47
 800502a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800502c:	d108      	bne.n	8005040 <_printf_float+0x138>
 800502e:	1cc8      	adds	r0, r1, #3
 8005030:	db02      	blt.n	8005038 <_printf_float+0x130>
 8005032:	6863      	ldr	r3, [r4, #4]
 8005034:	4299      	cmp	r1, r3
 8005036:	dd40      	ble.n	80050ba <_printf_float+0x1b2>
 8005038:	f1a9 0902 	sub.w	r9, r9, #2
 800503c:	fa5f f989 	uxtb.w	r9, r9
 8005040:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005044:	d81f      	bhi.n	8005086 <_printf_float+0x17e>
 8005046:	464a      	mov	r2, r9
 8005048:	3901      	subs	r1, #1
 800504a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800504e:	910d      	str	r1, [sp, #52]	; 0x34
 8005050:	f7ff ff1b 	bl	8004e8a <__exponent>
 8005054:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005056:	4682      	mov	sl, r0
 8005058:	1813      	adds	r3, r2, r0
 800505a:	2a01      	cmp	r2, #1
 800505c:	6123      	str	r3, [r4, #16]
 800505e:	dc02      	bgt.n	8005066 <_printf_float+0x15e>
 8005060:	6822      	ldr	r2, [r4, #0]
 8005062:	07d2      	lsls	r2, r2, #31
 8005064:	d501      	bpl.n	800506a <_printf_float+0x162>
 8005066:	3301      	adds	r3, #1
 8005068:	6123      	str	r3, [r4, #16]
 800506a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800506e:	2b00      	cmp	r3, #0
 8005070:	d09b      	beq.n	8004faa <_printf_float+0xa2>
 8005072:	232d      	movs	r3, #45	; 0x2d
 8005074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005078:	e797      	b.n	8004faa <_printf_float+0xa2>
 800507a:	2947      	cmp	r1, #71	; 0x47
 800507c:	d1bc      	bne.n	8004ff8 <_printf_float+0xf0>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1ba      	bne.n	8004ff8 <_printf_float+0xf0>
 8005082:	2301      	movs	r3, #1
 8005084:	e7b7      	b.n	8004ff6 <_printf_float+0xee>
 8005086:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800508a:	d118      	bne.n	80050be <_printf_float+0x1b6>
 800508c:	2900      	cmp	r1, #0
 800508e:	6863      	ldr	r3, [r4, #4]
 8005090:	dd0b      	ble.n	80050aa <_printf_float+0x1a2>
 8005092:	6121      	str	r1, [r4, #16]
 8005094:	b913      	cbnz	r3, 800509c <_printf_float+0x194>
 8005096:	6822      	ldr	r2, [r4, #0]
 8005098:	07d0      	lsls	r0, r2, #31
 800509a:	d502      	bpl.n	80050a2 <_printf_float+0x19a>
 800509c:	3301      	adds	r3, #1
 800509e:	440b      	add	r3, r1
 80050a0:	6123      	str	r3, [r4, #16]
 80050a2:	f04f 0a00 	mov.w	sl, #0
 80050a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80050a8:	e7df      	b.n	800506a <_printf_float+0x162>
 80050aa:	b913      	cbnz	r3, 80050b2 <_printf_float+0x1aa>
 80050ac:	6822      	ldr	r2, [r4, #0]
 80050ae:	07d2      	lsls	r2, r2, #31
 80050b0:	d501      	bpl.n	80050b6 <_printf_float+0x1ae>
 80050b2:	3302      	adds	r3, #2
 80050b4:	e7f4      	b.n	80050a0 <_printf_float+0x198>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e7f2      	b.n	80050a0 <_printf_float+0x198>
 80050ba:	f04f 0967 	mov.w	r9, #103	; 0x67
 80050be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050c0:	4299      	cmp	r1, r3
 80050c2:	db05      	blt.n	80050d0 <_printf_float+0x1c8>
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	6121      	str	r1, [r4, #16]
 80050c8:	07d8      	lsls	r0, r3, #31
 80050ca:	d5ea      	bpl.n	80050a2 <_printf_float+0x19a>
 80050cc:	1c4b      	adds	r3, r1, #1
 80050ce:	e7e7      	b.n	80050a0 <_printf_float+0x198>
 80050d0:	2900      	cmp	r1, #0
 80050d2:	bfcc      	ite	gt
 80050d4:	2201      	movgt	r2, #1
 80050d6:	f1c1 0202 	rsble	r2, r1, #2
 80050da:	4413      	add	r3, r2
 80050dc:	e7e0      	b.n	80050a0 <_printf_float+0x198>
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	055a      	lsls	r2, r3, #21
 80050e2:	d407      	bmi.n	80050f4 <_printf_float+0x1ec>
 80050e4:	6923      	ldr	r3, [r4, #16]
 80050e6:	4642      	mov	r2, r8
 80050e8:	4631      	mov	r1, r6
 80050ea:	4628      	mov	r0, r5
 80050ec:	47b8      	blx	r7
 80050ee:	3001      	adds	r0, #1
 80050f0:	d12b      	bne.n	800514a <_printf_float+0x242>
 80050f2:	e764      	b.n	8004fbe <_printf_float+0xb6>
 80050f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80050f8:	f240 80dd 	bls.w	80052b6 <_printf_float+0x3ae>
 80050fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005100:	2200      	movs	r2, #0
 8005102:	2300      	movs	r3, #0
 8005104:	f7fb fc50 	bl	80009a8 <__aeabi_dcmpeq>
 8005108:	2800      	cmp	r0, #0
 800510a:	d033      	beq.n	8005174 <_printf_float+0x26c>
 800510c:	2301      	movs	r3, #1
 800510e:	4631      	mov	r1, r6
 8005110:	4628      	mov	r0, r5
 8005112:	4a35      	ldr	r2, [pc, #212]	; (80051e8 <_printf_float+0x2e0>)
 8005114:	47b8      	blx	r7
 8005116:	3001      	adds	r0, #1
 8005118:	f43f af51 	beq.w	8004fbe <_printf_float+0xb6>
 800511c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005120:	429a      	cmp	r2, r3
 8005122:	db02      	blt.n	800512a <_printf_float+0x222>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	07d8      	lsls	r0, r3, #31
 8005128:	d50f      	bpl.n	800514a <_printf_float+0x242>
 800512a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800512e:	4631      	mov	r1, r6
 8005130:	4628      	mov	r0, r5
 8005132:	47b8      	blx	r7
 8005134:	3001      	adds	r0, #1
 8005136:	f43f af42 	beq.w	8004fbe <_printf_float+0xb6>
 800513a:	f04f 0800 	mov.w	r8, #0
 800513e:	f104 091a 	add.w	r9, r4, #26
 8005142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005144:	3b01      	subs	r3, #1
 8005146:	4543      	cmp	r3, r8
 8005148:	dc09      	bgt.n	800515e <_printf_float+0x256>
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	079b      	lsls	r3, r3, #30
 800514e:	f100 8102 	bmi.w	8005356 <_printf_float+0x44e>
 8005152:	68e0      	ldr	r0, [r4, #12]
 8005154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005156:	4298      	cmp	r0, r3
 8005158:	bfb8      	it	lt
 800515a:	4618      	movlt	r0, r3
 800515c:	e731      	b.n	8004fc2 <_printf_float+0xba>
 800515e:	2301      	movs	r3, #1
 8005160:	464a      	mov	r2, r9
 8005162:	4631      	mov	r1, r6
 8005164:	4628      	mov	r0, r5
 8005166:	47b8      	blx	r7
 8005168:	3001      	adds	r0, #1
 800516a:	f43f af28 	beq.w	8004fbe <_printf_float+0xb6>
 800516e:	f108 0801 	add.w	r8, r8, #1
 8005172:	e7e6      	b.n	8005142 <_printf_float+0x23a>
 8005174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005176:	2b00      	cmp	r3, #0
 8005178:	dc38      	bgt.n	80051ec <_printf_float+0x2e4>
 800517a:	2301      	movs	r3, #1
 800517c:	4631      	mov	r1, r6
 800517e:	4628      	mov	r0, r5
 8005180:	4a19      	ldr	r2, [pc, #100]	; (80051e8 <_printf_float+0x2e0>)
 8005182:	47b8      	blx	r7
 8005184:	3001      	adds	r0, #1
 8005186:	f43f af1a 	beq.w	8004fbe <_printf_float+0xb6>
 800518a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800518e:	4313      	orrs	r3, r2
 8005190:	d102      	bne.n	8005198 <_printf_float+0x290>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	07d9      	lsls	r1, r3, #31
 8005196:	d5d8      	bpl.n	800514a <_printf_float+0x242>
 8005198:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800519c:	4631      	mov	r1, r6
 800519e:	4628      	mov	r0, r5
 80051a0:	47b8      	blx	r7
 80051a2:	3001      	adds	r0, #1
 80051a4:	f43f af0b 	beq.w	8004fbe <_printf_float+0xb6>
 80051a8:	f04f 0900 	mov.w	r9, #0
 80051ac:	f104 0a1a 	add.w	sl, r4, #26
 80051b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051b2:	425b      	negs	r3, r3
 80051b4:	454b      	cmp	r3, r9
 80051b6:	dc01      	bgt.n	80051bc <_printf_float+0x2b4>
 80051b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051ba:	e794      	b.n	80050e6 <_printf_float+0x1de>
 80051bc:	2301      	movs	r3, #1
 80051be:	4652      	mov	r2, sl
 80051c0:	4631      	mov	r1, r6
 80051c2:	4628      	mov	r0, r5
 80051c4:	47b8      	blx	r7
 80051c6:	3001      	adds	r0, #1
 80051c8:	f43f aef9 	beq.w	8004fbe <_printf_float+0xb6>
 80051cc:	f109 0901 	add.w	r9, r9, #1
 80051d0:	e7ee      	b.n	80051b0 <_printf_float+0x2a8>
 80051d2:	bf00      	nop
 80051d4:	7fefffff 	.word	0x7fefffff
 80051d8:	08007ccc 	.word	0x08007ccc
 80051dc:	08007cd0 	.word	0x08007cd0
 80051e0:	08007cd8 	.word	0x08007cd8
 80051e4:	08007cd4 	.word	0x08007cd4
 80051e8:	08007cdc 	.word	0x08007cdc
 80051ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051f0:	429a      	cmp	r2, r3
 80051f2:	bfa8      	it	ge
 80051f4:	461a      	movge	r2, r3
 80051f6:	2a00      	cmp	r2, #0
 80051f8:	4691      	mov	r9, r2
 80051fa:	dc37      	bgt.n	800526c <_printf_float+0x364>
 80051fc:	f04f 0b00 	mov.w	fp, #0
 8005200:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005204:	f104 021a 	add.w	r2, r4, #26
 8005208:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800520c:	ebaa 0309 	sub.w	r3, sl, r9
 8005210:	455b      	cmp	r3, fp
 8005212:	dc33      	bgt.n	800527c <_printf_float+0x374>
 8005214:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005218:	429a      	cmp	r2, r3
 800521a:	db3b      	blt.n	8005294 <_printf_float+0x38c>
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	07da      	lsls	r2, r3, #31
 8005220:	d438      	bmi.n	8005294 <_printf_float+0x38c>
 8005222:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005224:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005226:	eba3 020a 	sub.w	r2, r3, sl
 800522a:	eba3 0901 	sub.w	r9, r3, r1
 800522e:	4591      	cmp	r9, r2
 8005230:	bfa8      	it	ge
 8005232:	4691      	movge	r9, r2
 8005234:	f1b9 0f00 	cmp.w	r9, #0
 8005238:	dc34      	bgt.n	80052a4 <_printf_float+0x39c>
 800523a:	f04f 0800 	mov.w	r8, #0
 800523e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005242:	f104 0a1a 	add.w	sl, r4, #26
 8005246:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	eba3 0309 	sub.w	r3, r3, r9
 8005250:	4543      	cmp	r3, r8
 8005252:	f77f af7a 	ble.w	800514a <_printf_float+0x242>
 8005256:	2301      	movs	r3, #1
 8005258:	4652      	mov	r2, sl
 800525a:	4631      	mov	r1, r6
 800525c:	4628      	mov	r0, r5
 800525e:	47b8      	blx	r7
 8005260:	3001      	adds	r0, #1
 8005262:	f43f aeac 	beq.w	8004fbe <_printf_float+0xb6>
 8005266:	f108 0801 	add.w	r8, r8, #1
 800526a:	e7ec      	b.n	8005246 <_printf_float+0x33e>
 800526c:	4613      	mov	r3, r2
 800526e:	4631      	mov	r1, r6
 8005270:	4642      	mov	r2, r8
 8005272:	4628      	mov	r0, r5
 8005274:	47b8      	blx	r7
 8005276:	3001      	adds	r0, #1
 8005278:	d1c0      	bne.n	80051fc <_printf_float+0x2f4>
 800527a:	e6a0      	b.n	8004fbe <_printf_float+0xb6>
 800527c:	2301      	movs	r3, #1
 800527e:	4631      	mov	r1, r6
 8005280:	4628      	mov	r0, r5
 8005282:	920b      	str	r2, [sp, #44]	; 0x2c
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	f43f ae99 	beq.w	8004fbe <_printf_float+0xb6>
 800528c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800528e:	f10b 0b01 	add.w	fp, fp, #1
 8005292:	e7b9      	b.n	8005208 <_printf_float+0x300>
 8005294:	4631      	mov	r1, r6
 8005296:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800529a:	4628      	mov	r0, r5
 800529c:	47b8      	blx	r7
 800529e:	3001      	adds	r0, #1
 80052a0:	d1bf      	bne.n	8005222 <_printf_float+0x31a>
 80052a2:	e68c      	b.n	8004fbe <_printf_float+0xb6>
 80052a4:	464b      	mov	r3, r9
 80052a6:	4631      	mov	r1, r6
 80052a8:	4628      	mov	r0, r5
 80052aa:	eb08 020a 	add.w	r2, r8, sl
 80052ae:	47b8      	blx	r7
 80052b0:	3001      	adds	r0, #1
 80052b2:	d1c2      	bne.n	800523a <_printf_float+0x332>
 80052b4:	e683      	b.n	8004fbe <_printf_float+0xb6>
 80052b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052b8:	2a01      	cmp	r2, #1
 80052ba:	dc01      	bgt.n	80052c0 <_printf_float+0x3b8>
 80052bc:	07db      	lsls	r3, r3, #31
 80052be:	d537      	bpl.n	8005330 <_printf_float+0x428>
 80052c0:	2301      	movs	r3, #1
 80052c2:	4642      	mov	r2, r8
 80052c4:	4631      	mov	r1, r6
 80052c6:	4628      	mov	r0, r5
 80052c8:	47b8      	blx	r7
 80052ca:	3001      	adds	r0, #1
 80052cc:	f43f ae77 	beq.w	8004fbe <_printf_float+0xb6>
 80052d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052d4:	4631      	mov	r1, r6
 80052d6:	4628      	mov	r0, r5
 80052d8:	47b8      	blx	r7
 80052da:	3001      	adds	r0, #1
 80052dc:	f43f ae6f 	beq.w	8004fbe <_printf_float+0xb6>
 80052e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052e4:	2200      	movs	r2, #0
 80052e6:	2300      	movs	r3, #0
 80052e8:	f7fb fb5e 	bl	80009a8 <__aeabi_dcmpeq>
 80052ec:	b9d8      	cbnz	r0, 8005326 <_printf_float+0x41e>
 80052ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052f0:	f108 0201 	add.w	r2, r8, #1
 80052f4:	3b01      	subs	r3, #1
 80052f6:	4631      	mov	r1, r6
 80052f8:	4628      	mov	r0, r5
 80052fa:	47b8      	blx	r7
 80052fc:	3001      	adds	r0, #1
 80052fe:	d10e      	bne.n	800531e <_printf_float+0x416>
 8005300:	e65d      	b.n	8004fbe <_printf_float+0xb6>
 8005302:	2301      	movs	r3, #1
 8005304:	464a      	mov	r2, r9
 8005306:	4631      	mov	r1, r6
 8005308:	4628      	mov	r0, r5
 800530a:	47b8      	blx	r7
 800530c:	3001      	adds	r0, #1
 800530e:	f43f ae56 	beq.w	8004fbe <_printf_float+0xb6>
 8005312:	f108 0801 	add.w	r8, r8, #1
 8005316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005318:	3b01      	subs	r3, #1
 800531a:	4543      	cmp	r3, r8
 800531c:	dcf1      	bgt.n	8005302 <_printf_float+0x3fa>
 800531e:	4653      	mov	r3, sl
 8005320:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005324:	e6e0      	b.n	80050e8 <_printf_float+0x1e0>
 8005326:	f04f 0800 	mov.w	r8, #0
 800532a:	f104 091a 	add.w	r9, r4, #26
 800532e:	e7f2      	b.n	8005316 <_printf_float+0x40e>
 8005330:	2301      	movs	r3, #1
 8005332:	4642      	mov	r2, r8
 8005334:	e7df      	b.n	80052f6 <_printf_float+0x3ee>
 8005336:	2301      	movs	r3, #1
 8005338:	464a      	mov	r2, r9
 800533a:	4631      	mov	r1, r6
 800533c:	4628      	mov	r0, r5
 800533e:	47b8      	blx	r7
 8005340:	3001      	adds	r0, #1
 8005342:	f43f ae3c 	beq.w	8004fbe <_printf_float+0xb6>
 8005346:	f108 0801 	add.w	r8, r8, #1
 800534a:	68e3      	ldr	r3, [r4, #12]
 800534c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800534e:	1a5b      	subs	r3, r3, r1
 8005350:	4543      	cmp	r3, r8
 8005352:	dcf0      	bgt.n	8005336 <_printf_float+0x42e>
 8005354:	e6fd      	b.n	8005152 <_printf_float+0x24a>
 8005356:	f04f 0800 	mov.w	r8, #0
 800535a:	f104 0919 	add.w	r9, r4, #25
 800535e:	e7f4      	b.n	800534a <_printf_float+0x442>

08005360 <_printf_common>:
 8005360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005364:	4616      	mov	r6, r2
 8005366:	4699      	mov	r9, r3
 8005368:	688a      	ldr	r2, [r1, #8]
 800536a:	690b      	ldr	r3, [r1, #16]
 800536c:	4607      	mov	r7, r0
 800536e:	4293      	cmp	r3, r2
 8005370:	bfb8      	it	lt
 8005372:	4613      	movlt	r3, r2
 8005374:	6033      	str	r3, [r6, #0]
 8005376:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800537a:	460c      	mov	r4, r1
 800537c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005380:	b10a      	cbz	r2, 8005386 <_printf_common+0x26>
 8005382:	3301      	adds	r3, #1
 8005384:	6033      	str	r3, [r6, #0]
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	0699      	lsls	r1, r3, #26
 800538a:	bf42      	ittt	mi
 800538c:	6833      	ldrmi	r3, [r6, #0]
 800538e:	3302      	addmi	r3, #2
 8005390:	6033      	strmi	r3, [r6, #0]
 8005392:	6825      	ldr	r5, [r4, #0]
 8005394:	f015 0506 	ands.w	r5, r5, #6
 8005398:	d106      	bne.n	80053a8 <_printf_common+0x48>
 800539a:	f104 0a19 	add.w	sl, r4, #25
 800539e:	68e3      	ldr	r3, [r4, #12]
 80053a0:	6832      	ldr	r2, [r6, #0]
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	42ab      	cmp	r3, r5
 80053a6:	dc28      	bgt.n	80053fa <_printf_common+0x9a>
 80053a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053ac:	1e13      	subs	r3, r2, #0
 80053ae:	6822      	ldr	r2, [r4, #0]
 80053b0:	bf18      	it	ne
 80053b2:	2301      	movne	r3, #1
 80053b4:	0692      	lsls	r2, r2, #26
 80053b6:	d42d      	bmi.n	8005414 <_printf_common+0xb4>
 80053b8:	4649      	mov	r1, r9
 80053ba:	4638      	mov	r0, r7
 80053bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053c0:	47c0      	blx	r8
 80053c2:	3001      	adds	r0, #1
 80053c4:	d020      	beq.n	8005408 <_printf_common+0xa8>
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	68e5      	ldr	r5, [r4, #12]
 80053ca:	f003 0306 	and.w	r3, r3, #6
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	bf18      	it	ne
 80053d2:	2500      	movne	r5, #0
 80053d4:	6832      	ldr	r2, [r6, #0]
 80053d6:	f04f 0600 	mov.w	r6, #0
 80053da:	68a3      	ldr	r3, [r4, #8]
 80053dc:	bf08      	it	eq
 80053de:	1aad      	subeq	r5, r5, r2
 80053e0:	6922      	ldr	r2, [r4, #16]
 80053e2:	bf08      	it	eq
 80053e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053e8:	4293      	cmp	r3, r2
 80053ea:	bfc4      	itt	gt
 80053ec:	1a9b      	subgt	r3, r3, r2
 80053ee:	18ed      	addgt	r5, r5, r3
 80053f0:	341a      	adds	r4, #26
 80053f2:	42b5      	cmp	r5, r6
 80053f4:	d11a      	bne.n	800542c <_printf_common+0xcc>
 80053f6:	2000      	movs	r0, #0
 80053f8:	e008      	b.n	800540c <_printf_common+0xac>
 80053fa:	2301      	movs	r3, #1
 80053fc:	4652      	mov	r2, sl
 80053fe:	4649      	mov	r1, r9
 8005400:	4638      	mov	r0, r7
 8005402:	47c0      	blx	r8
 8005404:	3001      	adds	r0, #1
 8005406:	d103      	bne.n	8005410 <_printf_common+0xb0>
 8005408:	f04f 30ff 	mov.w	r0, #4294967295
 800540c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005410:	3501      	adds	r5, #1
 8005412:	e7c4      	b.n	800539e <_printf_common+0x3e>
 8005414:	2030      	movs	r0, #48	; 0x30
 8005416:	18e1      	adds	r1, r4, r3
 8005418:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005422:	4422      	add	r2, r4
 8005424:	3302      	adds	r3, #2
 8005426:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800542a:	e7c5      	b.n	80053b8 <_printf_common+0x58>
 800542c:	2301      	movs	r3, #1
 800542e:	4622      	mov	r2, r4
 8005430:	4649      	mov	r1, r9
 8005432:	4638      	mov	r0, r7
 8005434:	47c0      	blx	r8
 8005436:	3001      	adds	r0, #1
 8005438:	d0e6      	beq.n	8005408 <_printf_common+0xa8>
 800543a:	3601      	adds	r6, #1
 800543c:	e7d9      	b.n	80053f2 <_printf_common+0x92>
	...

08005440 <_printf_i>:
 8005440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005444:	7e0f      	ldrb	r7, [r1, #24]
 8005446:	4691      	mov	r9, r2
 8005448:	2f78      	cmp	r7, #120	; 0x78
 800544a:	4680      	mov	r8, r0
 800544c:	460c      	mov	r4, r1
 800544e:	469a      	mov	sl, r3
 8005450:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005452:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005456:	d807      	bhi.n	8005468 <_printf_i+0x28>
 8005458:	2f62      	cmp	r7, #98	; 0x62
 800545a:	d80a      	bhi.n	8005472 <_printf_i+0x32>
 800545c:	2f00      	cmp	r7, #0
 800545e:	f000 80d9 	beq.w	8005614 <_printf_i+0x1d4>
 8005462:	2f58      	cmp	r7, #88	; 0x58
 8005464:	f000 80a4 	beq.w	80055b0 <_printf_i+0x170>
 8005468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800546c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005470:	e03a      	b.n	80054e8 <_printf_i+0xa8>
 8005472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005476:	2b15      	cmp	r3, #21
 8005478:	d8f6      	bhi.n	8005468 <_printf_i+0x28>
 800547a:	a101      	add	r1, pc, #4	; (adr r1, 8005480 <_printf_i+0x40>)
 800547c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005480:	080054d9 	.word	0x080054d9
 8005484:	080054ed 	.word	0x080054ed
 8005488:	08005469 	.word	0x08005469
 800548c:	08005469 	.word	0x08005469
 8005490:	08005469 	.word	0x08005469
 8005494:	08005469 	.word	0x08005469
 8005498:	080054ed 	.word	0x080054ed
 800549c:	08005469 	.word	0x08005469
 80054a0:	08005469 	.word	0x08005469
 80054a4:	08005469 	.word	0x08005469
 80054a8:	08005469 	.word	0x08005469
 80054ac:	080055fb 	.word	0x080055fb
 80054b0:	0800551d 	.word	0x0800551d
 80054b4:	080055dd 	.word	0x080055dd
 80054b8:	08005469 	.word	0x08005469
 80054bc:	08005469 	.word	0x08005469
 80054c0:	0800561d 	.word	0x0800561d
 80054c4:	08005469 	.word	0x08005469
 80054c8:	0800551d 	.word	0x0800551d
 80054cc:	08005469 	.word	0x08005469
 80054d0:	08005469 	.word	0x08005469
 80054d4:	080055e5 	.word	0x080055e5
 80054d8:	682b      	ldr	r3, [r5, #0]
 80054da:	1d1a      	adds	r2, r3, #4
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	602a      	str	r2, [r5, #0]
 80054e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0a4      	b.n	8005636 <_printf_i+0x1f6>
 80054ec:	6820      	ldr	r0, [r4, #0]
 80054ee:	6829      	ldr	r1, [r5, #0]
 80054f0:	0606      	lsls	r6, r0, #24
 80054f2:	f101 0304 	add.w	r3, r1, #4
 80054f6:	d50a      	bpl.n	800550e <_printf_i+0xce>
 80054f8:	680e      	ldr	r6, [r1, #0]
 80054fa:	602b      	str	r3, [r5, #0]
 80054fc:	2e00      	cmp	r6, #0
 80054fe:	da03      	bge.n	8005508 <_printf_i+0xc8>
 8005500:	232d      	movs	r3, #45	; 0x2d
 8005502:	4276      	negs	r6, r6
 8005504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005508:	230a      	movs	r3, #10
 800550a:	485e      	ldr	r0, [pc, #376]	; (8005684 <_printf_i+0x244>)
 800550c:	e019      	b.n	8005542 <_printf_i+0x102>
 800550e:	680e      	ldr	r6, [r1, #0]
 8005510:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005514:	602b      	str	r3, [r5, #0]
 8005516:	bf18      	it	ne
 8005518:	b236      	sxthne	r6, r6
 800551a:	e7ef      	b.n	80054fc <_printf_i+0xbc>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	6820      	ldr	r0, [r4, #0]
 8005520:	1d19      	adds	r1, r3, #4
 8005522:	6029      	str	r1, [r5, #0]
 8005524:	0601      	lsls	r1, r0, #24
 8005526:	d501      	bpl.n	800552c <_printf_i+0xec>
 8005528:	681e      	ldr	r6, [r3, #0]
 800552a:	e002      	b.n	8005532 <_printf_i+0xf2>
 800552c:	0646      	lsls	r6, r0, #25
 800552e:	d5fb      	bpl.n	8005528 <_printf_i+0xe8>
 8005530:	881e      	ldrh	r6, [r3, #0]
 8005532:	2f6f      	cmp	r7, #111	; 0x6f
 8005534:	bf0c      	ite	eq
 8005536:	2308      	moveq	r3, #8
 8005538:	230a      	movne	r3, #10
 800553a:	4852      	ldr	r0, [pc, #328]	; (8005684 <_printf_i+0x244>)
 800553c:	2100      	movs	r1, #0
 800553e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005542:	6865      	ldr	r5, [r4, #4]
 8005544:	2d00      	cmp	r5, #0
 8005546:	bfa8      	it	ge
 8005548:	6821      	ldrge	r1, [r4, #0]
 800554a:	60a5      	str	r5, [r4, #8]
 800554c:	bfa4      	itt	ge
 800554e:	f021 0104 	bicge.w	r1, r1, #4
 8005552:	6021      	strge	r1, [r4, #0]
 8005554:	b90e      	cbnz	r6, 800555a <_printf_i+0x11a>
 8005556:	2d00      	cmp	r5, #0
 8005558:	d04d      	beq.n	80055f6 <_printf_i+0x1b6>
 800555a:	4615      	mov	r5, r2
 800555c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005560:	fb03 6711 	mls	r7, r3, r1, r6
 8005564:	5dc7      	ldrb	r7, [r0, r7]
 8005566:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800556a:	4637      	mov	r7, r6
 800556c:	42bb      	cmp	r3, r7
 800556e:	460e      	mov	r6, r1
 8005570:	d9f4      	bls.n	800555c <_printf_i+0x11c>
 8005572:	2b08      	cmp	r3, #8
 8005574:	d10b      	bne.n	800558e <_printf_i+0x14e>
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	07de      	lsls	r6, r3, #31
 800557a:	d508      	bpl.n	800558e <_printf_i+0x14e>
 800557c:	6923      	ldr	r3, [r4, #16]
 800557e:	6861      	ldr	r1, [r4, #4]
 8005580:	4299      	cmp	r1, r3
 8005582:	bfde      	ittt	le
 8005584:	2330      	movle	r3, #48	; 0x30
 8005586:	f805 3c01 	strble.w	r3, [r5, #-1]
 800558a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800558e:	1b52      	subs	r2, r2, r5
 8005590:	6122      	str	r2, [r4, #16]
 8005592:	464b      	mov	r3, r9
 8005594:	4621      	mov	r1, r4
 8005596:	4640      	mov	r0, r8
 8005598:	f8cd a000 	str.w	sl, [sp]
 800559c:	aa03      	add	r2, sp, #12
 800559e:	f7ff fedf 	bl	8005360 <_printf_common>
 80055a2:	3001      	adds	r0, #1
 80055a4:	d14c      	bne.n	8005640 <_printf_i+0x200>
 80055a6:	f04f 30ff 	mov.w	r0, #4294967295
 80055aa:	b004      	add	sp, #16
 80055ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b0:	4834      	ldr	r0, [pc, #208]	; (8005684 <_printf_i+0x244>)
 80055b2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055b6:	6829      	ldr	r1, [r5, #0]
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80055be:	6029      	str	r1, [r5, #0]
 80055c0:	061d      	lsls	r5, r3, #24
 80055c2:	d514      	bpl.n	80055ee <_printf_i+0x1ae>
 80055c4:	07df      	lsls	r7, r3, #31
 80055c6:	bf44      	itt	mi
 80055c8:	f043 0320 	orrmi.w	r3, r3, #32
 80055cc:	6023      	strmi	r3, [r4, #0]
 80055ce:	b91e      	cbnz	r6, 80055d8 <_printf_i+0x198>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	f023 0320 	bic.w	r3, r3, #32
 80055d6:	6023      	str	r3, [r4, #0]
 80055d8:	2310      	movs	r3, #16
 80055da:	e7af      	b.n	800553c <_printf_i+0xfc>
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	f043 0320 	orr.w	r3, r3, #32
 80055e2:	6023      	str	r3, [r4, #0]
 80055e4:	2378      	movs	r3, #120	; 0x78
 80055e6:	4828      	ldr	r0, [pc, #160]	; (8005688 <_printf_i+0x248>)
 80055e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055ec:	e7e3      	b.n	80055b6 <_printf_i+0x176>
 80055ee:	0659      	lsls	r1, r3, #25
 80055f0:	bf48      	it	mi
 80055f2:	b2b6      	uxthmi	r6, r6
 80055f4:	e7e6      	b.n	80055c4 <_printf_i+0x184>
 80055f6:	4615      	mov	r5, r2
 80055f8:	e7bb      	b.n	8005572 <_printf_i+0x132>
 80055fa:	682b      	ldr	r3, [r5, #0]
 80055fc:	6826      	ldr	r6, [r4, #0]
 80055fe:	1d18      	adds	r0, r3, #4
 8005600:	6961      	ldr	r1, [r4, #20]
 8005602:	6028      	str	r0, [r5, #0]
 8005604:	0635      	lsls	r5, r6, #24
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	d501      	bpl.n	800560e <_printf_i+0x1ce>
 800560a:	6019      	str	r1, [r3, #0]
 800560c:	e002      	b.n	8005614 <_printf_i+0x1d4>
 800560e:	0670      	lsls	r0, r6, #25
 8005610:	d5fb      	bpl.n	800560a <_printf_i+0x1ca>
 8005612:	8019      	strh	r1, [r3, #0]
 8005614:	2300      	movs	r3, #0
 8005616:	4615      	mov	r5, r2
 8005618:	6123      	str	r3, [r4, #16]
 800561a:	e7ba      	b.n	8005592 <_printf_i+0x152>
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	2100      	movs	r1, #0
 8005620:	1d1a      	adds	r2, r3, #4
 8005622:	602a      	str	r2, [r5, #0]
 8005624:	681d      	ldr	r5, [r3, #0]
 8005626:	6862      	ldr	r2, [r4, #4]
 8005628:	4628      	mov	r0, r5
 800562a:	f000 fed7 	bl	80063dc <memchr>
 800562e:	b108      	cbz	r0, 8005634 <_printf_i+0x1f4>
 8005630:	1b40      	subs	r0, r0, r5
 8005632:	6060      	str	r0, [r4, #4]
 8005634:	6863      	ldr	r3, [r4, #4]
 8005636:	6123      	str	r3, [r4, #16]
 8005638:	2300      	movs	r3, #0
 800563a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800563e:	e7a8      	b.n	8005592 <_printf_i+0x152>
 8005640:	462a      	mov	r2, r5
 8005642:	4649      	mov	r1, r9
 8005644:	4640      	mov	r0, r8
 8005646:	6923      	ldr	r3, [r4, #16]
 8005648:	47d0      	blx	sl
 800564a:	3001      	adds	r0, #1
 800564c:	d0ab      	beq.n	80055a6 <_printf_i+0x166>
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	079b      	lsls	r3, r3, #30
 8005652:	d413      	bmi.n	800567c <_printf_i+0x23c>
 8005654:	68e0      	ldr	r0, [r4, #12]
 8005656:	9b03      	ldr	r3, [sp, #12]
 8005658:	4298      	cmp	r0, r3
 800565a:	bfb8      	it	lt
 800565c:	4618      	movlt	r0, r3
 800565e:	e7a4      	b.n	80055aa <_printf_i+0x16a>
 8005660:	2301      	movs	r3, #1
 8005662:	4632      	mov	r2, r6
 8005664:	4649      	mov	r1, r9
 8005666:	4640      	mov	r0, r8
 8005668:	47d0      	blx	sl
 800566a:	3001      	adds	r0, #1
 800566c:	d09b      	beq.n	80055a6 <_printf_i+0x166>
 800566e:	3501      	adds	r5, #1
 8005670:	68e3      	ldr	r3, [r4, #12]
 8005672:	9903      	ldr	r1, [sp, #12]
 8005674:	1a5b      	subs	r3, r3, r1
 8005676:	42ab      	cmp	r3, r5
 8005678:	dcf2      	bgt.n	8005660 <_printf_i+0x220>
 800567a:	e7eb      	b.n	8005654 <_printf_i+0x214>
 800567c:	2500      	movs	r5, #0
 800567e:	f104 0619 	add.w	r6, r4, #25
 8005682:	e7f5      	b.n	8005670 <_printf_i+0x230>
 8005684:	08007cde 	.word	0x08007cde
 8005688:	08007cef 	.word	0x08007cef

0800568c <siprintf>:
 800568c:	b40e      	push	{r1, r2, r3}
 800568e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005692:	b500      	push	{lr}
 8005694:	b09c      	sub	sp, #112	; 0x70
 8005696:	ab1d      	add	r3, sp, #116	; 0x74
 8005698:	9002      	str	r0, [sp, #8]
 800569a:	9006      	str	r0, [sp, #24]
 800569c:	9107      	str	r1, [sp, #28]
 800569e:	9104      	str	r1, [sp, #16]
 80056a0:	4808      	ldr	r0, [pc, #32]	; (80056c4 <siprintf+0x38>)
 80056a2:	4909      	ldr	r1, [pc, #36]	; (80056c8 <siprintf+0x3c>)
 80056a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80056a8:	9105      	str	r1, [sp, #20]
 80056aa:	6800      	ldr	r0, [r0, #0]
 80056ac:	a902      	add	r1, sp, #8
 80056ae:	9301      	str	r3, [sp, #4]
 80056b0:	f001 fb7e 	bl	8006db0 <_svfiprintf_r>
 80056b4:	2200      	movs	r2, #0
 80056b6:	9b02      	ldr	r3, [sp, #8]
 80056b8:	701a      	strb	r2, [r3, #0]
 80056ba:	b01c      	add	sp, #112	; 0x70
 80056bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80056c0:	b003      	add	sp, #12
 80056c2:	4770      	bx	lr
 80056c4:	20000020 	.word	0x20000020
 80056c8:	ffff0208 	.word	0xffff0208

080056cc <quorem>:
 80056cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d0:	6903      	ldr	r3, [r0, #16]
 80056d2:	690c      	ldr	r4, [r1, #16]
 80056d4:	4607      	mov	r7, r0
 80056d6:	42a3      	cmp	r3, r4
 80056d8:	f2c0 8082 	blt.w	80057e0 <quorem+0x114>
 80056dc:	3c01      	subs	r4, #1
 80056de:	f100 0514 	add.w	r5, r0, #20
 80056e2:	f101 0814 	add.w	r8, r1, #20
 80056e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056ea:	9301      	str	r3, [sp, #4]
 80056ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056f4:	3301      	adds	r3, #1
 80056f6:	429a      	cmp	r2, r3
 80056f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80056fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005700:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005704:	d331      	bcc.n	800576a <quorem+0x9e>
 8005706:	f04f 0e00 	mov.w	lr, #0
 800570a:	4640      	mov	r0, r8
 800570c:	46ac      	mov	ip, r5
 800570e:	46f2      	mov	sl, lr
 8005710:	f850 2b04 	ldr.w	r2, [r0], #4
 8005714:	b293      	uxth	r3, r2
 8005716:	fb06 e303 	mla	r3, r6, r3, lr
 800571a:	0c12      	lsrs	r2, r2, #16
 800571c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005720:	b29b      	uxth	r3, r3
 8005722:	fb06 e202 	mla	r2, r6, r2, lr
 8005726:	ebaa 0303 	sub.w	r3, sl, r3
 800572a:	f8dc a000 	ldr.w	sl, [ip]
 800572e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005732:	fa1f fa8a 	uxth.w	sl, sl
 8005736:	4453      	add	r3, sl
 8005738:	f8dc a000 	ldr.w	sl, [ip]
 800573c:	b292      	uxth	r2, r2
 800573e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005742:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005746:	b29b      	uxth	r3, r3
 8005748:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800574c:	4581      	cmp	r9, r0
 800574e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005752:	f84c 3b04 	str.w	r3, [ip], #4
 8005756:	d2db      	bcs.n	8005710 <quorem+0x44>
 8005758:	f855 300b 	ldr.w	r3, [r5, fp]
 800575c:	b92b      	cbnz	r3, 800576a <quorem+0x9e>
 800575e:	9b01      	ldr	r3, [sp, #4]
 8005760:	3b04      	subs	r3, #4
 8005762:	429d      	cmp	r5, r3
 8005764:	461a      	mov	r2, r3
 8005766:	d32f      	bcc.n	80057c8 <quorem+0xfc>
 8005768:	613c      	str	r4, [r7, #16]
 800576a:	4638      	mov	r0, r7
 800576c:	f001 f8d0 	bl	8006910 <__mcmp>
 8005770:	2800      	cmp	r0, #0
 8005772:	db25      	blt.n	80057c0 <quorem+0xf4>
 8005774:	4628      	mov	r0, r5
 8005776:	f04f 0c00 	mov.w	ip, #0
 800577a:	3601      	adds	r6, #1
 800577c:	f858 1b04 	ldr.w	r1, [r8], #4
 8005780:	f8d0 e000 	ldr.w	lr, [r0]
 8005784:	b28b      	uxth	r3, r1
 8005786:	ebac 0303 	sub.w	r3, ip, r3
 800578a:	fa1f f28e 	uxth.w	r2, lr
 800578e:	4413      	add	r3, r2
 8005790:	0c0a      	lsrs	r2, r1, #16
 8005792:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005796:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800579a:	b29b      	uxth	r3, r3
 800579c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057a0:	45c1      	cmp	r9, r8
 80057a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80057a6:	f840 3b04 	str.w	r3, [r0], #4
 80057aa:	d2e7      	bcs.n	800577c <quorem+0xb0>
 80057ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057b4:	b922      	cbnz	r2, 80057c0 <quorem+0xf4>
 80057b6:	3b04      	subs	r3, #4
 80057b8:	429d      	cmp	r5, r3
 80057ba:	461a      	mov	r2, r3
 80057bc:	d30a      	bcc.n	80057d4 <quorem+0x108>
 80057be:	613c      	str	r4, [r7, #16]
 80057c0:	4630      	mov	r0, r6
 80057c2:	b003      	add	sp, #12
 80057c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c8:	6812      	ldr	r2, [r2, #0]
 80057ca:	3b04      	subs	r3, #4
 80057cc:	2a00      	cmp	r2, #0
 80057ce:	d1cb      	bne.n	8005768 <quorem+0x9c>
 80057d0:	3c01      	subs	r4, #1
 80057d2:	e7c6      	b.n	8005762 <quorem+0x96>
 80057d4:	6812      	ldr	r2, [r2, #0]
 80057d6:	3b04      	subs	r3, #4
 80057d8:	2a00      	cmp	r2, #0
 80057da:	d1f0      	bne.n	80057be <quorem+0xf2>
 80057dc:	3c01      	subs	r4, #1
 80057de:	e7eb      	b.n	80057b8 <quorem+0xec>
 80057e0:	2000      	movs	r0, #0
 80057e2:	e7ee      	b.n	80057c2 <quorem+0xf6>
 80057e4:	0000      	movs	r0, r0
	...

080057e8 <_dtoa_r>:
 80057e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ec:	4616      	mov	r6, r2
 80057ee:	461f      	mov	r7, r3
 80057f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80057f2:	b099      	sub	sp, #100	; 0x64
 80057f4:	4605      	mov	r5, r0
 80057f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80057fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80057fe:	b974      	cbnz	r4, 800581e <_dtoa_r+0x36>
 8005800:	2010      	movs	r0, #16
 8005802:	f000 fde3 	bl	80063cc <malloc>
 8005806:	4602      	mov	r2, r0
 8005808:	6268      	str	r0, [r5, #36]	; 0x24
 800580a:	b920      	cbnz	r0, 8005816 <_dtoa_r+0x2e>
 800580c:	21ea      	movs	r1, #234	; 0xea
 800580e:	4ba8      	ldr	r3, [pc, #672]	; (8005ab0 <_dtoa_r+0x2c8>)
 8005810:	48a8      	ldr	r0, [pc, #672]	; (8005ab4 <_dtoa_r+0x2cc>)
 8005812:	f001 fbdd 	bl	8006fd0 <__assert_func>
 8005816:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800581a:	6004      	str	r4, [r0, #0]
 800581c:	60c4      	str	r4, [r0, #12]
 800581e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005820:	6819      	ldr	r1, [r3, #0]
 8005822:	b151      	cbz	r1, 800583a <_dtoa_r+0x52>
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	2301      	movs	r3, #1
 8005828:	4093      	lsls	r3, r2
 800582a:	604a      	str	r2, [r1, #4]
 800582c:	608b      	str	r3, [r1, #8]
 800582e:	4628      	mov	r0, r5
 8005830:	f000 fe30 	bl	8006494 <_Bfree>
 8005834:	2200      	movs	r2, #0
 8005836:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	1e3b      	subs	r3, r7, #0
 800583c:	bfaf      	iteee	ge
 800583e:	2300      	movge	r3, #0
 8005840:	2201      	movlt	r2, #1
 8005842:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005846:	9305      	strlt	r3, [sp, #20]
 8005848:	bfa8      	it	ge
 800584a:	f8c8 3000 	strge.w	r3, [r8]
 800584e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005852:	4b99      	ldr	r3, [pc, #612]	; (8005ab8 <_dtoa_r+0x2d0>)
 8005854:	bfb8      	it	lt
 8005856:	f8c8 2000 	strlt.w	r2, [r8]
 800585a:	ea33 0309 	bics.w	r3, r3, r9
 800585e:	d119      	bne.n	8005894 <_dtoa_r+0xac>
 8005860:	f242 730f 	movw	r3, #9999	; 0x270f
 8005864:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800586c:	4333      	orrs	r3, r6
 800586e:	f000 857f 	beq.w	8006370 <_dtoa_r+0xb88>
 8005872:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005874:	b953      	cbnz	r3, 800588c <_dtoa_r+0xa4>
 8005876:	4b91      	ldr	r3, [pc, #580]	; (8005abc <_dtoa_r+0x2d4>)
 8005878:	e022      	b.n	80058c0 <_dtoa_r+0xd8>
 800587a:	4b91      	ldr	r3, [pc, #580]	; (8005ac0 <_dtoa_r+0x2d8>)
 800587c:	9303      	str	r3, [sp, #12]
 800587e:	3308      	adds	r3, #8
 8005880:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	9803      	ldr	r0, [sp, #12]
 8005886:	b019      	add	sp, #100	; 0x64
 8005888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800588c:	4b8b      	ldr	r3, [pc, #556]	; (8005abc <_dtoa_r+0x2d4>)
 800588e:	9303      	str	r3, [sp, #12]
 8005890:	3303      	adds	r3, #3
 8005892:	e7f5      	b.n	8005880 <_dtoa_r+0x98>
 8005894:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005898:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800589c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058a0:	2200      	movs	r2, #0
 80058a2:	2300      	movs	r3, #0
 80058a4:	f7fb f880 	bl	80009a8 <__aeabi_dcmpeq>
 80058a8:	4680      	mov	r8, r0
 80058aa:	b158      	cbz	r0, 80058c4 <_dtoa_r+0xdc>
 80058ac:	2301      	movs	r3, #1
 80058ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 8558 	beq.w	800636a <_dtoa_r+0xb82>
 80058ba:	4882      	ldr	r0, [pc, #520]	; (8005ac4 <_dtoa_r+0x2dc>)
 80058bc:	6018      	str	r0, [r3, #0]
 80058be:	1e43      	subs	r3, r0, #1
 80058c0:	9303      	str	r3, [sp, #12]
 80058c2:	e7df      	b.n	8005884 <_dtoa_r+0x9c>
 80058c4:	ab16      	add	r3, sp, #88	; 0x58
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	ab17      	add	r3, sp, #92	; 0x5c
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	4628      	mov	r0, r5
 80058ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80058d2:	f001 f8c5 	bl	8006a60 <__d2b>
 80058d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80058da:	4683      	mov	fp, r0
 80058dc:	2c00      	cmp	r4, #0
 80058de:	d07f      	beq.n	80059e0 <_dtoa_r+0x1f8>
 80058e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80058ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80058f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80058f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80058fa:	2200      	movs	r2, #0
 80058fc:	4b72      	ldr	r3, [pc, #456]	; (8005ac8 <_dtoa_r+0x2e0>)
 80058fe:	f7fa fc33 	bl	8000168 <__aeabi_dsub>
 8005902:	a365      	add	r3, pc, #404	; (adr r3, 8005a98 <_dtoa_r+0x2b0>)
 8005904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005908:	f7fa fde6 	bl	80004d8 <__aeabi_dmul>
 800590c:	a364      	add	r3, pc, #400	; (adr r3, 8005aa0 <_dtoa_r+0x2b8>)
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	f7fa fc2b 	bl	800016c <__adddf3>
 8005916:	4606      	mov	r6, r0
 8005918:	4620      	mov	r0, r4
 800591a:	460f      	mov	r7, r1
 800591c:	f7fa fd72 	bl	8000404 <__aeabi_i2d>
 8005920:	a361      	add	r3, pc, #388	; (adr r3, 8005aa8 <_dtoa_r+0x2c0>)
 8005922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005926:	f7fa fdd7 	bl	80004d8 <__aeabi_dmul>
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	4630      	mov	r0, r6
 8005930:	4639      	mov	r1, r7
 8005932:	f7fa fc1b 	bl	800016c <__adddf3>
 8005936:	4606      	mov	r6, r0
 8005938:	460f      	mov	r7, r1
 800593a:	f7fb f87d 	bl	8000a38 <__aeabi_d2iz>
 800593e:	2200      	movs	r2, #0
 8005940:	4682      	mov	sl, r0
 8005942:	2300      	movs	r3, #0
 8005944:	4630      	mov	r0, r6
 8005946:	4639      	mov	r1, r7
 8005948:	f7fb f838 	bl	80009bc <__aeabi_dcmplt>
 800594c:	b148      	cbz	r0, 8005962 <_dtoa_r+0x17a>
 800594e:	4650      	mov	r0, sl
 8005950:	f7fa fd58 	bl	8000404 <__aeabi_i2d>
 8005954:	4632      	mov	r2, r6
 8005956:	463b      	mov	r3, r7
 8005958:	f7fb f826 	bl	80009a8 <__aeabi_dcmpeq>
 800595c:	b908      	cbnz	r0, 8005962 <_dtoa_r+0x17a>
 800595e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005962:	f1ba 0f16 	cmp.w	sl, #22
 8005966:	d858      	bhi.n	8005a1a <_dtoa_r+0x232>
 8005968:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800596c:	4b57      	ldr	r3, [pc, #348]	; (8005acc <_dtoa_r+0x2e4>)
 800596e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005976:	f7fb f821 	bl	80009bc <__aeabi_dcmplt>
 800597a:	2800      	cmp	r0, #0
 800597c:	d04f      	beq.n	8005a1e <_dtoa_r+0x236>
 800597e:	2300      	movs	r3, #0
 8005980:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005984:	930f      	str	r3, [sp, #60]	; 0x3c
 8005986:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005988:	1b1c      	subs	r4, r3, r4
 800598a:	1e63      	subs	r3, r4, #1
 800598c:	9309      	str	r3, [sp, #36]	; 0x24
 800598e:	bf49      	itett	mi
 8005990:	f1c4 0301 	rsbmi	r3, r4, #1
 8005994:	2300      	movpl	r3, #0
 8005996:	9306      	strmi	r3, [sp, #24]
 8005998:	2300      	movmi	r3, #0
 800599a:	bf54      	ite	pl
 800599c:	9306      	strpl	r3, [sp, #24]
 800599e:	9309      	strmi	r3, [sp, #36]	; 0x24
 80059a0:	f1ba 0f00 	cmp.w	sl, #0
 80059a4:	db3d      	blt.n	8005a22 <_dtoa_r+0x23a>
 80059a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80059ac:	4453      	add	r3, sl
 80059ae:	9309      	str	r3, [sp, #36]	; 0x24
 80059b0:	2300      	movs	r3, #0
 80059b2:	930a      	str	r3, [sp, #40]	; 0x28
 80059b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059b6:	2b09      	cmp	r3, #9
 80059b8:	f200 808c 	bhi.w	8005ad4 <_dtoa_r+0x2ec>
 80059bc:	2b05      	cmp	r3, #5
 80059be:	bfc4      	itt	gt
 80059c0:	3b04      	subgt	r3, #4
 80059c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80059c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059c6:	bfc8      	it	gt
 80059c8:	2400      	movgt	r4, #0
 80059ca:	f1a3 0302 	sub.w	r3, r3, #2
 80059ce:	bfd8      	it	le
 80059d0:	2401      	movle	r4, #1
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	f200 808a 	bhi.w	8005aec <_dtoa_r+0x304>
 80059d8:	e8df f003 	tbb	[pc, r3]
 80059dc:	5b4d4f2d 	.word	0x5b4d4f2d
 80059e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80059e4:	441c      	add	r4, r3
 80059e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	bfc3      	ittte	gt
 80059ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80059f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80059f6:	fa09 f303 	lslgt.w	r3, r9, r3
 80059fa:	f1c3 0320 	rsble	r3, r3, #32
 80059fe:	bfc6      	itte	gt
 8005a00:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005a04:	4318      	orrgt	r0, r3
 8005a06:	fa06 f003 	lslle.w	r0, r6, r3
 8005a0a:	f7fa fceb 	bl	80003e4 <__aeabi_ui2d>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005a14:	3c01      	subs	r4, #1
 8005a16:	9313      	str	r3, [sp, #76]	; 0x4c
 8005a18:	e76f      	b.n	80058fa <_dtoa_r+0x112>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e7b2      	b.n	8005984 <_dtoa_r+0x19c>
 8005a1e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005a20:	e7b1      	b.n	8005986 <_dtoa_r+0x19e>
 8005a22:	9b06      	ldr	r3, [sp, #24]
 8005a24:	eba3 030a 	sub.w	r3, r3, sl
 8005a28:	9306      	str	r3, [sp, #24]
 8005a2a:	f1ca 0300 	rsb	r3, sl, #0
 8005a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8005a30:	2300      	movs	r3, #0
 8005a32:	930e      	str	r3, [sp, #56]	; 0x38
 8005a34:	e7be      	b.n	80059b4 <_dtoa_r+0x1cc>
 8005a36:	2300      	movs	r3, #0
 8005a38:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	dc58      	bgt.n	8005af2 <_dtoa_r+0x30a>
 8005a40:	f04f 0901 	mov.w	r9, #1
 8005a44:	464b      	mov	r3, r9
 8005a46:	f8cd 9020 	str.w	r9, [sp, #32]
 8005a4a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005a4e:	2200      	movs	r2, #0
 8005a50:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005a52:	6042      	str	r2, [r0, #4]
 8005a54:	2204      	movs	r2, #4
 8005a56:	f102 0614 	add.w	r6, r2, #20
 8005a5a:	429e      	cmp	r6, r3
 8005a5c:	6841      	ldr	r1, [r0, #4]
 8005a5e:	d94e      	bls.n	8005afe <_dtoa_r+0x316>
 8005a60:	4628      	mov	r0, r5
 8005a62:	f000 fcd7 	bl	8006414 <_Balloc>
 8005a66:	9003      	str	r0, [sp, #12]
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d14c      	bne.n	8005b06 <_dtoa_r+0x31e>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005a72:	4b17      	ldr	r3, [pc, #92]	; (8005ad0 <_dtoa_r+0x2e8>)
 8005a74:	e6cc      	b.n	8005810 <_dtoa_r+0x28>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e7de      	b.n	8005a38 <_dtoa_r+0x250>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a80:	eb0a 0903 	add.w	r9, sl, r3
 8005a84:	f109 0301 	add.w	r3, r9, #1
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	9308      	str	r3, [sp, #32]
 8005a8c:	bfb8      	it	lt
 8005a8e:	2301      	movlt	r3, #1
 8005a90:	e7dd      	b.n	8005a4e <_dtoa_r+0x266>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e7f2      	b.n	8005a7c <_dtoa_r+0x294>
 8005a96:	bf00      	nop
 8005a98:	636f4361 	.word	0x636f4361
 8005a9c:	3fd287a7 	.word	0x3fd287a7
 8005aa0:	8b60c8b3 	.word	0x8b60c8b3
 8005aa4:	3fc68a28 	.word	0x3fc68a28
 8005aa8:	509f79fb 	.word	0x509f79fb
 8005aac:	3fd34413 	.word	0x3fd34413
 8005ab0:	08007d0d 	.word	0x08007d0d
 8005ab4:	08007d24 	.word	0x08007d24
 8005ab8:	7ff00000 	.word	0x7ff00000
 8005abc:	08007d09 	.word	0x08007d09
 8005ac0:	08007d00 	.word	0x08007d00
 8005ac4:	08007cdd 	.word	0x08007cdd
 8005ac8:	3ff80000 	.word	0x3ff80000
 8005acc:	08007e18 	.word	0x08007e18
 8005ad0:	08007d7f 	.word	0x08007d7f
 8005ad4:	2401      	movs	r4, #1
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	940b      	str	r4, [sp, #44]	; 0x2c
 8005ada:	9322      	str	r3, [sp, #136]	; 0x88
 8005adc:	f04f 39ff 	mov.w	r9, #4294967295
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2312      	movs	r3, #18
 8005ae4:	f8cd 9020 	str.w	r9, [sp, #32]
 8005ae8:	9223      	str	r2, [sp, #140]	; 0x8c
 8005aea:	e7b0      	b.n	8005a4e <_dtoa_r+0x266>
 8005aec:	2301      	movs	r3, #1
 8005aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8005af0:	e7f4      	b.n	8005adc <_dtoa_r+0x2f4>
 8005af2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005af6:	464b      	mov	r3, r9
 8005af8:	f8cd 9020 	str.w	r9, [sp, #32]
 8005afc:	e7a7      	b.n	8005a4e <_dtoa_r+0x266>
 8005afe:	3101      	adds	r1, #1
 8005b00:	6041      	str	r1, [r0, #4]
 8005b02:	0052      	lsls	r2, r2, #1
 8005b04:	e7a7      	b.n	8005a56 <_dtoa_r+0x26e>
 8005b06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b08:	9a03      	ldr	r2, [sp, #12]
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	9b08      	ldr	r3, [sp, #32]
 8005b0e:	2b0e      	cmp	r3, #14
 8005b10:	f200 80a8 	bhi.w	8005c64 <_dtoa_r+0x47c>
 8005b14:	2c00      	cmp	r4, #0
 8005b16:	f000 80a5 	beq.w	8005c64 <_dtoa_r+0x47c>
 8005b1a:	f1ba 0f00 	cmp.w	sl, #0
 8005b1e:	dd34      	ble.n	8005b8a <_dtoa_r+0x3a2>
 8005b20:	4a9a      	ldr	r2, [pc, #616]	; (8005d8c <_dtoa_r+0x5a4>)
 8005b22:	f00a 030f 	and.w	r3, sl, #15
 8005b26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005b2a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005b2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b36:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005b3a:	d016      	beq.n	8005b6a <_dtoa_r+0x382>
 8005b3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b40:	4b93      	ldr	r3, [pc, #588]	; (8005d90 <_dtoa_r+0x5a8>)
 8005b42:	2703      	movs	r7, #3
 8005b44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b48:	f7fa fdf0 	bl	800072c <__aeabi_ddiv>
 8005b4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b50:	f004 040f 	and.w	r4, r4, #15
 8005b54:	4e8e      	ldr	r6, [pc, #568]	; (8005d90 <_dtoa_r+0x5a8>)
 8005b56:	b954      	cbnz	r4, 8005b6e <_dtoa_r+0x386>
 8005b58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b60:	f7fa fde4 	bl	800072c <__aeabi_ddiv>
 8005b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b68:	e029      	b.n	8005bbe <_dtoa_r+0x3d6>
 8005b6a:	2702      	movs	r7, #2
 8005b6c:	e7f2      	b.n	8005b54 <_dtoa_r+0x36c>
 8005b6e:	07e1      	lsls	r1, r4, #31
 8005b70:	d508      	bpl.n	8005b84 <_dtoa_r+0x39c>
 8005b72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b7a:	f7fa fcad 	bl	80004d8 <__aeabi_dmul>
 8005b7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b82:	3701      	adds	r7, #1
 8005b84:	1064      	asrs	r4, r4, #1
 8005b86:	3608      	adds	r6, #8
 8005b88:	e7e5      	b.n	8005b56 <_dtoa_r+0x36e>
 8005b8a:	f000 80a5 	beq.w	8005cd8 <_dtoa_r+0x4f0>
 8005b8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b92:	f1ca 0400 	rsb	r4, sl, #0
 8005b96:	4b7d      	ldr	r3, [pc, #500]	; (8005d8c <_dtoa_r+0x5a4>)
 8005b98:	f004 020f 	and.w	r2, r4, #15
 8005b9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	f7fa fc98 	bl	80004d8 <__aeabi_dmul>
 8005ba8:	2702      	movs	r7, #2
 8005baa:	2300      	movs	r3, #0
 8005bac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bb0:	4e77      	ldr	r6, [pc, #476]	; (8005d90 <_dtoa_r+0x5a8>)
 8005bb2:	1124      	asrs	r4, r4, #4
 8005bb4:	2c00      	cmp	r4, #0
 8005bb6:	f040 8084 	bne.w	8005cc2 <_dtoa_r+0x4da>
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1d2      	bne.n	8005b64 <_dtoa_r+0x37c>
 8005bbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 808b 	beq.w	8005cdc <_dtoa_r+0x4f4>
 8005bc6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005bca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005bce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4b6f      	ldr	r3, [pc, #444]	; (8005d94 <_dtoa_r+0x5ac>)
 8005bd6:	f7fa fef1 	bl	80009bc <__aeabi_dcmplt>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d07e      	beq.n	8005cdc <_dtoa_r+0x4f4>
 8005bde:	9b08      	ldr	r3, [sp, #32]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d07b      	beq.n	8005cdc <_dtoa_r+0x4f4>
 8005be4:	f1b9 0f00 	cmp.w	r9, #0
 8005be8:	dd38      	ble.n	8005c5c <_dtoa_r+0x474>
 8005bea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bee:	2200      	movs	r2, #0
 8005bf0:	4b69      	ldr	r3, [pc, #420]	; (8005d98 <_dtoa_r+0x5b0>)
 8005bf2:	f7fa fc71 	bl	80004d8 <__aeabi_dmul>
 8005bf6:	464c      	mov	r4, r9
 8005bf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bfc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005c00:	3701      	adds	r7, #1
 8005c02:	4638      	mov	r0, r7
 8005c04:	f7fa fbfe 	bl	8000404 <__aeabi_i2d>
 8005c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c0c:	f7fa fc64 	bl	80004d8 <__aeabi_dmul>
 8005c10:	2200      	movs	r2, #0
 8005c12:	4b62      	ldr	r3, [pc, #392]	; (8005d9c <_dtoa_r+0x5b4>)
 8005c14:	f7fa faaa 	bl	800016c <__adddf3>
 8005c18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005c1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c20:	9611      	str	r6, [sp, #68]	; 0x44
 8005c22:	2c00      	cmp	r4, #0
 8005c24:	d15d      	bne.n	8005ce2 <_dtoa_r+0x4fa>
 8005c26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	4b5c      	ldr	r3, [pc, #368]	; (8005da0 <_dtoa_r+0x5b8>)
 8005c2e:	f7fa fa9b 	bl	8000168 <__aeabi_dsub>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c3a:	4633      	mov	r3, r6
 8005c3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c3e:	f7fa fedb 	bl	80009f8 <__aeabi_dcmpgt>
 8005c42:	2800      	cmp	r0, #0
 8005c44:	f040 829c 	bne.w	8006180 <_dtoa_r+0x998>
 8005c48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c4e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005c52:	f7fa feb3 	bl	80009bc <__aeabi_dcmplt>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	f040 8290 	bne.w	800617c <_dtoa_r+0x994>
 8005c5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005c60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f2c0 8152 	blt.w	8005f10 <_dtoa_r+0x728>
 8005c6c:	f1ba 0f0e 	cmp.w	sl, #14
 8005c70:	f300 814e 	bgt.w	8005f10 <_dtoa_r+0x728>
 8005c74:	4b45      	ldr	r3, [pc, #276]	; (8005d8c <_dtoa_r+0x5a4>)
 8005c76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c7e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005c82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f280 80db 	bge.w	8005e40 <_dtoa_r+0x658>
 8005c8a:	9b08      	ldr	r3, [sp, #32]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f300 80d7 	bgt.w	8005e40 <_dtoa_r+0x658>
 8005c92:	f040 8272 	bne.w	800617a <_dtoa_r+0x992>
 8005c96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	4b40      	ldr	r3, [pc, #256]	; (8005da0 <_dtoa_r+0x5b8>)
 8005c9e:	f7fa fc1b 	bl	80004d8 <__aeabi_dmul>
 8005ca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ca6:	f7fa fe9d 	bl	80009e4 <__aeabi_dcmpge>
 8005caa:	9c08      	ldr	r4, [sp, #32]
 8005cac:	4626      	mov	r6, r4
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	f040 8248 	bne.w	8006144 <_dtoa_r+0x95c>
 8005cb4:	2331      	movs	r3, #49	; 0x31
 8005cb6:	9f03      	ldr	r7, [sp, #12]
 8005cb8:	f10a 0a01 	add.w	sl, sl, #1
 8005cbc:	f807 3b01 	strb.w	r3, [r7], #1
 8005cc0:	e244      	b.n	800614c <_dtoa_r+0x964>
 8005cc2:	07e2      	lsls	r2, r4, #31
 8005cc4:	d505      	bpl.n	8005cd2 <_dtoa_r+0x4ea>
 8005cc6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cca:	f7fa fc05 	bl	80004d8 <__aeabi_dmul>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	3701      	adds	r7, #1
 8005cd2:	1064      	asrs	r4, r4, #1
 8005cd4:	3608      	adds	r6, #8
 8005cd6:	e76d      	b.n	8005bb4 <_dtoa_r+0x3cc>
 8005cd8:	2702      	movs	r7, #2
 8005cda:	e770      	b.n	8005bbe <_dtoa_r+0x3d6>
 8005cdc:	46d0      	mov	r8, sl
 8005cde:	9c08      	ldr	r4, [sp, #32]
 8005ce0:	e78f      	b.n	8005c02 <_dtoa_r+0x41a>
 8005ce2:	9903      	ldr	r1, [sp, #12]
 8005ce4:	4b29      	ldr	r3, [pc, #164]	; (8005d8c <_dtoa_r+0x5a4>)
 8005ce6:	4421      	add	r1, r4
 8005ce8:	9112      	str	r1, [sp, #72]	; 0x48
 8005cea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cf0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005cf4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cf8:	2900      	cmp	r1, #0
 8005cfa:	d055      	beq.n	8005da8 <_dtoa_r+0x5c0>
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	4929      	ldr	r1, [pc, #164]	; (8005da4 <_dtoa_r+0x5bc>)
 8005d00:	f7fa fd14 	bl	800072c <__aeabi_ddiv>
 8005d04:	463b      	mov	r3, r7
 8005d06:	4632      	mov	r2, r6
 8005d08:	f7fa fa2e 	bl	8000168 <__aeabi_dsub>
 8005d0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d10:	9f03      	ldr	r7, [sp, #12]
 8005d12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d16:	f7fa fe8f 	bl	8000a38 <__aeabi_d2iz>
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	f7fa fb72 	bl	8000404 <__aeabi_i2d>
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d28:	f7fa fa1e 	bl	8000168 <__aeabi_dsub>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	3430      	adds	r4, #48	; 0x30
 8005d32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d3a:	f807 4b01 	strb.w	r4, [r7], #1
 8005d3e:	f7fa fe3d 	bl	80009bc <__aeabi_dcmplt>
 8005d42:	2800      	cmp	r0, #0
 8005d44:	d174      	bne.n	8005e30 <_dtoa_r+0x648>
 8005d46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	4911      	ldr	r1, [pc, #68]	; (8005d94 <_dtoa_r+0x5ac>)
 8005d4e:	f7fa fa0b 	bl	8000168 <__aeabi_dsub>
 8005d52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d56:	f7fa fe31 	bl	80009bc <__aeabi_dcmplt>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	f040 80b7 	bne.w	8005ece <_dtoa_r+0x6e6>
 8005d60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d62:	429f      	cmp	r7, r3
 8005d64:	f43f af7a 	beq.w	8005c5c <_dtoa_r+0x474>
 8005d68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	4b0a      	ldr	r3, [pc, #40]	; (8005d98 <_dtoa_r+0x5b0>)
 8005d70:	f7fa fbb2 	bl	80004d8 <__aeabi_dmul>
 8005d74:	2200      	movs	r2, #0
 8005d76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d7e:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <_dtoa_r+0x5b0>)
 8005d80:	f7fa fbaa 	bl	80004d8 <__aeabi_dmul>
 8005d84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d88:	e7c3      	b.n	8005d12 <_dtoa_r+0x52a>
 8005d8a:	bf00      	nop
 8005d8c:	08007e18 	.word	0x08007e18
 8005d90:	08007df0 	.word	0x08007df0
 8005d94:	3ff00000 	.word	0x3ff00000
 8005d98:	40240000 	.word	0x40240000
 8005d9c:	401c0000 	.word	0x401c0000
 8005da0:	40140000 	.word	0x40140000
 8005da4:	3fe00000 	.word	0x3fe00000
 8005da8:	4630      	mov	r0, r6
 8005daa:	4639      	mov	r1, r7
 8005dac:	f7fa fb94 	bl	80004d8 <__aeabi_dmul>
 8005db0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005db2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005db6:	9c03      	ldr	r4, [sp, #12]
 8005db8:	9314      	str	r3, [sp, #80]	; 0x50
 8005dba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dbe:	f7fa fe3b 	bl	8000a38 <__aeabi_d2iz>
 8005dc2:	9015      	str	r0, [sp, #84]	; 0x54
 8005dc4:	f7fa fb1e 	bl	8000404 <__aeabi_i2d>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dd0:	f7fa f9ca 	bl	8000168 <__aeabi_dsub>
 8005dd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	3330      	adds	r3, #48	; 0x30
 8005dda:	f804 3b01 	strb.w	r3, [r4], #1
 8005dde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005de0:	460f      	mov	r7, r1
 8005de2:	429c      	cmp	r4, r3
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	d124      	bne.n	8005e34 <_dtoa_r+0x64c>
 8005dea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005dee:	4bb0      	ldr	r3, [pc, #704]	; (80060b0 <_dtoa_r+0x8c8>)
 8005df0:	f7fa f9bc 	bl	800016c <__adddf3>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	4630      	mov	r0, r6
 8005dfa:	4639      	mov	r1, r7
 8005dfc:	f7fa fdfc 	bl	80009f8 <__aeabi_dcmpgt>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d163      	bne.n	8005ecc <_dtoa_r+0x6e4>
 8005e04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e08:	2000      	movs	r0, #0
 8005e0a:	49a9      	ldr	r1, [pc, #676]	; (80060b0 <_dtoa_r+0x8c8>)
 8005e0c:	f7fa f9ac 	bl	8000168 <__aeabi_dsub>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4630      	mov	r0, r6
 8005e16:	4639      	mov	r1, r7
 8005e18:	f7fa fdd0 	bl	80009bc <__aeabi_dcmplt>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	f43f af1d 	beq.w	8005c5c <_dtoa_r+0x474>
 8005e22:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005e24:	1e7b      	subs	r3, r7, #1
 8005e26:	9314      	str	r3, [sp, #80]	; 0x50
 8005e28:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005e2c:	2b30      	cmp	r3, #48	; 0x30
 8005e2e:	d0f8      	beq.n	8005e22 <_dtoa_r+0x63a>
 8005e30:	46c2      	mov	sl, r8
 8005e32:	e03b      	b.n	8005eac <_dtoa_r+0x6c4>
 8005e34:	4b9f      	ldr	r3, [pc, #636]	; (80060b4 <_dtoa_r+0x8cc>)
 8005e36:	f7fa fb4f 	bl	80004d8 <__aeabi_dmul>
 8005e3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e3e:	e7bc      	b.n	8005dba <_dtoa_r+0x5d2>
 8005e40:	9f03      	ldr	r7, [sp, #12]
 8005e42:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005e46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	f7fa fc6d 	bl	800072c <__aeabi_ddiv>
 8005e52:	f7fa fdf1 	bl	8000a38 <__aeabi_d2iz>
 8005e56:	4604      	mov	r4, r0
 8005e58:	f7fa fad4 	bl	8000404 <__aeabi_i2d>
 8005e5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e60:	f7fa fb3a 	bl	80004d8 <__aeabi_dmul>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4640      	mov	r0, r8
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	f7fa f97c 	bl	8000168 <__aeabi_dsub>
 8005e70:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005e74:	f807 6b01 	strb.w	r6, [r7], #1
 8005e78:	9e03      	ldr	r6, [sp, #12]
 8005e7a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005e7e:	1bbe      	subs	r6, r7, r6
 8005e80:	45b4      	cmp	ip, r6
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	d136      	bne.n	8005ef6 <_dtoa_r+0x70e>
 8005e88:	f7fa f970 	bl	800016c <__adddf3>
 8005e8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e90:	4680      	mov	r8, r0
 8005e92:	4689      	mov	r9, r1
 8005e94:	f7fa fdb0 	bl	80009f8 <__aeabi_dcmpgt>
 8005e98:	bb58      	cbnz	r0, 8005ef2 <_dtoa_r+0x70a>
 8005e9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	f7fa fd81 	bl	80009a8 <__aeabi_dcmpeq>
 8005ea6:	b108      	cbz	r0, 8005eac <_dtoa_r+0x6c4>
 8005ea8:	07e1      	lsls	r1, r4, #31
 8005eaa:	d422      	bmi.n	8005ef2 <_dtoa_r+0x70a>
 8005eac:	4628      	mov	r0, r5
 8005eae:	4659      	mov	r1, fp
 8005eb0:	f000 faf0 	bl	8006494 <_Bfree>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	703b      	strb	r3, [r7, #0]
 8005eb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005eba:	f10a 0001 	add.w	r0, sl, #1
 8005ebe:	6018      	str	r0, [r3, #0]
 8005ec0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f43f acde 	beq.w	8005884 <_dtoa_r+0x9c>
 8005ec8:	601f      	str	r7, [r3, #0]
 8005eca:	e4db      	b.n	8005884 <_dtoa_r+0x9c>
 8005ecc:	4627      	mov	r7, r4
 8005ece:	463b      	mov	r3, r7
 8005ed0:	461f      	mov	r7, r3
 8005ed2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ed6:	2a39      	cmp	r2, #57	; 0x39
 8005ed8:	d107      	bne.n	8005eea <_dtoa_r+0x702>
 8005eda:	9a03      	ldr	r2, [sp, #12]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d1f7      	bne.n	8005ed0 <_dtoa_r+0x6e8>
 8005ee0:	2230      	movs	r2, #48	; 0x30
 8005ee2:	9903      	ldr	r1, [sp, #12]
 8005ee4:	f108 0801 	add.w	r8, r8, #1
 8005ee8:	700a      	strb	r2, [r1, #0]
 8005eea:	781a      	ldrb	r2, [r3, #0]
 8005eec:	3201      	adds	r2, #1
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	e79e      	b.n	8005e30 <_dtoa_r+0x648>
 8005ef2:	46d0      	mov	r8, sl
 8005ef4:	e7eb      	b.n	8005ece <_dtoa_r+0x6e6>
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	4b6e      	ldr	r3, [pc, #440]	; (80060b4 <_dtoa_r+0x8cc>)
 8005efa:	f7fa faed 	bl	80004d8 <__aeabi_dmul>
 8005efe:	2200      	movs	r2, #0
 8005f00:	2300      	movs	r3, #0
 8005f02:	4680      	mov	r8, r0
 8005f04:	4689      	mov	r9, r1
 8005f06:	f7fa fd4f 	bl	80009a8 <__aeabi_dcmpeq>
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d09b      	beq.n	8005e46 <_dtoa_r+0x65e>
 8005f0e:	e7cd      	b.n	8005eac <_dtoa_r+0x6c4>
 8005f10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f12:	2a00      	cmp	r2, #0
 8005f14:	f000 80d0 	beq.w	80060b8 <_dtoa_r+0x8d0>
 8005f18:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005f1a:	2a01      	cmp	r2, #1
 8005f1c:	f300 80ae 	bgt.w	800607c <_dtoa_r+0x894>
 8005f20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005f22:	2a00      	cmp	r2, #0
 8005f24:	f000 80a6 	beq.w	8006074 <_dtoa_r+0x88c>
 8005f28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005f2e:	9f06      	ldr	r7, [sp, #24]
 8005f30:	9a06      	ldr	r2, [sp, #24]
 8005f32:	2101      	movs	r1, #1
 8005f34:	441a      	add	r2, r3
 8005f36:	9206      	str	r2, [sp, #24]
 8005f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	441a      	add	r2, r3
 8005f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8005f40:	f000 fb5e 	bl	8006600 <__i2b>
 8005f44:	4606      	mov	r6, r0
 8005f46:	2f00      	cmp	r7, #0
 8005f48:	dd0c      	ble.n	8005f64 <_dtoa_r+0x77c>
 8005f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	dd09      	ble.n	8005f64 <_dtoa_r+0x77c>
 8005f50:	42bb      	cmp	r3, r7
 8005f52:	bfa8      	it	ge
 8005f54:	463b      	movge	r3, r7
 8005f56:	9a06      	ldr	r2, [sp, #24]
 8005f58:	1aff      	subs	r7, r7, r3
 8005f5a:	1ad2      	subs	r2, r2, r3
 8005f5c:	9206      	str	r2, [sp, #24]
 8005f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	9309      	str	r3, [sp, #36]	; 0x24
 8005f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f66:	b1f3      	cbz	r3, 8005fa6 <_dtoa_r+0x7be>
 8005f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 80a8 	beq.w	80060c0 <_dtoa_r+0x8d8>
 8005f70:	2c00      	cmp	r4, #0
 8005f72:	dd10      	ble.n	8005f96 <_dtoa_r+0x7ae>
 8005f74:	4631      	mov	r1, r6
 8005f76:	4622      	mov	r2, r4
 8005f78:	4628      	mov	r0, r5
 8005f7a:	f000 fbff 	bl	800677c <__pow5mult>
 8005f7e:	465a      	mov	r2, fp
 8005f80:	4601      	mov	r1, r0
 8005f82:	4606      	mov	r6, r0
 8005f84:	4628      	mov	r0, r5
 8005f86:	f000 fb51 	bl	800662c <__multiply>
 8005f8a:	4680      	mov	r8, r0
 8005f8c:	4659      	mov	r1, fp
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f000 fa80 	bl	8006494 <_Bfree>
 8005f94:	46c3      	mov	fp, r8
 8005f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f98:	1b1a      	subs	r2, r3, r4
 8005f9a:	d004      	beq.n	8005fa6 <_dtoa_r+0x7be>
 8005f9c:	4659      	mov	r1, fp
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	f000 fbec 	bl	800677c <__pow5mult>
 8005fa4:	4683      	mov	fp, r0
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f000 fb29 	bl	8006600 <__i2b>
 8005fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fb0:	4604      	mov	r4, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f340 8086 	ble.w	80060c4 <_dtoa_r+0x8dc>
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4601      	mov	r1, r0
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	f000 fbdd 	bl	800677c <__pow5mult>
 8005fc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	dd7f      	ble.n	80060ca <_dtoa_r+0x8e2>
 8005fca:	f04f 0800 	mov.w	r8, #0
 8005fce:	6923      	ldr	r3, [r4, #16]
 8005fd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005fd4:	6918      	ldr	r0, [r3, #16]
 8005fd6:	f000 fac5 	bl	8006564 <__hi0bits>
 8005fda:	f1c0 0020 	rsb	r0, r0, #32
 8005fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fe0:	4418      	add	r0, r3
 8005fe2:	f010 001f 	ands.w	r0, r0, #31
 8005fe6:	f000 8092 	beq.w	800610e <_dtoa_r+0x926>
 8005fea:	f1c0 0320 	rsb	r3, r0, #32
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	f340 808a 	ble.w	8006108 <_dtoa_r+0x920>
 8005ff4:	f1c0 001c 	rsb	r0, r0, #28
 8005ff8:	9b06      	ldr	r3, [sp, #24]
 8005ffa:	4407      	add	r7, r0
 8005ffc:	4403      	add	r3, r0
 8005ffe:	9306      	str	r3, [sp, #24]
 8006000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006002:	4403      	add	r3, r0
 8006004:	9309      	str	r3, [sp, #36]	; 0x24
 8006006:	9b06      	ldr	r3, [sp, #24]
 8006008:	2b00      	cmp	r3, #0
 800600a:	dd05      	ble.n	8006018 <_dtoa_r+0x830>
 800600c:	4659      	mov	r1, fp
 800600e:	461a      	mov	r2, r3
 8006010:	4628      	mov	r0, r5
 8006012:	f000 fc0d 	bl	8006830 <__lshift>
 8006016:	4683      	mov	fp, r0
 8006018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800601a:	2b00      	cmp	r3, #0
 800601c:	dd05      	ble.n	800602a <_dtoa_r+0x842>
 800601e:	4621      	mov	r1, r4
 8006020:	461a      	mov	r2, r3
 8006022:	4628      	mov	r0, r5
 8006024:	f000 fc04 	bl	8006830 <__lshift>
 8006028:	4604      	mov	r4, r0
 800602a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800602c:	2b00      	cmp	r3, #0
 800602e:	d070      	beq.n	8006112 <_dtoa_r+0x92a>
 8006030:	4621      	mov	r1, r4
 8006032:	4658      	mov	r0, fp
 8006034:	f000 fc6c 	bl	8006910 <__mcmp>
 8006038:	2800      	cmp	r0, #0
 800603a:	da6a      	bge.n	8006112 <_dtoa_r+0x92a>
 800603c:	2300      	movs	r3, #0
 800603e:	4659      	mov	r1, fp
 8006040:	220a      	movs	r2, #10
 8006042:	4628      	mov	r0, r5
 8006044:	f000 fa48 	bl	80064d8 <__multadd>
 8006048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800604a:	4683      	mov	fp, r0
 800604c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 8194 	beq.w	800637e <_dtoa_r+0xb96>
 8006056:	4631      	mov	r1, r6
 8006058:	2300      	movs	r3, #0
 800605a:	220a      	movs	r2, #10
 800605c:	4628      	mov	r0, r5
 800605e:	f000 fa3b 	bl	80064d8 <__multadd>
 8006062:	f1b9 0f00 	cmp.w	r9, #0
 8006066:	4606      	mov	r6, r0
 8006068:	f300 8093 	bgt.w	8006192 <_dtoa_r+0x9aa>
 800606c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800606e:	2b02      	cmp	r3, #2
 8006070:	dc57      	bgt.n	8006122 <_dtoa_r+0x93a>
 8006072:	e08e      	b.n	8006192 <_dtoa_r+0x9aa>
 8006074:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006076:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800607a:	e757      	b.n	8005f2c <_dtoa_r+0x744>
 800607c:	9b08      	ldr	r3, [sp, #32]
 800607e:	1e5c      	subs	r4, r3, #1
 8006080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006082:	42a3      	cmp	r3, r4
 8006084:	bfb7      	itett	lt
 8006086:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006088:	1b1c      	subge	r4, r3, r4
 800608a:	1ae2      	sublt	r2, r4, r3
 800608c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800608e:	bfbe      	ittt	lt
 8006090:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006092:	189b      	addlt	r3, r3, r2
 8006094:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006096:	9b08      	ldr	r3, [sp, #32]
 8006098:	bfb8      	it	lt
 800609a:	2400      	movlt	r4, #0
 800609c:	2b00      	cmp	r3, #0
 800609e:	bfbb      	ittet	lt
 80060a0:	9b06      	ldrlt	r3, [sp, #24]
 80060a2:	9a08      	ldrlt	r2, [sp, #32]
 80060a4:	9f06      	ldrge	r7, [sp, #24]
 80060a6:	1a9f      	sublt	r7, r3, r2
 80060a8:	bfac      	ite	ge
 80060aa:	9b08      	ldrge	r3, [sp, #32]
 80060ac:	2300      	movlt	r3, #0
 80060ae:	e73f      	b.n	8005f30 <_dtoa_r+0x748>
 80060b0:	3fe00000 	.word	0x3fe00000
 80060b4:	40240000 	.word	0x40240000
 80060b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80060ba:	9f06      	ldr	r7, [sp, #24]
 80060bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80060be:	e742      	b.n	8005f46 <_dtoa_r+0x75e>
 80060c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060c2:	e76b      	b.n	8005f9c <_dtoa_r+0x7b4>
 80060c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	dc19      	bgt.n	80060fe <_dtoa_r+0x916>
 80060ca:	9b04      	ldr	r3, [sp, #16]
 80060cc:	b9bb      	cbnz	r3, 80060fe <_dtoa_r+0x916>
 80060ce:	9b05      	ldr	r3, [sp, #20]
 80060d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060d4:	b99b      	cbnz	r3, 80060fe <_dtoa_r+0x916>
 80060d6:	9b05      	ldr	r3, [sp, #20]
 80060d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060dc:	0d1b      	lsrs	r3, r3, #20
 80060de:	051b      	lsls	r3, r3, #20
 80060e0:	b183      	cbz	r3, 8006104 <_dtoa_r+0x91c>
 80060e2:	f04f 0801 	mov.w	r8, #1
 80060e6:	9b06      	ldr	r3, [sp, #24]
 80060e8:	3301      	adds	r3, #1
 80060ea:	9306      	str	r3, [sp, #24]
 80060ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ee:	3301      	adds	r3, #1
 80060f0:	9309      	str	r3, [sp, #36]	; 0x24
 80060f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f47f af6a 	bne.w	8005fce <_dtoa_r+0x7e6>
 80060fa:	2001      	movs	r0, #1
 80060fc:	e76f      	b.n	8005fde <_dtoa_r+0x7f6>
 80060fe:	f04f 0800 	mov.w	r8, #0
 8006102:	e7f6      	b.n	80060f2 <_dtoa_r+0x90a>
 8006104:	4698      	mov	r8, r3
 8006106:	e7f4      	b.n	80060f2 <_dtoa_r+0x90a>
 8006108:	f43f af7d 	beq.w	8006006 <_dtoa_r+0x81e>
 800610c:	4618      	mov	r0, r3
 800610e:	301c      	adds	r0, #28
 8006110:	e772      	b.n	8005ff8 <_dtoa_r+0x810>
 8006112:	9b08      	ldr	r3, [sp, #32]
 8006114:	2b00      	cmp	r3, #0
 8006116:	dc36      	bgt.n	8006186 <_dtoa_r+0x99e>
 8006118:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800611a:	2b02      	cmp	r3, #2
 800611c:	dd33      	ble.n	8006186 <_dtoa_r+0x99e>
 800611e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006122:	f1b9 0f00 	cmp.w	r9, #0
 8006126:	d10d      	bne.n	8006144 <_dtoa_r+0x95c>
 8006128:	4621      	mov	r1, r4
 800612a:	464b      	mov	r3, r9
 800612c:	2205      	movs	r2, #5
 800612e:	4628      	mov	r0, r5
 8006130:	f000 f9d2 	bl	80064d8 <__multadd>
 8006134:	4601      	mov	r1, r0
 8006136:	4604      	mov	r4, r0
 8006138:	4658      	mov	r0, fp
 800613a:	f000 fbe9 	bl	8006910 <__mcmp>
 800613e:	2800      	cmp	r0, #0
 8006140:	f73f adb8 	bgt.w	8005cb4 <_dtoa_r+0x4cc>
 8006144:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006146:	9f03      	ldr	r7, [sp, #12]
 8006148:	ea6f 0a03 	mvn.w	sl, r3
 800614c:	f04f 0800 	mov.w	r8, #0
 8006150:	4621      	mov	r1, r4
 8006152:	4628      	mov	r0, r5
 8006154:	f000 f99e 	bl	8006494 <_Bfree>
 8006158:	2e00      	cmp	r6, #0
 800615a:	f43f aea7 	beq.w	8005eac <_dtoa_r+0x6c4>
 800615e:	f1b8 0f00 	cmp.w	r8, #0
 8006162:	d005      	beq.n	8006170 <_dtoa_r+0x988>
 8006164:	45b0      	cmp	r8, r6
 8006166:	d003      	beq.n	8006170 <_dtoa_r+0x988>
 8006168:	4641      	mov	r1, r8
 800616a:	4628      	mov	r0, r5
 800616c:	f000 f992 	bl	8006494 <_Bfree>
 8006170:	4631      	mov	r1, r6
 8006172:	4628      	mov	r0, r5
 8006174:	f000 f98e 	bl	8006494 <_Bfree>
 8006178:	e698      	b.n	8005eac <_dtoa_r+0x6c4>
 800617a:	2400      	movs	r4, #0
 800617c:	4626      	mov	r6, r4
 800617e:	e7e1      	b.n	8006144 <_dtoa_r+0x95c>
 8006180:	46c2      	mov	sl, r8
 8006182:	4626      	mov	r6, r4
 8006184:	e596      	b.n	8005cb4 <_dtoa_r+0x4cc>
 8006186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006188:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 80fd 	beq.w	800638c <_dtoa_r+0xba4>
 8006192:	2f00      	cmp	r7, #0
 8006194:	dd05      	ble.n	80061a2 <_dtoa_r+0x9ba>
 8006196:	4631      	mov	r1, r6
 8006198:	463a      	mov	r2, r7
 800619a:	4628      	mov	r0, r5
 800619c:	f000 fb48 	bl	8006830 <__lshift>
 80061a0:	4606      	mov	r6, r0
 80061a2:	f1b8 0f00 	cmp.w	r8, #0
 80061a6:	d05c      	beq.n	8006262 <_dtoa_r+0xa7a>
 80061a8:	4628      	mov	r0, r5
 80061aa:	6871      	ldr	r1, [r6, #4]
 80061ac:	f000 f932 	bl	8006414 <_Balloc>
 80061b0:	4607      	mov	r7, r0
 80061b2:	b928      	cbnz	r0, 80061c0 <_dtoa_r+0x9d8>
 80061b4:	4602      	mov	r2, r0
 80061b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80061ba:	4b7f      	ldr	r3, [pc, #508]	; (80063b8 <_dtoa_r+0xbd0>)
 80061bc:	f7ff bb28 	b.w	8005810 <_dtoa_r+0x28>
 80061c0:	6932      	ldr	r2, [r6, #16]
 80061c2:	f106 010c 	add.w	r1, r6, #12
 80061c6:	3202      	adds	r2, #2
 80061c8:	0092      	lsls	r2, r2, #2
 80061ca:	300c      	adds	r0, #12
 80061cc:	f000 f914 	bl	80063f8 <memcpy>
 80061d0:	2201      	movs	r2, #1
 80061d2:	4639      	mov	r1, r7
 80061d4:	4628      	mov	r0, r5
 80061d6:	f000 fb2b 	bl	8006830 <__lshift>
 80061da:	46b0      	mov	r8, r6
 80061dc:	4606      	mov	r6, r0
 80061de:	9b03      	ldr	r3, [sp, #12]
 80061e0:	3301      	adds	r3, #1
 80061e2:	9308      	str	r3, [sp, #32]
 80061e4:	9b03      	ldr	r3, [sp, #12]
 80061e6:	444b      	add	r3, r9
 80061e8:	930a      	str	r3, [sp, #40]	; 0x28
 80061ea:	9b04      	ldr	r3, [sp, #16]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	9309      	str	r3, [sp, #36]	; 0x24
 80061f2:	9b08      	ldr	r3, [sp, #32]
 80061f4:	4621      	mov	r1, r4
 80061f6:	3b01      	subs	r3, #1
 80061f8:	4658      	mov	r0, fp
 80061fa:	9304      	str	r3, [sp, #16]
 80061fc:	f7ff fa66 	bl	80056cc <quorem>
 8006200:	4603      	mov	r3, r0
 8006202:	4641      	mov	r1, r8
 8006204:	3330      	adds	r3, #48	; 0x30
 8006206:	9006      	str	r0, [sp, #24]
 8006208:	4658      	mov	r0, fp
 800620a:	930b      	str	r3, [sp, #44]	; 0x2c
 800620c:	f000 fb80 	bl	8006910 <__mcmp>
 8006210:	4632      	mov	r2, r6
 8006212:	4681      	mov	r9, r0
 8006214:	4621      	mov	r1, r4
 8006216:	4628      	mov	r0, r5
 8006218:	f000 fb96 	bl	8006948 <__mdiff>
 800621c:	68c2      	ldr	r2, [r0, #12]
 800621e:	4607      	mov	r7, r0
 8006220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006222:	bb02      	cbnz	r2, 8006266 <_dtoa_r+0xa7e>
 8006224:	4601      	mov	r1, r0
 8006226:	4658      	mov	r0, fp
 8006228:	f000 fb72 	bl	8006910 <__mcmp>
 800622c:	4602      	mov	r2, r0
 800622e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006230:	4639      	mov	r1, r7
 8006232:	4628      	mov	r0, r5
 8006234:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006238:	f000 f92c 	bl	8006494 <_Bfree>
 800623c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800623e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006240:	9f08      	ldr	r7, [sp, #32]
 8006242:	ea43 0102 	orr.w	r1, r3, r2
 8006246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006248:	430b      	orrs	r3, r1
 800624a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800624c:	d10d      	bne.n	800626a <_dtoa_r+0xa82>
 800624e:	2b39      	cmp	r3, #57	; 0x39
 8006250:	d029      	beq.n	80062a6 <_dtoa_r+0xabe>
 8006252:	f1b9 0f00 	cmp.w	r9, #0
 8006256:	dd01      	ble.n	800625c <_dtoa_r+0xa74>
 8006258:	9b06      	ldr	r3, [sp, #24]
 800625a:	3331      	adds	r3, #49	; 0x31
 800625c:	9a04      	ldr	r2, [sp, #16]
 800625e:	7013      	strb	r3, [r2, #0]
 8006260:	e776      	b.n	8006150 <_dtoa_r+0x968>
 8006262:	4630      	mov	r0, r6
 8006264:	e7b9      	b.n	80061da <_dtoa_r+0x9f2>
 8006266:	2201      	movs	r2, #1
 8006268:	e7e2      	b.n	8006230 <_dtoa_r+0xa48>
 800626a:	f1b9 0f00 	cmp.w	r9, #0
 800626e:	db06      	blt.n	800627e <_dtoa_r+0xa96>
 8006270:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006272:	ea41 0909 	orr.w	r9, r1, r9
 8006276:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006278:	ea59 0101 	orrs.w	r1, r9, r1
 800627c:	d120      	bne.n	80062c0 <_dtoa_r+0xad8>
 800627e:	2a00      	cmp	r2, #0
 8006280:	ddec      	ble.n	800625c <_dtoa_r+0xa74>
 8006282:	4659      	mov	r1, fp
 8006284:	2201      	movs	r2, #1
 8006286:	4628      	mov	r0, r5
 8006288:	9308      	str	r3, [sp, #32]
 800628a:	f000 fad1 	bl	8006830 <__lshift>
 800628e:	4621      	mov	r1, r4
 8006290:	4683      	mov	fp, r0
 8006292:	f000 fb3d 	bl	8006910 <__mcmp>
 8006296:	2800      	cmp	r0, #0
 8006298:	9b08      	ldr	r3, [sp, #32]
 800629a:	dc02      	bgt.n	80062a2 <_dtoa_r+0xaba>
 800629c:	d1de      	bne.n	800625c <_dtoa_r+0xa74>
 800629e:	07da      	lsls	r2, r3, #31
 80062a0:	d5dc      	bpl.n	800625c <_dtoa_r+0xa74>
 80062a2:	2b39      	cmp	r3, #57	; 0x39
 80062a4:	d1d8      	bne.n	8006258 <_dtoa_r+0xa70>
 80062a6:	2339      	movs	r3, #57	; 0x39
 80062a8:	9a04      	ldr	r2, [sp, #16]
 80062aa:	7013      	strb	r3, [r2, #0]
 80062ac:	463b      	mov	r3, r7
 80062ae:	461f      	mov	r7, r3
 80062b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	2a39      	cmp	r2, #57	; 0x39
 80062b8:	d050      	beq.n	800635c <_dtoa_r+0xb74>
 80062ba:	3201      	adds	r2, #1
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	e747      	b.n	8006150 <_dtoa_r+0x968>
 80062c0:	2a00      	cmp	r2, #0
 80062c2:	dd03      	ble.n	80062cc <_dtoa_r+0xae4>
 80062c4:	2b39      	cmp	r3, #57	; 0x39
 80062c6:	d0ee      	beq.n	80062a6 <_dtoa_r+0xabe>
 80062c8:	3301      	adds	r3, #1
 80062ca:	e7c7      	b.n	800625c <_dtoa_r+0xa74>
 80062cc:	9a08      	ldr	r2, [sp, #32]
 80062ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80062d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80062d4:	428a      	cmp	r2, r1
 80062d6:	d02a      	beq.n	800632e <_dtoa_r+0xb46>
 80062d8:	4659      	mov	r1, fp
 80062da:	2300      	movs	r3, #0
 80062dc:	220a      	movs	r2, #10
 80062de:	4628      	mov	r0, r5
 80062e0:	f000 f8fa 	bl	80064d8 <__multadd>
 80062e4:	45b0      	cmp	r8, r6
 80062e6:	4683      	mov	fp, r0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	f04f 020a 	mov.w	r2, #10
 80062f0:	4641      	mov	r1, r8
 80062f2:	4628      	mov	r0, r5
 80062f4:	d107      	bne.n	8006306 <_dtoa_r+0xb1e>
 80062f6:	f000 f8ef 	bl	80064d8 <__multadd>
 80062fa:	4680      	mov	r8, r0
 80062fc:	4606      	mov	r6, r0
 80062fe:	9b08      	ldr	r3, [sp, #32]
 8006300:	3301      	adds	r3, #1
 8006302:	9308      	str	r3, [sp, #32]
 8006304:	e775      	b.n	80061f2 <_dtoa_r+0xa0a>
 8006306:	f000 f8e7 	bl	80064d8 <__multadd>
 800630a:	4631      	mov	r1, r6
 800630c:	4680      	mov	r8, r0
 800630e:	2300      	movs	r3, #0
 8006310:	220a      	movs	r2, #10
 8006312:	4628      	mov	r0, r5
 8006314:	f000 f8e0 	bl	80064d8 <__multadd>
 8006318:	4606      	mov	r6, r0
 800631a:	e7f0      	b.n	80062fe <_dtoa_r+0xb16>
 800631c:	f1b9 0f00 	cmp.w	r9, #0
 8006320:	bfcc      	ite	gt
 8006322:	464f      	movgt	r7, r9
 8006324:	2701      	movle	r7, #1
 8006326:	f04f 0800 	mov.w	r8, #0
 800632a:	9a03      	ldr	r2, [sp, #12]
 800632c:	4417      	add	r7, r2
 800632e:	4659      	mov	r1, fp
 8006330:	2201      	movs	r2, #1
 8006332:	4628      	mov	r0, r5
 8006334:	9308      	str	r3, [sp, #32]
 8006336:	f000 fa7b 	bl	8006830 <__lshift>
 800633a:	4621      	mov	r1, r4
 800633c:	4683      	mov	fp, r0
 800633e:	f000 fae7 	bl	8006910 <__mcmp>
 8006342:	2800      	cmp	r0, #0
 8006344:	dcb2      	bgt.n	80062ac <_dtoa_r+0xac4>
 8006346:	d102      	bne.n	800634e <_dtoa_r+0xb66>
 8006348:	9b08      	ldr	r3, [sp, #32]
 800634a:	07db      	lsls	r3, r3, #31
 800634c:	d4ae      	bmi.n	80062ac <_dtoa_r+0xac4>
 800634e:	463b      	mov	r3, r7
 8006350:	461f      	mov	r7, r3
 8006352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006356:	2a30      	cmp	r2, #48	; 0x30
 8006358:	d0fa      	beq.n	8006350 <_dtoa_r+0xb68>
 800635a:	e6f9      	b.n	8006150 <_dtoa_r+0x968>
 800635c:	9a03      	ldr	r2, [sp, #12]
 800635e:	429a      	cmp	r2, r3
 8006360:	d1a5      	bne.n	80062ae <_dtoa_r+0xac6>
 8006362:	2331      	movs	r3, #49	; 0x31
 8006364:	f10a 0a01 	add.w	sl, sl, #1
 8006368:	e779      	b.n	800625e <_dtoa_r+0xa76>
 800636a:	4b14      	ldr	r3, [pc, #80]	; (80063bc <_dtoa_r+0xbd4>)
 800636c:	f7ff baa8 	b.w	80058c0 <_dtoa_r+0xd8>
 8006370:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006372:	2b00      	cmp	r3, #0
 8006374:	f47f aa81 	bne.w	800587a <_dtoa_r+0x92>
 8006378:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <_dtoa_r+0xbd8>)
 800637a:	f7ff baa1 	b.w	80058c0 <_dtoa_r+0xd8>
 800637e:	f1b9 0f00 	cmp.w	r9, #0
 8006382:	dc03      	bgt.n	800638c <_dtoa_r+0xba4>
 8006384:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006386:	2b02      	cmp	r3, #2
 8006388:	f73f aecb 	bgt.w	8006122 <_dtoa_r+0x93a>
 800638c:	9f03      	ldr	r7, [sp, #12]
 800638e:	4621      	mov	r1, r4
 8006390:	4658      	mov	r0, fp
 8006392:	f7ff f99b 	bl	80056cc <quorem>
 8006396:	9a03      	ldr	r2, [sp, #12]
 8006398:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800639c:	f807 3b01 	strb.w	r3, [r7], #1
 80063a0:	1aba      	subs	r2, r7, r2
 80063a2:	4591      	cmp	r9, r2
 80063a4:	ddba      	ble.n	800631c <_dtoa_r+0xb34>
 80063a6:	4659      	mov	r1, fp
 80063a8:	2300      	movs	r3, #0
 80063aa:	220a      	movs	r2, #10
 80063ac:	4628      	mov	r0, r5
 80063ae:	f000 f893 	bl	80064d8 <__multadd>
 80063b2:	4683      	mov	fp, r0
 80063b4:	e7eb      	b.n	800638e <_dtoa_r+0xba6>
 80063b6:	bf00      	nop
 80063b8:	08007d7f 	.word	0x08007d7f
 80063bc:	08007cdc 	.word	0x08007cdc
 80063c0:	08007d00 	.word	0x08007d00

080063c4 <_localeconv_r>:
 80063c4:	4800      	ldr	r0, [pc, #0]	; (80063c8 <_localeconv_r+0x4>)
 80063c6:	4770      	bx	lr
 80063c8:	20000174 	.word	0x20000174

080063cc <malloc>:
 80063cc:	4b02      	ldr	r3, [pc, #8]	; (80063d8 <malloc+0xc>)
 80063ce:	4601      	mov	r1, r0
 80063d0:	6818      	ldr	r0, [r3, #0]
 80063d2:	f000 bc1d 	b.w	8006c10 <_malloc_r>
 80063d6:	bf00      	nop
 80063d8:	20000020 	.word	0x20000020

080063dc <memchr>:
 80063dc:	4603      	mov	r3, r0
 80063de:	b510      	push	{r4, lr}
 80063e0:	b2c9      	uxtb	r1, r1
 80063e2:	4402      	add	r2, r0
 80063e4:	4293      	cmp	r3, r2
 80063e6:	4618      	mov	r0, r3
 80063e8:	d101      	bne.n	80063ee <memchr+0x12>
 80063ea:	2000      	movs	r0, #0
 80063ec:	e003      	b.n	80063f6 <memchr+0x1a>
 80063ee:	7804      	ldrb	r4, [r0, #0]
 80063f0:	3301      	adds	r3, #1
 80063f2:	428c      	cmp	r4, r1
 80063f4:	d1f6      	bne.n	80063e4 <memchr+0x8>
 80063f6:	bd10      	pop	{r4, pc}

080063f8 <memcpy>:
 80063f8:	440a      	add	r2, r1
 80063fa:	4291      	cmp	r1, r2
 80063fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006400:	d100      	bne.n	8006404 <memcpy+0xc>
 8006402:	4770      	bx	lr
 8006404:	b510      	push	{r4, lr}
 8006406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800640a:	4291      	cmp	r1, r2
 800640c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006410:	d1f9      	bne.n	8006406 <memcpy+0xe>
 8006412:	bd10      	pop	{r4, pc}

08006414 <_Balloc>:
 8006414:	b570      	push	{r4, r5, r6, lr}
 8006416:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006418:	4604      	mov	r4, r0
 800641a:	460d      	mov	r5, r1
 800641c:	b976      	cbnz	r6, 800643c <_Balloc+0x28>
 800641e:	2010      	movs	r0, #16
 8006420:	f7ff ffd4 	bl	80063cc <malloc>
 8006424:	4602      	mov	r2, r0
 8006426:	6260      	str	r0, [r4, #36]	; 0x24
 8006428:	b920      	cbnz	r0, 8006434 <_Balloc+0x20>
 800642a:	2166      	movs	r1, #102	; 0x66
 800642c:	4b17      	ldr	r3, [pc, #92]	; (800648c <_Balloc+0x78>)
 800642e:	4818      	ldr	r0, [pc, #96]	; (8006490 <_Balloc+0x7c>)
 8006430:	f000 fdce 	bl	8006fd0 <__assert_func>
 8006434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006438:	6006      	str	r6, [r0, #0]
 800643a:	60c6      	str	r6, [r0, #12]
 800643c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800643e:	68f3      	ldr	r3, [r6, #12]
 8006440:	b183      	cbz	r3, 8006464 <_Balloc+0x50>
 8006442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800644a:	b9b8      	cbnz	r0, 800647c <_Balloc+0x68>
 800644c:	2101      	movs	r1, #1
 800644e:	fa01 f605 	lsl.w	r6, r1, r5
 8006452:	1d72      	adds	r2, r6, #5
 8006454:	4620      	mov	r0, r4
 8006456:	0092      	lsls	r2, r2, #2
 8006458:	f000 fb5e 	bl	8006b18 <_calloc_r>
 800645c:	b160      	cbz	r0, 8006478 <_Balloc+0x64>
 800645e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006462:	e00e      	b.n	8006482 <_Balloc+0x6e>
 8006464:	2221      	movs	r2, #33	; 0x21
 8006466:	2104      	movs	r1, #4
 8006468:	4620      	mov	r0, r4
 800646a:	f000 fb55 	bl	8006b18 <_calloc_r>
 800646e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006470:	60f0      	str	r0, [r6, #12]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e4      	bne.n	8006442 <_Balloc+0x2e>
 8006478:	2000      	movs	r0, #0
 800647a:	bd70      	pop	{r4, r5, r6, pc}
 800647c:	6802      	ldr	r2, [r0, #0]
 800647e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006482:	2300      	movs	r3, #0
 8006484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006488:	e7f7      	b.n	800647a <_Balloc+0x66>
 800648a:	bf00      	nop
 800648c:	08007d0d 	.word	0x08007d0d
 8006490:	08007d90 	.word	0x08007d90

08006494 <_Bfree>:
 8006494:	b570      	push	{r4, r5, r6, lr}
 8006496:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006498:	4605      	mov	r5, r0
 800649a:	460c      	mov	r4, r1
 800649c:	b976      	cbnz	r6, 80064bc <_Bfree+0x28>
 800649e:	2010      	movs	r0, #16
 80064a0:	f7ff ff94 	bl	80063cc <malloc>
 80064a4:	4602      	mov	r2, r0
 80064a6:	6268      	str	r0, [r5, #36]	; 0x24
 80064a8:	b920      	cbnz	r0, 80064b4 <_Bfree+0x20>
 80064aa:	218a      	movs	r1, #138	; 0x8a
 80064ac:	4b08      	ldr	r3, [pc, #32]	; (80064d0 <_Bfree+0x3c>)
 80064ae:	4809      	ldr	r0, [pc, #36]	; (80064d4 <_Bfree+0x40>)
 80064b0:	f000 fd8e 	bl	8006fd0 <__assert_func>
 80064b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064b8:	6006      	str	r6, [r0, #0]
 80064ba:	60c6      	str	r6, [r0, #12]
 80064bc:	b13c      	cbz	r4, 80064ce <_Bfree+0x3a>
 80064be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064c0:	6862      	ldr	r2, [r4, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064c8:	6021      	str	r1, [r4, #0]
 80064ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064ce:	bd70      	pop	{r4, r5, r6, pc}
 80064d0:	08007d0d 	.word	0x08007d0d
 80064d4:	08007d90 	.word	0x08007d90

080064d8 <__multadd>:
 80064d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064dc:	4607      	mov	r7, r0
 80064de:	460c      	mov	r4, r1
 80064e0:	461e      	mov	r6, r3
 80064e2:	2000      	movs	r0, #0
 80064e4:	690d      	ldr	r5, [r1, #16]
 80064e6:	f101 0c14 	add.w	ip, r1, #20
 80064ea:	f8dc 3000 	ldr.w	r3, [ip]
 80064ee:	3001      	adds	r0, #1
 80064f0:	b299      	uxth	r1, r3
 80064f2:	fb02 6101 	mla	r1, r2, r1, r6
 80064f6:	0c1e      	lsrs	r6, r3, #16
 80064f8:	0c0b      	lsrs	r3, r1, #16
 80064fa:	fb02 3306 	mla	r3, r2, r6, r3
 80064fe:	b289      	uxth	r1, r1
 8006500:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006504:	4285      	cmp	r5, r0
 8006506:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800650a:	f84c 1b04 	str.w	r1, [ip], #4
 800650e:	dcec      	bgt.n	80064ea <__multadd+0x12>
 8006510:	b30e      	cbz	r6, 8006556 <__multadd+0x7e>
 8006512:	68a3      	ldr	r3, [r4, #8]
 8006514:	42ab      	cmp	r3, r5
 8006516:	dc19      	bgt.n	800654c <__multadd+0x74>
 8006518:	6861      	ldr	r1, [r4, #4]
 800651a:	4638      	mov	r0, r7
 800651c:	3101      	adds	r1, #1
 800651e:	f7ff ff79 	bl	8006414 <_Balloc>
 8006522:	4680      	mov	r8, r0
 8006524:	b928      	cbnz	r0, 8006532 <__multadd+0x5a>
 8006526:	4602      	mov	r2, r0
 8006528:	21b5      	movs	r1, #181	; 0xb5
 800652a:	4b0c      	ldr	r3, [pc, #48]	; (800655c <__multadd+0x84>)
 800652c:	480c      	ldr	r0, [pc, #48]	; (8006560 <__multadd+0x88>)
 800652e:	f000 fd4f 	bl	8006fd0 <__assert_func>
 8006532:	6922      	ldr	r2, [r4, #16]
 8006534:	f104 010c 	add.w	r1, r4, #12
 8006538:	3202      	adds	r2, #2
 800653a:	0092      	lsls	r2, r2, #2
 800653c:	300c      	adds	r0, #12
 800653e:	f7ff ff5b 	bl	80063f8 <memcpy>
 8006542:	4621      	mov	r1, r4
 8006544:	4638      	mov	r0, r7
 8006546:	f7ff ffa5 	bl	8006494 <_Bfree>
 800654a:	4644      	mov	r4, r8
 800654c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006550:	3501      	adds	r5, #1
 8006552:	615e      	str	r6, [r3, #20]
 8006554:	6125      	str	r5, [r4, #16]
 8006556:	4620      	mov	r0, r4
 8006558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800655c:	08007d7f 	.word	0x08007d7f
 8006560:	08007d90 	.word	0x08007d90

08006564 <__hi0bits>:
 8006564:	0c02      	lsrs	r2, r0, #16
 8006566:	0412      	lsls	r2, r2, #16
 8006568:	4603      	mov	r3, r0
 800656a:	b9ca      	cbnz	r2, 80065a0 <__hi0bits+0x3c>
 800656c:	0403      	lsls	r3, r0, #16
 800656e:	2010      	movs	r0, #16
 8006570:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006574:	bf04      	itt	eq
 8006576:	021b      	lsleq	r3, r3, #8
 8006578:	3008      	addeq	r0, #8
 800657a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800657e:	bf04      	itt	eq
 8006580:	011b      	lsleq	r3, r3, #4
 8006582:	3004      	addeq	r0, #4
 8006584:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006588:	bf04      	itt	eq
 800658a:	009b      	lsleq	r3, r3, #2
 800658c:	3002      	addeq	r0, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	db05      	blt.n	800659e <__hi0bits+0x3a>
 8006592:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006596:	f100 0001 	add.w	r0, r0, #1
 800659a:	bf08      	it	eq
 800659c:	2020      	moveq	r0, #32
 800659e:	4770      	bx	lr
 80065a0:	2000      	movs	r0, #0
 80065a2:	e7e5      	b.n	8006570 <__hi0bits+0xc>

080065a4 <__lo0bits>:
 80065a4:	6803      	ldr	r3, [r0, #0]
 80065a6:	4602      	mov	r2, r0
 80065a8:	f013 0007 	ands.w	r0, r3, #7
 80065ac:	d00b      	beq.n	80065c6 <__lo0bits+0x22>
 80065ae:	07d9      	lsls	r1, r3, #31
 80065b0:	d421      	bmi.n	80065f6 <__lo0bits+0x52>
 80065b2:	0798      	lsls	r0, r3, #30
 80065b4:	bf49      	itett	mi
 80065b6:	085b      	lsrmi	r3, r3, #1
 80065b8:	089b      	lsrpl	r3, r3, #2
 80065ba:	2001      	movmi	r0, #1
 80065bc:	6013      	strmi	r3, [r2, #0]
 80065be:	bf5c      	itt	pl
 80065c0:	2002      	movpl	r0, #2
 80065c2:	6013      	strpl	r3, [r2, #0]
 80065c4:	4770      	bx	lr
 80065c6:	b299      	uxth	r1, r3
 80065c8:	b909      	cbnz	r1, 80065ce <__lo0bits+0x2a>
 80065ca:	2010      	movs	r0, #16
 80065cc:	0c1b      	lsrs	r3, r3, #16
 80065ce:	b2d9      	uxtb	r1, r3
 80065d0:	b909      	cbnz	r1, 80065d6 <__lo0bits+0x32>
 80065d2:	3008      	adds	r0, #8
 80065d4:	0a1b      	lsrs	r3, r3, #8
 80065d6:	0719      	lsls	r1, r3, #28
 80065d8:	bf04      	itt	eq
 80065da:	091b      	lsreq	r3, r3, #4
 80065dc:	3004      	addeq	r0, #4
 80065de:	0799      	lsls	r1, r3, #30
 80065e0:	bf04      	itt	eq
 80065e2:	089b      	lsreq	r3, r3, #2
 80065e4:	3002      	addeq	r0, #2
 80065e6:	07d9      	lsls	r1, r3, #31
 80065e8:	d403      	bmi.n	80065f2 <__lo0bits+0x4e>
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	f100 0001 	add.w	r0, r0, #1
 80065f0:	d003      	beq.n	80065fa <__lo0bits+0x56>
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	4770      	bx	lr
 80065f6:	2000      	movs	r0, #0
 80065f8:	4770      	bx	lr
 80065fa:	2020      	movs	r0, #32
 80065fc:	4770      	bx	lr
	...

08006600 <__i2b>:
 8006600:	b510      	push	{r4, lr}
 8006602:	460c      	mov	r4, r1
 8006604:	2101      	movs	r1, #1
 8006606:	f7ff ff05 	bl	8006414 <_Balloc>
 800660a:	4602      	mov	r2, r0
 800660c:	b928      	cbnz	r0, 800661a <__i2b+0x1a>
 800660e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006612:	4b04      	ldr	r3, [pc, #16]	; (8006624 <__i2b+0x24>)
 8006614:	4804      	ldr	r0, [pc, #16]	; (8006628 <__i2b+0x28>)
 8006616:	f000 fcdb 	bl	8006fd0 <__assert_func>
 800661a:	2301      	movs	r3, #1
 800661c:	6144      	str	r4, [r0, #20]
 800661e:	6103      	str	r3, [r0, #16]
 8006620:	bd10      	pop	{r4, pc}
 8006622:	bf00      	nop
 8006624:	08007d7f 	.word	0x08007d7f
 8006628:	08007d90 	.word	0x08007d90

0800662c <__multiply>:
 800662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006630:	4691      	mov	r9, r2
 8006632:	690a      	ldr	r2, [r1, #16]
 8006634:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006638:	460c      	mov	r4, r1
 800663a:	429a      	cmp	r2, r3
 800663c:	bfbe      	ittt	lt
 800663e:	460b      	movlt	r3, r1
 8006640:	464c      	movlt	r4, r9
 8006642:	4699      	movlt	r9, r3
 8006644:	6927      	ldr	r7, [r4, #16]
 8006646:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800664a:	68a3      	ldr	r3, [r4, #8]
 800664c:	6861      	ldr	r1, [r4, #4]
 800664e:	eb07 060a 	add.w	r6, r7, sl
 8006652:	42b3      	cmp	r3, r6
 8006654:	b085      	sub	sp, #20
 8006656:	bfb8      	it	lt
 8006658:	3101      	addlt	r1, #1
 800665a:	f7ff fedb 	bl	8006414 <_Balloc>
 800665e:	b930      	cbnz	r0, 800666e <__multiply+0x42>
 8006660:	4602      	mov	r2, r0
 8006662:	f240 115d 	movw	r1, #349	; 0x15d
 8006666:	4b43      	ldr	r3, [pc, #268]	; (8006774 <__multiply+0x148>)
 8006668:	4843      	ldr	r0, [pc, #268]	; (8006778 <__multiply+0x14c>)
 800666a:	f000 fcb1 	bl	8006fd0 <__assert_func>
 800666e:	f100 0514 	add.w	r5, r0, #20
 8006672:	462b      	mov	r3, r5
 8006674:	2200      	movs	r2, #0
 8006676:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800667a:	4543      	cmp	r3, r8
 800667c:	d321      	bcc.n	80066c2 <__multiply+0x96>
 800667e:	f104 0314 	add.w	r3, r4, #20
 8006682:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006686:	f109 0314 	add.w	r3, r9, #20
 800668a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800668e:	9202      	str	r2, [sp, #8]
 8006690:	1b3a      	subs	r2, r7, r4
 8006692:	3a15      	subs	r2, #21
 8006694:	f022 0203 	bic.w	r2, r2, #3
 8006698:	3204      	adds	r2, #4
 800669a:	f104 0115 	add.w	r1, r4, #21
 800669e:	428f      	cmp	r7, r1
 80066a0:	bf38      	it	cc
 80066a2:	2204      	movcc	r2, #4
 80066a4:	9201      	str	r2, [sp, #4]
 80066a6:	9a02      	ldr	r2, [sp, #8]
 80066a8:	9303      	str	r3, [sp, #12]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d80c      	bhi.n	80066c8 <__multiply+0x9c>
 80066ae:	2e00      	cmp	r6, #0
 80066b0:	dd03      	ble.n	80066ba <__multiply+0x8e>
 80066b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d059      	beq.n	800676e <__multiply+0x142>
 80066ba:	6106      	str	r6, [r0, #16]
 80066bc:	b005      	add	sp, #20
 80066be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c2:	f843 2b04 	str.w	r2, [r3], #4
 80066c6:	e7d8      	b.n	800667a <__multiply+0x4e>
 80066c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80066cc:	f1ba 0f00 	cmp.w	sl, #0
 80066d0:	d023      	beq.n	800671a <__multiply+0xee>
 80066d2:	46a9      	mov	r9, r5
 80066d4:	f04f 0c00 	mov.w	ip, #0
 80066d8:	f104 0e14 	add.w	lr, r4, #20
 80066dc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80066e0:	f8d9 1000 	ldr.w	r1, [r9]
 80066e4:	fa1f fb82 	uxth.w	fp, r2
 80066e8:	b289      	uxth	r1, r1
 80066ea:	fb0a 110b 	mla	r1, sl, fp, r1
 80066ee:	4461      	add	r1, ip
 80066f0:	f8d9 c000 	ldr.w	ip, [r9]
 80066f4:	0c12      	lsrs	r2, r2, #16
 80066f6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80066fa:	fb0a c202 	mla	r2, sl, r2, ip
 80066fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006702:	b289      	uxth	r1, r1
 8006704:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006708:	4577      	cmp	r7, lr
 800670a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800670e:	f849 1b04 	str.w	r1, [r9], #4
 8006712:	d8e3      	bhi.n	80066dc <__multiply+0xb0>
 8006714:	9a01      	ldr	r2, [sp, #4]
 8006716:	f845 c002 	str.w	ip, [r5, r2]
 800671a:	9a03      	ldr	r2, [sp, #12]
 800671c:	3304      	adds	r3, #4
 800671e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006722:	f1b9 0f00 	cmp.w	r9, #0
 8006726:	d020      	beq.n	800676a <__multiply+0x13e>
 8006728:	46ae      	mov	lr, r5
 800672a:	f04f 0a00 	mov.w	sl, #0
 800672e:	6829      	ldr	r1, [r5, #0]
 8006730:	f104 0c14 	add.w	ip, r4, #20
 8006734:	f8bc b000 	ldrh.w	fp, [ip]
 8006738:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800673c:	b289      	uxth	r1, r1
 800673e:	fb09 220b 	mla	r2, r9, fp, r2
 8006742:	4492      	add	sl, r2
 8006744:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006748:	f84e 1b04 	str.w	r1, [lr], #4
 800674c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006750:	f8be 1000 	ldrh.w	r1, [lr]
 8006754:	0c12      	lsrs	r2, r2, #16
 8006756:	fb09 1102 	mla	r1, r9, r2, r1
 800675a:	4567      	cmp	r7, ip
 800675c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006760:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006764:	d8e6      	bhi.n	8006734 <__multiply+0x108>
 8006766:	9a01      	ldr	r2, [sp, #4]
 8006768:	50a9      	str	r1, [r5, r2]
 800676a:	3504      	adds	r5, #4
 800676c:	e79b      	b.n	80066a6 <__multiply+0x7a>
 800676e:	3e01      	subs	r6, #1
 8006770:	e79d      	b.n	80066ae <__multiply+0x82>
 8006772:	bf00      	nop
 8006774:	08007d7f 	.word	0x08007d7f
 8006778:	08007d90 	.word	0x08007d90

0800677c <__pow5mult>:
 800677c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006780:	4615      	mov	r5, r2
 8006782:	f012 0203 	ands.w	r2, r2, #3
 8006786:	4606      	mov	r6, r0
 8006788:	460f      	mov	r7, r1
 800678a:	d007      	beq.n	800679c <__pow5mult+0x20>
 800678c:	4c25      	ldr	r4, [pc, #148]	; (8006824 <__pow5mult+0xa8>)
 800678e:	3a01      	subs	r2, #1
 8006790:	2300      	movs	r3, #0
 8006792:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006796:	f7ff fe9f 	bl	80064d8 <__multadd>
 800679a:	4607      	mov	r7, r0
 800679c:	10ad      	asrs	r5, r5, #2
 800679e:	d03d      	beq.n	800681c <__pow5mult+0xa0>
 80067a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80067a2:	b97c      	cbnz	r4, 80067c4 <__pow5mult+0x48>
 80067a4:	2010      	movs	r0, #16
 80067a6:	f7ff fe11 	bl	80063cc <malloc>
 80067aa:	4602      	mov	r2, r0
 80067ac:	6270      	str	r0, [r6, #36]	; 0x24
 80067ae:	b928      	cbnz	r0, 80067bc <__pow5mult+0x40>
 80067b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80067b4:	4b1c      	ldr	r3, [pc, #112]	; (8006828 <__pow5mult+0xac>)
 80067b6:	481d      	ldr	r0, [pc, #116]	; (800682c <__pow5mult+0xb0>)
 80067b8:	f000 fc0a 	bl	8006fd0 <__assert_func>
 80067bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067c0:	6004      	str	r4, [r0, #0]
 80067c2:	60c4      	str	r4, [r0, #12]
 80067c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80067c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067cc:	b94c      	cbnz	r4, 80067e2 <__pow5mult+0x66>
 80067ce:	f240 2171 	movw	r1, #625	; 0x271
 80067d2:	4630      	mov	r0, r6
 80067d4:	f7ff ff14 	bl	8006600 <__i2b>
 80067d8:	2300      	movs	r3, #0
 80067da:	4604      	mov	r4, r0
 80067dc:	f8c8 0008 	str.w	r0, [r8, #8]
 80067e0:	6003      	str	r3, [r0, #0]
 80067e2:	f04f 0900 	mov.w	r9, #0
 80067e6:	07eb      	lsls	r3, r5, #31
 80067e8:	d50a      	bpl.n	8006800 <__pow5mult+0x84>
 80067ea:	4639      	mov	r1, r7
 80067ec:	4622      	mov	r2, r4
 80067ee:	4630      	mov	r0, r6
 80067f0:	f7ff ff1c 	bl	800662c <__multiply>
 80067f4:	4680      	mov	r8, r0
 80067f6:	4639      	mov	r1, r7
 80067f8:	4630      	mov	r0, r6
 80067fa:	f7ff fe4b 	bl	8006494 <_Bfree>
 80067fe:	4647      	mov	r7, r8
 8006800:	106d      	asrs	r5, r5, #1
 8006802:	d00b      	beq.n	800681c <__pow5mult+0xa0>
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	b938      	cbnz	r0, 8006818 <__pow5mult+0x9c>
 8006808:	4622      	mov	r2, r4
 800680a:	4621      	mov	r1, r4
 800680c:	4630      	mov	r0, r6
 800680e:	f7ff ff0d 	bl	800662c <__multiply>
 8006812:	6020      	str	r0, [r4, #0]
 8006814:	f8c0 9000 	str.w	r9, [r0]
 8006818:	4604      	mov	r4, r0
 800681a:	e7e4      	b.n	80067e6 <__pow5mult+0x6a>
 800681c:	4638      	mov	r0, r7
 800681e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006822:	bf00      	nop
 8006824:	08007ee0 	.word	0x08007ee0
 8006828:	08007d0d 	.word	0x08007d0d
 800682c:	08007d90 	.word	0x08007d90

08006830 <__lshift>:
 8006830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	460c      	mov	r4, r1
 8006836:	4607      	mov	r7, r0
 8006838:	4691      	mov	r9, r2
 800683a:	6923      	ldr	r3, [r4, #16]
 800683c:	6849      	ldr	r1, [r1, #4]
 800683e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006842:	68a3      	ldr	r3, [r4, #8]
 8006844:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006848:	f108 0601 	add.w	r6, r8, #1
 800684c:	42b3      	cmp	r3, r6
 800684e:	db0b      	blt.n	8006868 <__lshift+0x38>
 8006850:	4638      	mov	r0, r7
 8006852:	f7ff fddf 	bl	8006414 <_Balloc>
 8006856:	4605      	mov	r5, r0
 8006858:	b948      	cbnz	r0, 800686e <__lshift+0x3e>
 800685a:	4602      	mov	r2, r0
 800685c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006860:	4b29      	ldr	r3, [pc, #164]	; (8006908 <__lshift+0xd8>)
 8006862:	482a      	ldr	r0, [pc, #168]	; (800690c <__lshift+0xdc>)
 8006864:	f000 fbb4 	bl	8006fd0 <__assert_func>
 8006868:	3101      	adds	r1, #1
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	e7ee      	b.n	800684c <__lshift+0x1c>
 800686e:	2300      	movs	r3, #0
 8006870:	f100 0114 	add.w	r1, r0, #20
 8006874:	f100 0210 	add.w	r2, r0, #16
 8006878:	4618      	mov	r0, r3
 800687a:	4553      	cmp	r3, sl
 800687c:	db37      	blt.n	80068ee <__lshift+0xbe>
 800687e:	6920      	ldr	r0, [r4, #16]
 8006880:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006884:	f104 0314 	add.w	r3, r4, #20
 8006888:	f019 091f 	ands.w	r9, r9, #31
 800688c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006890:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006894:	d02f      	beq.n	80068f6 <__lshift+0xc6>
 8006896:	468a      	mov	sl, r1
 8006898:	f04f 0c00 	mov.w	ip, #0
 800689c:	f1c9 0e20 	rsb	lr, r9, #32
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	fa02 f209 	lsl.w	r2, r2, r9
 80068a6:	ea42 020c 	orr.w	r2, r2, ip
 80068aa:	f84a 2b04 	str.w	r2, [sl], #4
 80068ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80068b2:	4298      	cmp	r0, r3
 80068b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80068b8:	d8f2      	bhi.n	80068a0 <__lshift+0x70>
 80068ba:	1b03      	subs	r3, r0, r4
 80068bc:	3b15      	subs	r3, #21
 80068be:	f023 0303 	bic.w	r3, r3, #3
 80068c2:	3304      	adds	r3, #4
 80068c4:	f104 0215 	add.w	r2, r4, #21
 80068c8:	4290      	cmp	r0, r2
 80068ca:	bf38      	it	cc
 80068cc:	2304      	movcc	r3, #4
 80068ce:	f841 c003 	str.w	ip, [r1, r3]
 80068d2:	f1bc 0f00 	cmp.w	ip, #0
 80068d6:	d001      	beq.n	80068dc <__lshift+0xac>
 80068d8:	f108 0602 	add.w	r6, r8, #2
 80068dc:	3e01      	subs	r6, #1
 80068de:	4638      	mov	r0, r7
 80068e0:	4621      	mov	r1, r4
 80068e2:	612e      	str	r6, [r5, #16]
 80068e4:	f7ff fdd6 	bl	8006494 <_Bfree>
 80068e8:	4628      	mov	r0, r5
 80068ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80068f2:	3301      	adds	r3, #1
 80068f4:	e7c1      	b.n	800687a <__lshift+0x4a>
 80068f6:	3904      	subs	r1, #4
 80068f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80068fc:	4298      	cmp	r0, r3
 80068fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8006902:	d8f9      	bhi.n	80068f8 <__lshift+0xc8>
 8006904:	e7ea      	b.n	80068dc <__lshift+0xac>
 8006906:	bf00      	nop
 8006908:	08007d7f 	.word	0x08007d7f
 800690c:	08007d90 	.word	0x08007d90

08006910 <__mcmp>:
 8006910:	4603      	mov	r3, r0
 8006912:	690a      	ldr	r2, [r1, #16]
 8006914:	6900      	ldr	r0, [r0, #16]
 8006916:	b530      	push	{r4, r5, lr}
 8006918:	1a80      	subs	r0, r0, r2
 800691a:	d10d      	bne.n	8006938 <__mcmp+0x28>
 800691c:	3314      	adds	r3, #20
 800691e:	3114      	adds	r1, #20
 8006920:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006924:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006928:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800692c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006930:	4295      	cmp	r5, r2
 8006932:	d002      	beq.n	800693a <__mcmp+0x2a>
 8006934:	d304      	bcc.n	8006940 <__mcmp+0x30>
 8006936:	2001      	movs	r0, #1
 8006938:	bd30      	pop	{r4, r5, pc}
 800693a:	42a3      	cmp	r3, r4
 800693c:	d3f4      	bcc.n	8006928 <__mcmp+0x18>
 800693e:	e7fb      	b.n	8006938 <__mcmp+0x28>
 8006940:	f04f 30ff 	mov.w	r0, #4294967295
 8006944:	e7f8      	b.n	8006938 <__mcmp+0x28>
	...

08006948 <__mdiff>:
 8006948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800694c:	460d      	mov	r5, r1
 800694e:	4607      	mov	r7, r0
 8006950:	4611      	mov	r1, r2
 8006952:	4628      	mov	r0, r5
 8006954:	4614      	mov	r4, r2
 8006956:	f7ff ffdb 	bl	8006910 <__mcmp>
 800695a:	1e06      	subs	r6, r0, #0
 800695c:	d111      	bne.n	8006982 <__mdiff+0x3a>
 800695e:	4631      	mov	r1, r6
 8006960:	4638      	mov	r0, r7
 8006962:	f7ff fd57 	bl	8006414 <_Balloc>
 8006966:	4602      	mov	r2, r0
 8006968:	b928      	cbnz	r0, 8006976 <__mdiff+0x2e>
 800696a:	f240 2132 	movw	r1, #562	; 0x232
 800696e:	4b3a      	ldr	r3, [pc, #232]	; (8006a58 <__mdiff+0x110>)
 8006970:	483a      	ldr	r0, [pc, #232]	; (8006a5c <__mdiff+0x114>)
 8006972:	f000 fb2d 	bl	8006fd0 <__assert_func>
 8006976:	2301      	movs	r3, #1
 8006978:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800697c:	4610      	mov	r0, r2
 800697e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006982:	bfa4      	itt	ge
 8006984:	4623      	movge	r3, r4
 8006986:	462c      	movge	r4, r5
 8006988:	4638      	mov	r0, r7
 800698a:	6861      	ldr	r1, [r4, #4]
 800698c:	bfa6      	itte	ge
 800698e:	461d      	movge	r5, r3
 8006990:	2600      	movge	r6, #0
 8006992:	2601      	movlt	r6, #1
 8006994:	f7ff fd3e 	bl	8006414 <_Balloc>
 8006998:	4602      	mov	r2, r0
 800699a:	b918      	cbnz	r0, 80069a4 <__mdiff+0x5c>
 800699c:	f44f 7110 	mov.w	r1, #576	; 0x240
 80069a0:	4b2d      	ldr	r3, [pc, #180]	; (8006a58 <__mdiff+0x110>)
 80069a2:	e7e5      	b.n	8006970 <__mdiff+0x28>
 80069a4:	f102 0814 	add.w	r8, r2, #20
 80069a8:	46c2      	mov	sl, r8
 80069aa:	f04f 0c00 	mov.w	ip, #0
 80069ae:	6927      	ldr	r7, [r4, #16]
 80069b0:	60c6      	str	r6, [r0, #12]
 80069b2:	692e      	ldr	r6, [r5, #16]
 80069b4:	f104 0014 	add.w	r0, r4, #20
 80069b8:	f105 0914 	add.w	r9, r5, #20
 80069bc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80069c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80069c4:	3410      	adds	r4, #16
 80069c6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80069ca:	f859 3b04 	ldr.w	r3, [r9], #4
 80069ce:	fa1f f18b 	uxth.w	r1, fp
 80069d2:	448c      	add	ip, r1
 80069d4:	b299      	uxth	r1, r3
 80069d6:	0c1b      	lsrs	r3, r3, #16
 80069d8:	ebac 0101 	sub.w	r1, ip, r1
 80069dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80069e0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80069e4:	b289      	uxth	r1, r1
 80069e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80069ea:	454e      	cmp	r6, r9
 80069ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80069f0:	f84a 3b04 	str.w	r3, [sl], #4
 80069f4:	d8e7      	bhi.n	80069c6 <__mdiff+0x7e>
 80069f6:	1b73      	subs	r3, r6, r5
 80069f8:	3b15      	subs	r3, #21
 80069fa:	f023 0303 	bic.w	r3, r3, #3
 80069fe:	3515      	adds	r5, #21
 8006a00:	3304      	adds	r3, #4
 8006a02:	42ae      	cmp	r6, r5
 8006a04:	bf38      	it	cc
 8006a06:	2304      	movcc	r3, #4
 8006a08:	4418      	add	r0, r3
 8006a0a:	4443      	add	r3, r8
 8006a0c:	461e      	mov	r6, r3
 8006a0e:	4605      	mov	r5, r0
 8006a10:	4575      	cmp	r5, lr
 8006a12:	d30e      	bcc.n	8006a32 <__mdiff+0xea>
 8006a14:	f10e 0103 	add.w	r1, lr, #3
 8006a18:	1a09      	subs	r1, r1, r0
 8006a1a:	f021 0103 	bic.w	r1, r1, #3
 8006a1e:	3803      	subs	r0, #3
 8006a20:	4586      	cmp	lr, r0
 8006a22:	bf38      	it	cc
 8006a24:	2100      	movcc	r1, #0
 8006a26:	4419      	add	r1, r3
 8006a28:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006a2c:	b18b      	cbz	r3, 8006a52 <__mdiff+0x10a>
 8006a2e:	6117      	str	r7, [r2, #16]
 8006a30:	e7a4      	b.n	800697c <__mdiff+0x34>
 8006a32:	f855 8b04 	ldr.w	r8, [r5], #4
 8006a36:	fa1f f188 	uxth.w	r1, r8
 8006a3a:	4461      	add	r1, ip
 8006a3c:	140c      	asrs	r4, r1, #16
 8006a3e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a42:	b289      	uxth	r1, r1
 8006a44:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006a48:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006a4c:	f846 1b04 	str.w	r1, [r6], #4
 8006a50:	e7de      	b.n	8006a10 <__mdiff+0xc8>
 8006a52:	3f01      	subs	r7, #1
 8006a54:	e7e8      	b.n	8006a28 <__mdiff+0xe0>
 8006a56:	bf00      	nop
 8006a58:	08007d7f 	.word	0x08007d7f
 8006a5c:	08007d90 	.word	0x08007d90

08006a60 <__d2b>:
 8006a60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006a64:	2101      	movs	r1, #1
 8006a66:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006a6a:	4690      	mov	r8, r2
 8006a6c:	461d      	mov	r5, r3
 8006a6e:	f7ff fcd1 	bl	8006414 <_Balloc>
 8006a72:	4604      	mov	r4, r0
 8006a74:	b930      	cbnz	r0, 8006a84 <__d2b+0x24>
 8006a76:	4602      	mov	r2, r0
 8006a78:	f240 310a 	movw	r1, #778	; 0x30a
 8006a7c:	4b24      	ldr	r3, [pc, #144]	; (8006b10 <__d2b+0xb0>)
 8006a7e:	4825      	ldr	r0, [pc, #148]	; (8006b14 <__d2b+0xb4>)
 8006a80:	f000 faa6 	bl	8006fd0 <__assert_func>
 8006a84:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006a88:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006a8c:	bb2d      	cbnz	r5, 8006ada <__d2b+0x7a>
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	f1b8 0300 	subs.w	r3, r8, #0
 8006a94:	d026      	beq.n	8006ae4 <__d2b+0x84>
 8006a96:	4668      	mov	r0, sp
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	f7ff fd83 	bl	80065a4 <__lo0bits>
 8006a9e:	9900      	ldr	r1, [sp, #0]
 8006aa0:	b1f0      	cbz	r0, 8006ae0 <__d2b+0x80>
 8006aa2:	9a01      	ldr	r2, [sp, #4]
 8006aa4:	f1c0 0320 	rsb	r3, r0, #32
 8006aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aac:	430b      	orrs	r3, r1
 8006aae:	40c2      	lsrs	r2, r0
 8006ab0:	6163      	str	r3, [r4, #20]
 8006ab2:	9201      	str	r2, [sp, #4]
 8006ab4:	9b01      	ldr	r3, [sp, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	bf14      	ite	ne
 8006aba:	2102      	movne	r1, #2
 8006abc:	2101      	moveq	r1, #1
 8006abe:	61a3      	str	r3, [r4, #24]
 8006ac0:	6121      	str	r1, [r4, #16]
 8006ac2:	b1c5      	cbz	r5, 8006af6 <__d2b+0x96>
 8006ac4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ac8:	4405      	add	r5, r0
 8006aca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ace:	603d      	str	r5, [r7, #0]
 8006ad0:	6030      	str	r0, [r6, #0]
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	b002      	add	sp, #8
 8006ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ade:	e7d6      	b.n	8006a8e <__d2b+0x2e>
 8006ae0:	6161      	str	r1, [r4, #20]
 8006ae2:	e7e7      	b.n	8006ab4 <__d2b+0x54>
 8006ae4:	a801      	add	r0, sp, #4
 8006ae6:	f7ff fd5d 	bl	80065a4 <__lo0bits>
 8006aea:	2101      	movs	r1, #1
 8006aec:	9b01      	ldr	r3, [sp, #4]
 8006aee:	6121      	str	r1, [r4, #16]
 8006af0:	6163      	str	r3, [r4, #20]
 8006af2:	3020      	adds	r0, #32
 8006af4:	e7e5      	b.n	8006ac2 <__d2b+0x62>
 8006af6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006afa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006afe:	6038      	str	r0, [r7, #0]
 8006b00:	6918      	ldr	r0, [r3, #16]
 8006b02:	f7ff fd2f 	bl	8006564 <__hi0bits>
 8006b06:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006b0a:	6031      	str	r1, [r6, #0]
 8006b0c:	e7e1      	b.n	8006ad2 <__d2b+0x72>
 8006b0e:	bf00      	nop
 8006b10:	08007d7f 	.word	0x08007d7f
 8006b14:	08007d90 	.word	0x08007d90

08006b18 <_calloc_r>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	fba1 5402 	umull	r5, r4, r1, r2
 8006b1e:	b934      	cbnz	r4, 8006b2e <_calloc_r+0x16>
 8006b20:	4629      	mov	r1, r5
 8006b22:	f000 f875 	bl	8006c10 <_malloc_r>
 8006b26:	4606      	mov	r6, r0
 8006b28:	b928      	cbnz	r0, 8006b36 <_calloc_r+0x1e>
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	bd70      	pop	{r4, r5, r6, pc}
 8006b2e:	220c      	movs	r2, #12
 8006b30:	2600      	movs	r6, #0
 8006b32:	6002      	str	r2, [r0, #0]
 8006b34:	e7f9      	b.n	8006b2a <_calloc_r+0x12>
 8006b36:	462a      	mov	r2, r5
 8006b38:	4621      	mov	r1, r4
 8006b3a:	f7fe f93f 	bl	8004dbc <memset>
 8006b3e:	e7f4      	b.n	8006b2a <_calloc_r+0x12>

08006b40 <_free_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4605      	mov	r5, r0
 8006b44:	2900      	cmp	r1, #0
 8006b46:	d040      	beq.n	8006bca <_free_r+0x8a>
 8006b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b4c:	1f0c      	subs	r4, r1, #4
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	bfb8      	it	lt
 8006b52:	18e4      	addlt	r4, r4, r3
 8006b54:	f000 fa98 	bl	8007088 <__malloc_lock>
 8006b58:	4a1c      	ldr	r2, [pc, #112]	; (8006bcc <_free_r+0x8c>)
 8006b5a:	6813      	ldr	r3, [r2, #0]
 8006b5c:	b933      	cbnz	r3, 8006b6c <_free_r+0x2c>
 8006b5e:	6063      	str	r3, [r4, #4]
 8006b60:	6014      	str	r4, [r2, #0]
 8006b62:	4628      	mov	r0, r5
 8006b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b68:	f000 ba94 	b.w	8007094 <__malloc_unlock>
 8006b6c:	42a3      	cmp	r3, r4
 8006b6e:	d908      	bls.n	8006b82 <_free_r+0x42>
 8006b70:	6820      	ldr	r0, [r4, #0]
 8006b72:	1821      	adds	r1, r4, r0
 8006b74:	428b      	cmp	r3, r1
 8006b76:	bf01      	itttt	eq
 8006b78:	6819      	ldreq	r1, [r3, #0]
 8006b7a:	685b      	ldreq	r3, [r3, #4]
 8006b7c:	1809      	addeq	r1, r1, r0
 8006b7e:	6021      	streq	r1, [r4, #0]
 8006b80:	e7ed      	b.n	8006b5e <_free_r+0x1e>
 8006b82:	461a      	mov	r2, r3
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	b10b      	cbz	r3, 8006b8c <_free_r+0x4c>
 8006b88:	42a3      	cmp	r3, r4
 8006b8a:	d9fa      	bls.n	8006b82 <_free_r+0x42>
 8006b8c:	6811      	ldr	r1, [r2, #0]
 8006b8e:	1850      	adds	r0, r2, r1
 8006b90:	42a0      	cmp	r0, r4
 8006b92:	d10b      	bne.n	8006bac <_free_r+0x6c>
 8006b94:	6820      	ldr	r0, [r4, #0]
 8006b96:	4401      	add	r1, r0
 8006b98:	1850      	adds	r0, r2, r1
 8006b9a:	4283      	cmp	r3, r0
 8006b9c:	6011      	str	r1, [r2, #0]
 8006b9e:	d1e0      	bne.n	8006b62 <_free_r+0x22>
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	4401      	add	r1, r0
 8006ba6:	6011      	str	r1, [r2, #0]
 8006ba8:	6053      	str	r3, [r2, #4]
 8006baa:	e7da      	b.n	8006b62 <_free_r+0x22>
 8006bac:	d902      	bls.n	8006bb4 <_free_r+0x74>
 8006bae:	230c      	movs	r3, #12
 8006bb0:	602b      	str	r3, [r5, #0]
 8006bb2:	e7d6      	b.n	8006b62 <_free_r+0x22>
 8006bb4:	6820      	ldr	r0, [r4, #0]
 8006bb6:	1821      	adds	r1, r4, r0
 8006bb8:	428b      	cmp	r3, r1
 8006bba:	bf01      	itttt	eq
 8006bbc:	6819      	ldreq	r1, [r3, #0]
 8006bbe:	685b      	ldreq	r3, [r3, #4]
 8006bc0:	1809      	addeq	r1, r1, r0
 8006bc2:	6021      	streq	r1, [r4, #0]
 8006bc4:	6063      	str	r3, [r4, #4]
 8006bc6:	6054      	str	r4, [r2, #4]
 8006bc8:	e7cb      	b.n	8006b62 <_free_r+0x22>
 8006bca:	bd38      	pop	{r3, r4, r5, pc}
 8006bcc:	20000318 	.word	0x20000318

08006bd0 <sbrk_aligned>:
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	4e0e      	ldr	r6, [pc, #56]	; (8006c0c <sbrk_aligned+0x3c>)
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	6831      	ldr	r1, [r6, #0]
 8006bd8:	4605      	mov	r5, r0
 8006bda:	b911      	cbnz	r1, 8006be2 <sbrk_aligned+0x12>
 8006bdc:	f000 f9e8 	bl	8006fb0 <_sbrk_r>
 8006be0:	6030      	str	r0, [r6, #0]
 8006be2:	4621      	mov	r1, r4
 8006be4:	4628      	mov	r0, r5
 8006be6:	f000 f9e3 	bl	8006fb0 <_sbrk_r>
 8006bea:	1c43      	adds	r3, r0, #1
 8006bec:	d00a      	beq.n	8006c04 <sbrk_aligned+0x34>
 8006bee:	1cc4      	adds	r4, r0, #3
 8006bf0:	f024 0403 	bic.w	r4, r4, #3
 8006bf4:	42a0      	cmp	r0, r4
 8006bf6:	d007      	beq.n	8006c08 <sbrk_aligned+0x38>
 8006bf8:	1a21      	subs	r1, r4, r0
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f000 f9d8 	bl	8006fb0 <_sbrk_r>
 8006c00:	3001      	adds	r0, #1
 8006c02:	d101      	bne.n	8006c08 <sbrk_aligned+0x38>
 8006c04:	f04f 34ff 	mov.w	r4, #4294967295
 8006c08:	4620      	mov	r0, r4
 8006c0a:	bd70      	pop	{r4, r5, r6, pc}
 8006c0c:	2000031c 	.word	0x2000031c

08006c10 <_malloc_r>:
 8006c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c14:	1ccd      	adds	r5, r1, #3
 8006c16:	f025 0503 	bic.w	r5, r5, #3
 8006c1a:	3508      	adds	r5, #8
 8006c1c:	2d0c      	cmp	r5, #12
 8006c1e:	bf38      	it	cc
 8006c20:	250c      	movcc	r5, #12
 8006c22:	2d00      	cmp	r5, #0
 8006c24:	4607      	mov	r7, r0
 8006c26:	db01      	blt.n	8006c2c <_malloc_r+0x1c>
 8006c28:	42a9      	cmp	r1, r5
 8006c2a:	d905      	bls.n	8006c38 <_malloc_r+0x28>
 8006c2c:	230c      	movs	r3, #12
 8006c2e:	2600      	movs	r6, #0
 8006c30:	603b      	str	r3, [r7, #0]
 8006c32:	4630      	mov	r0, r6
 8006c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c38:	4e2e      	ldr	r6, [pc, #184]	; (8006cf4 <_malloc_r+0xe4>)
 8006c3a:	f000 fa25 	bl	8007088 <__malloc_lock>
 8006c3e:	6833      	ldr	r3, [r6, #0]
 8006c40:	461c      	mov	r4, r3
 8006c42:	bb34      	cbnz	r4, 8006c92 <_malloc_r+0x82>
 8006c44:	4629      	mov	r1, r5
 8006c46:	4638      	mov	r0, r7
 8006c48:	f7ff ffc2 	bl	8006bd0 <sbrk_aligned>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	4604      	mov	r4, r0
 8006c50:	d14d      	bne.n	8006cee <_malloc_r+0xde>
 8006c52:	6834      	ldr	r4, [r6, #0]
 8006c54:	4626      	mov	r6, r4
 8006c56:	2e00      	cmp	r6, #0
 8006c58:	d140      	bne.n	8006cdc <_malloc_r+0xcc>
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	4638      	mov	r0, r7
 8006c60:	eb04 0803 	add.w	r8, r4, r3
 8006c64:	f000 f9a4 	bl	8006fb0 <_sbrk_r>
 8006c68:	4580      	cmp	r8, r0
 8006c6a:	d13a      	bne.n	8006ce2 <_malloc_r+0xd2>
 8006c6c:	6821      	ldr	r1, [r4, #0]
 8006c6e:	3503      	adds	r5, #3
 8006c70:	1a6d      	subs	r5, r5, r1
 8006c72:	f025 0503 	bic.w	r5, r5, #3
 8006c76:	3508      	adds	r5, #8
 8006c78:	2d0c      	cmp	r5, #12
 8006c7a:	bf38      	it	cc
 8006c7c:	250c      	movcc	r5, #12
 8006c7e:	4638      	mov	r0, r7
 8006c80:	4629      	mov	r1, r5
 8006c82:	f7ff ffa5 	bl	8006bd0 <sbrk_aligned>
 8006c86:	3001      	adds	r0, #1
 8006c88:	d02b      	beq.n	8006ce2 <_malloc_r+0xd2>
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	442b      	add	r3, r5
 8006c8e:	6023      	str	r3, [r4, #0]
 8006c90:	e00e      	b.n	8006cb0 <_malloc_r+0xa0>
 8006c92:	6822      	ldr	r2, [r4, #0]
 8006c94:	1b52      	subs	r2, r2, r5
 8006c96:	d41e      	bmi.n	8006cd6 <_malloc_r+0xc6>
 8006c98:	2a0b      	cmp	r2, #11
 8006c9a:	d916      	bls.n	8006cca <_malloc_r+0xba>
 8006c9c:	1961      	adds	r1, r4, r5
 8006c9e:	42a3      	cmp	r3, r4
 8006ca0:	6025      	str	r5, [r4, #0]
 8006ca2:	bf18      	it	ne
 8006ca4:	6059      	strne	r1, [r3, #4]
 8006ca6:	6863      	ldr	r3, [r4, #4]
 8006ca8:	bf08      	it	eq
 8006caa:	6031      	streq	r1, [r6, #0]
 8006cac:	5162      	str	r2, [r4, r5]
 8006cae:	604b      	str	r3, [r1, #4]
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	f104 060b 	add.w	r6, r4, #11
 8006cb6:	f000 f9ed 	bl	8007094 <__malloc_unlock>
 8006cba:	f026 0607 	bic.w	r6, r6, #7
 8006cbe:	1d23      	adds	r3, r4, #4
 8006cc0:	1af2      	subs	r2, r6, r3
 8006cc2:	d0b6      	beq.n	8006c32 <_malloc_r+0x22>
 8006cc4:	1b9b      	subs	r3, r3, r6
 8006cc6:	50a3      	str	r3, [r4, r2]
 8006cc8:	e7b3      	b.n	8006c32 <_malloc_r+0x22>
 8006cca:	6862      	ldr	r2, [r4, #4]
 8006ccc:	42a3      	cmp	r3, r4
 8006cce:	bf0c      	ite	eq
 8006cd0:	6032      	streq	r2, [r6, #0]
 8006cd2:	605a      	strne	r2, [r3, #4]
 8006cd4:	e7ec      	b.n	8006cb0 <_malloc_r+0xa0>
 8006cd6:	4623      	mov	r3, r4
 8006cd8:	6864      	ldr	r4, [r4, #4]
 8006cda:	e7b2      	b.n	8006c42 <_malloc_r+0x32>
 8006cdc:	4634      	mov	r4, r6
 8006cde:	6876      	ldr	r6, [r6, #4]
 8006ce0:	e7b9      	b.n	8006c56 <_malloc_r+0x46>
 8006ce2:	230c      	movs	r3, #12
 8006ce4:	4638      	mov	r0, r7
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	f000 f9d4 	bl	8007094 <__malloc_unlock>
 8006cec:	e7a1      	b.n	8006c32 <_malloc_r+0x22>
 8006cee:	6025      	str	r5, [r4, #0]
 8006cf0:	e7de      	b.n	8006cb0 <_malloc_r+0xa0>
 8006cf2:	bf00      	nop
 8006cf4:	20000318 	.word	0x20000318

08006cf8 <__ssputs_r>:
 8006cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cfc:	688e      	ldr	r6, [r1, #8]
 8006cfe:	4682      	mov	sl, r0
 8006d00:	429e      	cmp	r6, r3
 8006d02:	460c      	mov	r4, r1
 8006d04:	4690      	mov	r8, r2
 8006d06:	461f      	mov	r7, r3
 8006d08:	d838      	bhi.n	8006d7c <__ssputs_r+0x84>
 8006d0a:	898a      	ldrh	r2, [r1, #12]
 8006d0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d10:	d032      	beq.n	8006d78 <__ssputs_r+0x80>
 8006d12:	6825      	ldr	r5, [r4, #0]
 8006d14:	6909      	ldr	r1, [r1, #16]
 8006d16:	3301      	adds	r3, #1
 8006d18:	eba5 0901 	sub.w	r9, r5, r1
 8006d1c:	6965      	ldr	r5, [r4, #20]
 8006d1e:	444b      	add	r3, r9
 8006d20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d28:	106d      	asrs	r5, r5, #1
 8006d2a:	429d      	cmp	r5, r3
 8006d2c:	bf38      	it	cc
 8006d2e:	461d      	movcc	r5, r3
 8006d30:	0553      	lsls	r3, r2, #21
 8006d32:	d531      	bpl.n	8006d98 <__ssputs_r+0xa0>
 8006d34:	4629      	mov	r1, r5
 8006d36:	f7ff ff6b 	bl	8006c10 <_malloc_r>
 8006d3a:	4606      	mov	r6, r0
 8006d3c:	b950      	cbnz	r0, 8006d54 <__ssputs_r+0x5c>
 8006d3e:	230c      	movs	r3, #12
 8006d40:	f04f 30ff 	mov.w	r0, #4294967295
 8006d44:	f8ca 3000 	str.w	r3, [sl]
 8006d48:	89a3      	ldrh	r3, [r4, #12]
 8006d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d4e:	81a3      	strh	r3, [r4, #12]
 8006d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d54:	464a      	mov	r2, r9
 8006d56:	6921      	ldr	r1, [r4, #16]
 8006d58:	f7ff fb4e 	bl	80063f8 <memcpy>
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d66:	81a3      	strh	r3, [r4, #12]
 8006d68:	6126      	str	r6, [r4, #16]
 8006d6a:	444e      	add	r6, r9
 8006d6c:	6026      	str	r6, [r4, #0]
 8006d6e:	463e      	mov	r6, r7
 8006d70:	6165      	str	r5, [r4, #20]
 8006d72:	eba5 0509 	sub.w	r5, r5, r9
 8006d76:	60a5      	str	r5, [r4, #8]
 8006d78:	42be      	cmp	r6, r7
 8006d7a:	d900      	bls.n	8006d7e <__ssputs_r+0x86>
 8006d7c:	463e      	mov	r6, r7
 8006d7e:	4632      	mov	r2, r6
 8006d80:	4641      	mov	r1, r8
 8006d82:	6820      	ldr	r0, [r4, #0]
 8006d84:	f000 f966 	bl	8007054 <memmove>
 8006d88:	68a3      	ldr	r3, [r4, #8]
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	1b9b      	subs	r3, r3, r6
 8006d8e:	60a3      	str	r3, [r4, #8]
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	4433      	add	r3, r6
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	e7db      	b.n	8006d50 <__ssputs_r+0x58>
 8006d98:	462a      	mov	r2, r5
 8006d9a:	f000 f981 	bl	80070a0 <_realloc_r>
 8006d9e:	4606      	mov	r6, r0
 8006da0:	2800      	cmp	r0, #0
 8006da2:	d1e1      	bne.n	8006d68 <__ssputs_r+0x70>
 8006da4:	4650      	mov	r0, sl
 8006da6:	6921      	ldr	r1, [r4, #16]
 8006da8:	f7ff feca 	bl	8006b40 <_free_r>
 8006dac:	e7c7      	b.n	8006d3e <__ssputs_r+0x46>
	...

08006db0 <_svfiprintf_r>:
 8006db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db4:	4698      	mov	r8, r3
 8006db6:	898b      	ldrh	r3, [r1, #12]
 8006db8:	4607      	mov	r7, r0
 8006dba:	061b      	lsls	r3, r3, #24
 8006dbc:	460d      	mov	r5, r1
 8006dbe:	4614      	mov	r4, r2
 8006dc0:	b09d      	sub	sp, #116	; 0x74
 8006dc2:	d50e      	bpl.n	8006de2 <_svfiprintf_r+0x32>
 8006dc4:	690b      	ldr	r3, [r1, #16]
 8006dc6:	b963      	cbnz	r3, 8006de2 <_svfiprintf_r+0x32>
 8006dc8:	2140      	movs	r1, #64	; 0x40
 8006dca:	f7ff ff21 	bl	8006c10 <_malloc_r>
 8006dce:	6028      	str	r0, [r5, #0]
 8006dd0:	6128      	str	r0, [r5, #16]
 8006dd2:	b920      	cbnz	r0, 8006dde <_svfiprintf_r+0x2e>
 8006dd4:	230c      	movs	r3, #12
 8006dd6:	603b      	str	r3, [r7, #0]
 8006dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ddc:	e0d1      	b.n	8006f82 <_svfiprintf_r+0x1d2>
 8006dde:	2340      	movs	r3, #64	; 0x40
 8006de0:	616b      	str	r3, [r5, #20]
 8006de2:	2300      	movs	r3, #0
 8006de4:	9309      	str	r3, [sp, #36]	; 0x24
 8006de6:	2320      	movs	r3, #32
 8006de8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dec:	2330      	movs	r3, #48	; 0x30
 8006dee:	f04f 0901 	mov.w	r9, #1
 8006df2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006df6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006f9c <_svfiprintf_r+0x1ec>
 8006dfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dfe:	4623      	mov	r3, r4
 8006e00:	469a      	mov	sl, r3
 8006e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e06:	b10a      	cbz	r2, 8006e0c <_svfiprintf_r+0x5c>
 8006e08:	2a25      	cmp	r2, #37	; 0x25
 8006e0a:	d1f9      	bne.n	8006e00 <_svfiprintf_r+0x50>
 8006e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8006e10:	d00b      	beq.n	8006e2a <_svfiprintf_r+0x7a>
 8006e12:	465b      	mov	r3, fp
 8006e14:	4622      	mov	r2, r4
 8006e16:	4629      	mov	r1, r5
 8006e18:	4638      	mov	r0, r7
 8006e1a:	f7ff ff6d 	bl	8006cf8 <__ssputs_r>
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f000 80aa 	beq.w	8006f78 <_svfiprintf_r+0x1c8>
 8006e24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e26:	445a      	add	r2, fp
 8006e28:	9209      	str	r2, [sp, #36]	; 0x24
 8006e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 80a2 	beq.w	8006f78 <_svfiprintf_r+0x1c8>
 8006e34:	2300      	movs	r3, #0
 8006e36:	f04f 32ff 	mov.w	r2, #4294967295
 8006e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e3e:	f10a 0a01 	add.w	sl, sl, #1
 8006e42:	9304      	str	r3, [sp, #16]
 8006e44:	9307      	str	r3, [sp, #28]
 8006e46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e4a:	931a      	str	r3, [sp, #104]	; 0x68
 8006e4c:	4654      	mov	r4, sl
 8006e4e:	2205      	movs	r2, #5
 8006e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e54:	4851      	ldr	r0, [pc, #324]	; (8006f9c <_svfiprintf_r+0x1ec>)
 8006e56:	f7ff fac1 	bl	80063dc <memchr>
 8006e5a:	9a04      	ldr	r2, [sp, #16]
 8006e5c:	b9d8      	cbnz	r0, 8006e96 <_svfiprintf_r+0xe6>
 8006e5e:	06d0      	lsls	r0, r2, #27
 8006e60:	bf44      	itt	mi
 8006e62:	2320      	movmi	r3, #32
 8006e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e68:	0711      	lsls	r1, r2, #28
 8006e6a:	bf44      	itt	mi
 8006e6c:	232b      	movmi	r3, #43	; 0x2b
 8006e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e72:	f89a 3000 	ldrb.w	r3, [sl]
 8006e76:	2b2a      	cmp	r3, #42	; 0x2a
 8006e78:	d015      	beq.n	8006ea6 <_svfiprintf_r+0xf6>
 8006e7a:	4654      	mov	r4, sl
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	f04f 0c0a 	mov.w	ip, #10
 8006e82:	9a07      	ldr	r2, [sp, #28]
 8006e84:	4621      	mov	r1, r4
 8006e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e8a:	3b30      	subs	r3, #48	; 0x30
 8006e8c:	2b09      	cmp	r3, #9
 8006e8e:	d94e      	bls.n	8006f2e <_svfiprintf_r+0x17e>
 8006e90:	b1b0      	cbz	r0, 8006ec0 <_svfiprintf_r+0x110>
 8006e92:	9207      	str	r2, [sp, #28]
 8006e94:	e014      	b.n	8006ec0 <_svfiprintf_r+0x110>
 8006e96:	eba0 0308 	sub.w	r3, r0, r8
 8006e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	46a2      	mov	sl, r4
 8006ea2:	9304      	str	r3, [sp, #16]
 8006ea4:	e7d2      	b.n	8006e4c <_svfiprintf_r+0x9c>
 8006ea6:	9b03      	ldr	r3, [sp, #12]
 8006ea8:	1d19      	adds	r1, r3, #4
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	9103      	str	r1, [sp, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	bfbb      	ittet	lt
 8006eb2:	425b      	neglt	r3, r3
 8006eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8006eb8:	9307      	strge	r3, [sp, #28]
 8006eba:	9307      	strlt	r3, [sp, #28]
 8006ebc:	bfb8      	it	lt
 8006ebe:	9204      	strlt	r2, [sp, #16]
 8006ec0:	7823      	ldrb	r3, [r4, #0]
 8006ec2:	2b2e      	cmp	r3, #46	; 0x2e
 8006ec4:	d10c      	bne.n	8006ee0 <_svfiprintf_r+0x130>
 8006ec6:	7863      	ldrb	r3, [r4, #1]
 8006ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8006eca:	d135      	bne.n	8006f38 <_svfiprintf_r+0x188>
 8006ecc:	9b03      	ldr	r3, [sp, #12]
 8006ece:	3402      	adds	r4, #2
 8006ed0:	1d1a      	adds	r2, r3, #4
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	9203      	str	r2, [sp, #12]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	bfb8      	it	lt
 8006eda:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ede:	9305      	str	r3, [sp, #20]
 8006ee0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006fa0 <_svfiprintf_r+0x1f0>
 8006ee4:	2203      	movs	r2, #3
 8006ee6:	4650      	mov	r0, sl
 8006ee8:	7821      	ldrb	r1, [r4, #0]
 8006eea:	f7ff fa77 	bl	80063dc <memchr>
 8006eee:	b140      	cbz	r0, 8006f02 <_svfiprintf_r+0x152>
 8006ef0:	2340      	movs	r3, #64	; 0x40
 8006ef2:	eba0 000a 	sub.w	r0, r0, sl
 8006ef6:	fa03 f000 	lsl.w	r0, r3, r0
 8006efa:	9b04      	ldr	r3, [sp, #16]
 8006efc:	3401      	adds	r4, #1
 8006efe:	4303      	orrs	r3, r0
 8006f00:	9304      	str	r3, [sp, #16]
 8006f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f06:	2206      	movs	r2, #6
 8006f08:	4826      	ldr	r0, [pc, #152]	; (8006fa4 <_svfiprintf_r+0x1f4>)
 8006f0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f0e:	f7ff fa65 	bl	80063dc <memchr>
 8006f12:	2800      	cmp	r0, #0
 8006f14:	d038      	beq.n	8006f88 <_svfiprintf_r+0x1d8>
 8006f16:	4b24      	ldr	r3, [pc, #144]	; (8006fa8 <_svfiprintf_r+0x1f8>)
 8006f18:	bb1b      	cbnz	r3, 8006f62 <_svfiprintf_r+0x1b2>
 8006f1a:	9b03      	ldr	r3, [sp, #12]
 8006f1c:	3307      	adds	r3, #7
 8006f1e:	f023 0307 	bic.w	r3, r3, #7
 8006f22:	3308      	adds	r3, #8
 8006f24:	9303      	str	r3, [sp, #12]
 8006f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f28:	4433      	add	r3, r6
 8006f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f2c:	e767      	b.n	8006dfe <_svfiprintf_r+0x4e>
 8006f2e:	460c      	mov	r4, r1
 8006f30:	2001      	movs	r0, #1
 8006f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f36:	e7a5      	b.n	8006e84 <_svfiprintf_r+0xd4>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f04f 0c0a 	mov.w	ip, #10
 8006f3e:	4619      	mov	r1, r3
 8006f40:	3401      	adds	r4, #1
 8006f42:	9305      	str	r3, [sp, #20]
 8006f44:	4620      	mov	r0, r4
 8006f46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f4a:	3a30      	subs	r2, #48	; 0x30
 8006f4c:	2a09      	cmp	r2, #9
 8006f4e:	d903      	bls.n	8006f58 <_svfiprintf_r+0x1a8>
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d0c5      	beq.n	8006ee0 <_svfiprintf_r+0x130>
 8006f54:	9105      	str	r1, [sp, #20]
 8006f56:	e7c3      	b.n	8006ee0 <_svfiprintf_r+0x130>
 8006f58:	4604      	mov	r4, r0
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f60:	e7f0      	b.n	8006f44 <_svfiprintf_r+0x194>
 8006f62:	ab03      	add	r3, sp, #12
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	462a      	mov	r2, r5
 8006f68:	4638      	mov	r0, r7
 8006f6a:	4b10      	ldr	r3, [pc, #64]	; (8006fac <_svfiprintf_r+0x1fc>)
 8006f6c:	a904      	add	r1, sp, #16
 8006f6e:	f7fd ffcb 	bl	8004f08 <_printf_float>
 8006f72:	1c42      	adds	r2, r0, #1
 8006f74:	4606      	mov	r6, r0
 8006f76:	d1d6      	bne.n	8006f26 <_svfiprintf_r+0x176>
 8006f78:	89ab      	ldrh	r3, [r5, #12]
 8006f7a:	065b      	lsls	r3, r3, #25
 8006f7c:	f53f af2c 	bmi.w	8006dd8 <_svfiprintf_r+0x28>
 8006f80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f82:	b01d      	add	sp, #116	; 0x74
 8006f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f88:	ab03      	add	r3, sp, #12
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	462a      	mov	r2, r5
 8006f8e:	4638      	mov	r0, r7
 8006f90:	4b06      	ldr	r3, [pc, #24]	; (8006fac <_svfiprintf_r+0x1fc>)
 8006f92:	a904      	add	r1, sp, #16
 8006f94:	f7fe fa54 	bl	8005440 <_printf_i>
 8006f98:	e7eb      	b.n	8006f72 <_svfiprintf_r+0x1c2>
 8006f9a:	bf00      	nop
 8006f9c:	08007eec 	.word	0x08007eec
 8006fa0:	08007ef2 	.word	0x08007ef2
 8006fa4:	08007ef6 	.word	0x08007ef6
 8006fa8:	08004f09 	.word	0x08004f09
 8006fac:	08006cf9 	.word	0x08006cf9

08006fb0 <_sbrk_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	4d05      	ldr	r5, [pc, #20]	; (8006fcc <_sbrk_r+0x1c>)
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	4608      	mov	r0, r1
 8006fba:	602b      	str	r3, [r5, #0]
 8006fbc:	f7fb faf4 	bl	80025a8 <_sbrk>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d102      	bne.n	8006fca <_sbrk_r+0x1a>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	b103      	cbz	r3, 8006fca <_sbrk_r+0x1a>
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	bd38      	pop	{r3, r4, r5, pc}
 8006fcc:	20000320 	.word	0x20000320

08006fd0 <__assert_func>:
 8006fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fd2:	4614      	mov	r4, r2
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	4b09      	ldr	r3, [pc, #36]	; (8006ffc <__assert_func+0x2c>)
 8006fd8:	4605      	mov	r5, r0
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68d8      	ldr	r0, [r3, #12]
 8006fde:	b14c      	cbz	r4, 8006ff4 <__assert_func+0x24>
 8006fe0:	4b07      	ldr	r3, [pc, #28]	; (8007000 <__assert_func+0x30>)
 8006fe2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fe6:	9100      	str	r1, [sp, #0]
 8006fe8:	462b      	mov	r3, r5
 8006fea:	4906      	ldr	r1, [pc, #24]	; (8007004 <__assert_func+0x34>)
 8006fec:	f000 f80e 	bl	800700c <fiprintf>
 8006ff0:	f000 faaa 	bl	8007548 <abort>
 8006ff4:	4b04      	ldr	r3, [pc, #16]	; (8007008 <__assert_func+0x38>)
 8006ff6:	461c      	mov	r4, r3
 8006ff8:	e7f3      	b.n	8006fe2 <__assert_func+0x12>
 8006ffa:	bf00      	nop
 8006ffc:	20000020 	.word	0x20000020
 8007000:	08007efd 	.word	0x08007efd
 8007004:	08007f0a 	.word	0x08007f0a
 8007008:	08007f38 	.word	0x08007f38

0800700c <fiprintf>:
 800700c:	b40e      	push	{r1, r2, r3}
 800700e:	b503      	push	{r0, r1, lr}
 8007010:	4601      	mov	r1, r0
 8007012:	ab03      	add	r3, sp, #12
 8007014:	4805      	ldr	r0, [pc, #20]	; (800702c <fiprintf+0x20>)
 8007016:	f853 2b04 	ldr.w	r2, [r3], #4
 800701a:	6800      	ldr	r0, [r0, #0]
 800701c:	9301      	str	r3, [sp, #4]
 800701e:	f000 f895 	bl	800714c <_vfiprintf_r>
 8007022:	b002      	add	sp, #8
 8007024:	f85d eb04 	ldr.w	lr, [sp], #4
 8007028:	b003      	add	sp, #12
 800702a:	4770      	bx	lr
 800702c:	20000020 	.word	0x20000020

08007030 <__ascii_mbtowc>:
 8007030:	b082      	sub	sp, #8
 8007032:	b901      	cbnz	r1, 8007036 <__ascii_mbtowc+0x6>
 8007034:	a901      	add	r1, sp, #4
 8007036:	b142      	cbz	r2, 800704a <__ascii_mbtowc+0x1a>
 8007038:	b14b      	cbz	r3, 800704e <__ascii_mbtowc+0x1e>
 800703a:	7813      	ldrb	r3, [r2, #0]
 800703c:	600b      	str	r3, [r1, #0]
 800703e:	7812      	ldrb	r2, [r2, #0]
 8007040:	1e10      	subs	r0, r2, #0
 8007042:	bf18      	it	ne
 8007044:	2001      	movne	r0, #1
 8007046:	b002      	add	sp, #8
 8007048:	4770      	bx	lr
 800704a:	4610      	mov	r0, r2
 800704c:	e7fb      	b.n	8007046 <__ascii_mbtowc+0x16>
 800704e:	f06f 0001 	mvn.w	r0, #1
 8007052:	e7f8      	b.n	8007046 <__ascii_mbtowc+0x16>

08007054 <memmove>:
 8007054:	4288      	cmp	r0, r1
 8007056:	b510      	push	{r4, lr}
 8007058:	eb01 0402 	add.w	r4, r1, r2
 800705c:	d902      	bls.n	8007064 <memmove+0x10>
 800705e:	4284      	cmp	r4, r0
 8007060:	4623      	mov	r3, r4
 8007062:	d807      	bhi.n	8007074 <memmove+0x20>
 8007064:	1e43      	subs	r3, r0, #1
 8007066:	42a1      	cmp	r1, r4
 8007068:	d008      	beq.n	800707c <memmove+0x28>
 800706a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800706e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007072:	e7f8      	b.n	8007066 <memmove+0x12>
 8007074:	4601      	mov	r1, r0
 8007076:	4402      	add	r2, r0
 8007078:	428a      	cmp	r2, r1
 800707a:	d100      	bne.n	800707e <memmove+0x2a>
 800707c:	bd10      	pop	{r4, pc}
 800707e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007086:	e7f7      	b.n	8007078 <memmove+0x24>

08007088 <__malloc_lock>:
 8007088:	4801      	ldr	r0, [pc, #4]	; (8007090 <__malloc_lock+0x8>)
 800708a:	f000 bc19 	b.w	80078c0 <__retarget_lock_acquire_recursive>
 800708e:	bf00      	nop
 8007090:	20000324 	.word	0x20000324

08007094 <__malloc_unlock>:
 8007094:	4801      	ldr	r0, [pc, #4]	; (800709c <__malloc_unlock+0x8>)
 8007096:	f000 bc14 	b.w	80078c2 <__retarget_lock_release_recursive>
 800709a:	bf00      	nop
 800709c:	20000324 	.word	0x20000324

080070a0 <_realloc_r>:
 80070a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a4:	4680      	mov	r8, r0
 80070a6:	4614      	mov	r4, r2
 80070a8:	460e      	mov	r6, r1
 80070aa:	b921      	cbnz	r1, 80070b6 <_realloc_r+0x16>
 80070ac:	4611      	mov	r1, r2
 80070ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070b2:	f7ff bdad 	b.w	8006c10 <_malloc_r>
 80070b6:	b92a      	cbnz	r2, 80070c4 <_realloc_r+0x24>
 80070b8:	f7ff fd42 	bl	8006b40 <_free_r>
 80070bc:	4625      	mov	r5, r4
 80070be:	4628      	mov	r0, r5
 80070c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c4:	f000 fc64 	bl	8007990 <_malloc_usable_size_r>
 80070c8:	4284      	cmp	r4, r0
 80070ca:	4607      	mov	r7, r0
 80070cc:	d802      	bhi.n	80070d4 <_realloc_r+0x34>
 80070ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070d2:	d812      	bhi.n	80070fa <_realloc_r+0x5a>
 80070d4:	4621      	mov	r1, r4
 80070d6:	4640      	mov	r0, r8
 80070d8:	f7ff fd9a 	bl	8006c10 <_malloc_r>
 80070dc:	4605      	mov	r5, r0
 80070de:	2800      	cmp	r0, #0
 80070e0:	d0ed      	beq.n	80070be <_realloc_r+0x1e>
 80070e2:	42bc      	cmp	r4, r7
 80070e4:	4622      	mov	r2, r4
 80070e6:	4631      	mov	r1, r6
 80070e8:	bf28      	it	cs
 80070ea:	463a      	movcs	r2, r7
 80070ec:	f7ff f984 	bl	80063f8 <memcpy>
 80070f0:	4631      	mov	r1, r6
 80070f2:	4640      	mov	r0, r8
 80070f4:	f7ff fd24 	bl	8006b40 <_free_r>
 80070f8:	e7e1      	b.n	80070be <_realloc_r+0x1e>
 80070fa:	4635      	mov	r5, r6
 80070fc:	e7df      	b.n	80070be <_realloc_r+0x1e>

080070fe <__sfputc_r>:
 80070fe:	6893      	ldr	r3, [r2, #8]
 8007100:	b410      	push	{r4}
 8007102:	3b01      	subs	r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	6093      	str	r3, [r2, #8]
 8007108:	da07      	bge.n	800711a <__sfputc_r+0x1c>
 800710a:	6994      	ldr	r4, [r2, #24]
 800710c:	42a3      	cmp	r3, r4
 800710e:	db01      	blt.n	8007114 <__sfputc_r+0x16>
 8007110:	290a      	cmp	r1, #10
 8007112:	d102      	bne.n	800711a <__sfputc_r+0x1c>
 8007114:	bc10      	pop	{r4}
 8007116:	f000 b949 	b.w	80073ac <__swbuf_r>
 800711a:	6813      	ldr	r3, [r2, #0]
 800711c:	1c58      	adds	r0, r3, #1
 800711e:	6010      	str	r0, [r2, #0]
 8007120:	7019      	strb	r1, [r3, #0]
 8007122:	4608      	mov	r0, r1
 8007124:	bc10      	pop	{r4}
 8007126:	4770      	bx	lr

08007128 <__sfputs_r>:
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712a:	4606      	mov	r6, r0
 800712c:	460f      	mov	r7, r1
 800712e:	4614      	mov	r4, r2
 8007130:	18d5      	adds	r5, r2, r3
 8007132:	42ac      	cmp	r4, r5
 8007134:	d101      	bne.n	800713a <__sfputs_r+0x12>
 8007136:	2000      	movs	r0, #0
 8007138:	e007      	b.n	800714a <__sfputs_r+0x22>
 800713a:	463a      	mov	r2, r7
 800713c:	4630      	mov	r0, r6
 800713e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007142:	f7ff ffdc 	bl	80070fe <__sfputc_r>
 8007146:	1c43      	adds	r3, r0, #1
 8007148:	d1f3      	bne.n	8007132 <__sfputs_r+0xa>
 800714a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800714c <_vfiprintf_r>:
 800714c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007150:	460d      	mov	r5, r1
 8007152:	4614      	mov	r4, r2
 8007154:	4698      	mov	r8, r3
 8007156:	4606      	mov	r6, r0
 8007158:	b09d      	sub	sp, #116	; 0x74
 800715a:	b118      	cbz	r0, 8007164 <_vfiprintf_r+0x18>
 800715c:	6983      	ldr	r3, [r0, #24]
 800715e:	b90b      	cbnz	r3, 8007164 <_vfiprintf_r+0x18>
 8007160:	f000 fb10 	bl	8007784 <__sinit>
 8007164:	4b89      	ldr	r3, [pc, #548]	; (800738c <_vfiprintf_r+0x240>)
 8007166:	429d      	cmp	r5, r3
 8007168:	d11b      	bne.n	80071a2 <_vfiprintf_r+0x56>
 800716a:	6875      	ldr	r5, [r6, #4]
 800716c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800716e:	07d9      	lsls	r1, r3, #31
 8007170:	d405      	bmi.n	800717e <_vfiprintf_r+0x32>
 8007172:	89ab      	ldrh	r3, [r5, #12]
 8007174:	059a      	lsls	r2, r3, #22
 8007176:	d402      	bmi.n	800717e <_vfiprintf_r+0x32>
 8007178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800717a:	f000 fba1 	bl	80078c0 <__retarget_lock_acquire_recursive>
 800717e:	89ab      	ldrh	r3, [r5, #12]
 8007180:	071b      	lsls	r3, r3, #28
 8007182:	d501      	bpl.n	8007188 <_vfiprintf_r+0x3c>
 8007184:	692b      	ldr	r3, [r5, #16]
 8007186:	b9eb      	cbnz	r3, 80071c4 <_vfiprintf_r+0x78>
 8007188:	4629      	mov	r1, r5
 800718a:	4630      	mov	r0, r6
 800718c:	f000 f96e 	bl	800746c <__swsetup_r>
 8007190:	b1c0      	cbz	r0, 80071c4 <_vfiprintf_r+0x78>
 8007192:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007194:	07dc      	lsls	r4, r3, #31
 8007196:	d50e      	bpl.n	80071b6 <_vfiprintf_r+0x6a>
 8007198:	f04f 30ff 	mov.w	r0, #4294967295
 800719c:	b01d      	add	sp, #116	; 0x74
 800719e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a2:	4b7b      	ldr	r3, [pc, #492]	; (8007390 <_vfiprintf_r+0x244>)
 80071a4:	429d      	cmp	r5, r3
 80071a6:	d101      	bne.n	80071ac <_vfiprintf_r+0x60>
 80071a8:	68b5      	ldr	r5, [r6, #8]
 80071aa:	e7df      	b.n	800716c <_vfiprintf_r+0x20>
 80071ac:	4b79      	ldr	r3, [pc, #484]	; (8007394 <_vfiprintf_r+0x248>)
 80071ae:	429d      	cmp	r5, r3
 80071b0:	bf08      	it	eq
 80071b2:	68f5      	ldreq	r5, [r6, #12]
 80071b4:	e7da      	b.n	800716c <_vfiprintf_r+0x20>
 80071b6:	89ab      	ldrh	r3, [r5, #12]
 80071b8:	0598      	lsls	r0, r3, #22
 80071ba:	d4ed      	bmi.n	8007198 <_vfiprintf_r+0x4c>
 80071bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071be:	f000 fb80 	bl	80078c2 <__retarget_lock_release_recursive>
 80071c2:	e7e9      	b.n	8007198 <_vfiprintf_r+0x4c>
 80071c4:	2300      	movs	r3, #0
 80071c6:	9309      	str	r3, [sp, #36]	; 0x24
 80071c8:	2320      	movs	r3, #32
 80071ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071ce:	2330      	movs	r3, #48	; 0x30
 80071d0:	f04f 0901 	mov.w	r9, #1
 80071d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80071d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007398 <_vfiprintf_r+0x24c>
 80071dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071e0:	4623      	mov	r3, r4
 80071e2:	469a      	mov	sl, r3
 80071e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071e8:	b10a      	cbz	r2, 80071ee <_vfiprintf_r+0xa2>
 80071ea:	2a25      	cmp	r2, #37	; 0x25
 80071ec:	d1f9      	bne.n	80071e2 <_vfiprintf_r+0x96>
 80071ee:	ebba 0b04 	subs.w	fp, sl, r4
 80071f2:	d00b      	beq.n	800720c <_vfiprintf_r+0xc0>
 80071f4:	465b      	mov	r3, fp
 80071f6:	4622      	mov	r2, r4
 80071f8:	4629      	mov	r1, r5
 80071fa:	4630      	mov	r0, r6
 80071fc:	f7ff ff94 	bl	8007128 <__sfputs_r>
 8007200:	3001      	adds	r0, #1
 8007202:	f000 80aa 	beq.w	800735a <_vfiprintf_r+0x20e>
 8007206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007208:	445a      	add	r2, fp
 800720a:	9209      	str	r2, [sp, #36]	; 0x24
 800720c:	f89a 3000 	ldrb.w	r3, [sl]
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 80a2 	beq.w	800735a <_vfiprintf_r+0x20e>
 8007216:	2300      	movs	r3, #0
 8007218:	f04f 32ff 	mov.w	r2, #4294967295
 800721c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007220:	f10a 0a01 	add.w	sl, sl, #1
 8007224:	9304      	str	r3, [sp, #16]
 8007226:	9307      	str	r3, [sp, #28]
 8007228:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800722c:	931a      	str	r3, [sp, #104]	; 0x68
 800722e:	4654      	mov	r4, sl
 8007230:	2205      	movs	r2, #5
 8007232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007236:	4858      	ldr	r0, [pc, #352]	; (8007398 <_vfiprintf_r+0x24c>)
 8007238:	f7ff f8d0 	bl	80063dc <memchr>
 800723c:	9a04      	ldr	r2, [sp, #16]
 800723e:	b9d8      	cbnz	r0, 8007278 <_vfiprintf_r+0x12c>
 8007240:	06d1      	lsls	r1, r2, #27
 8007242:	bf44      	itt	mi
 8007244:	2320      	movmi	r3, #32
 8007246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800724a:	0713      	lsls	r3, r2, #28
 800724c:	bf44      	itt	mi
 800724e:	232b      	movmi	r3, #43	; 0x2b
 8007250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007254:	f89a 3000 	ldrb.w	r3, [sl]
 8007258:	2b2a      	cmp	r3, #42	; 0x2a
 800725a:	d015      	beq.n	8007288 <_vfiprintf_r+0x13c>
 800725c:	4654      	mov	r4, sl
 800725e:	2000      	movs	r0, #0
 8007260:	f04f 0c0a 	mov.w	ip, #10
 8007264:	9a07      	ldr	r2, [sp, #28]
 8007266:	4621      	mov	r1, r4
 8007268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800726c:	3b30      	subs	r3, #48	; 0x30
 800726e:	2b09      	cmp	r3, #9
 8007270:	d94e      	bls.n	8007310 <_vfiprintf_r+0x1c4>
 8007272:	b1b0      	cbz	r0, 80072a2 <_vfiprintf_r+0x156>
 8007274:	9207      	str	r2, [sp, #28]
 8007276:	e014      	b.n	80072a2 <_vfiprintf_r+0x156>
 8007278:	eba0 0308 	sub.w	r3, r0, r8
 800727c:	fa09 f303 	lsl.w	r3, r9, r3
 8007280:	4313      	orrs	r3, r2
 8007282:	46a2      	mov	sl, r4
 8007284:	9304      	str	r3, [sp, #16]
 8007286:	e7d2      	b.n	800722e <_vfiprintf_r+0xe2>
 8007288:	9b03      	ldr	r3, [sp, #12]
 800728a:	1d19      	adds	r1, r3, #4
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	9103      	str	r1, [sp, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	bfbb      	ittet	lt
 8007294:	425b      	neglt	r3, r3
 8007296:	f042 0202 	orrlt.w	r2, r2, #2
 800729a:	9307      	strge	r3, [sp, #28]
 800729c:	9307      	strlt	r3, [sp, #28]
 800729e:	bfb8      	it	lt
 80072a0:	9204      	strlt	r2, [sp, #16]
 80072a2:	7823      	ldrb	r3, [r4, #0]
 80072a4:	2b2e      	cmp	r3, #46	; 0x2e
 80072a6:	d10c      	bne.n	80072c2 <_vfiprintf_r+0x176>
 80072a8:	7863      	ldrb	r3, [r4, #1]
 80072aa:	2b2a      	cmp	r3, #42	; 0x2a
 80072ac:	d135      	bne.n	800731a <_vfiprintf_r+0x1ce>
 80072ae:	9b03      	ldr	r3, [sp, #12]
 80072b0:	3402      	adds	r4, #2
 80072b2:	1d1a      	adds	r2, r3, #4
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	9203      	str	r2, [sp, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	bfb8      	it	lt
 80072bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80072c0:	9305      	str	r3, [sp, #20]
 80072c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800739c <_vfiprintf_r+0x250>
 80072c6:	2203      	movs	r2, #3
 80072c8:	4650      	mov	r0, sl
 80072ca:	7821      	ldrb	r1, [r4, #0]
 80072cc:	f7ff f886 	bl	80063dc <memchr>
 80072d0:	b140      	cbz	r0, 80072e4 <_vfiprintf_r+0x198>
 80072d2:	2340      	movs	r3, #64	; 0x40
 80072d4:	eba0 000a 	sub.w	r0, r0, sl
 80072d8:	fa03 f000 	lsl.w	r0, r3, r0
 80072dc:	9b04      	ldr	r3, [sp, #16]
 80072de:	3401      	adds	r4, #1
 80072e0:	4303      	orrs	r3, r0
 80072e2:	9304      	str	r3, [sp, #16]
 80072e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e8:	2206      	movs	r2, #6
 80072ea:	482d      	ldr	r0, [pc, #180]	; (80073a0 <_vfiprintf_r+0x254>)
 80072ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072f0:	f7ff f874 	bl	80063dc <memchr>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d03f      	beq.n	8007378 <_vfiprintf_r+0x22c>
 80072f8:	4b2a      	ldr	r3, [pc, #168]	; (80073a4 <_vfiprintf_r+0x258>)
 80072fa:	bb1b      	cbnz	r3, 8007344 <_vfiprintf_r+0x1f8>
 80072fc:	9b03      	ldr	r3, [sp, #12]
 80072fe:	3307      	adds	r3, #7
 8007300:	f023 0307 	bic.w	r3, r3, #7
 8007304:	3308      	adds	r3, #8
 8007306:	9303      	str	r3, [sp, #12]
 8007308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800730a:	443b      	add	r3, r7
 800730c:	9309      	str	r3, [sp, #36]	; 0x24
 800730e:	e767      	b.n	80071e0 <_vfiprintf_r+0x94>
 8007310:	460c      	mov	r4, r1
 8007312:	2001      	movs	r0, #1
 8007314:	fb0c 3202 	mla	r2, ip, r2, r3
 8007318:	e7a5      	b.n	8007266 <_vfiprintf_r+0x11a>
 800731a:	2300      	movs	r3, #0
 800731c:	f04f 0c0a 	mov.w	ip, #10
 8007320:	4619      	mov	r1, r3
 8007322:	3401      	adds	r4, #1
 8007324:	9305      	str	r3, [sp, #20]
 8007326:	4620      	mov	r0, r4
 8007328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800732c:	3a30      	subs	r2, #48	; 0x30
 800732e:	2a09      	cmp	r2, #9
 8007330:	d903      	bls.n	800733a <_vfiprintf_r+0x1ee>
 8007332:	2b00      	cmp	r3, #0
 8007334:	d0c5      	beq.n	80072c2 <_vfiprintf_r+0x176>
 8007336:	9105      	str	r1, [sp, #20]
 8007338:	e7c3      	b.n	80072c2 <_vfiprintf_r+0x176>
 800733a:	4604      	mov	r4, r0
 800733c:	2301      	movs	r3, #1
 800733e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007342:	e7f0      	b.n	8007326 <_vfiprintf_r+0x1da>
 8007344:	ab03      	add	r3, sp, #12
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	462a      	mov	r2, r5
 800734a:	4630      	mov	r0, r6
 800734c:	4b16      	ldr	r3, [pc, #88]	; (80073a8 <_vfiprintf_r+0x25c>)
 800734e:	a904      	add	r1, sp, #16
 8007350:	f7fd fdda 	bl	8004f08 <_printf_float>
 8007354:	4607      	mov	r7, r0
 8007356:	1c78      	adds	r0, r7, #1
 8007358:	d1d6      	bne.n	8007308 <_vfiprintf_r+0x1bc>
 800735a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800735c:	07d9      	lsls	r1, r3, #31
 800735e:	d405      	bmi.n	800736c <_vfiprintf_r+0x220>
 8007360:	89ab      	ldrh	r3, [r5, #12]
 8007362:	059a      	lsls	r2, r3, #22
 8007364:	d402      	bmi.n	800736c <_vfiprintf_r+0x220>
 8007366:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007368:	f000 faab 	bl	80078c2 <__retarget_lock_release_recursive>
 800736c:	89ab      	ldrh	r3, [r5, #12]
 800736e:	065b      	lsls	r3, r3, #25
 8007370:	f53f af12 	bmi.w	8007198 <_vfiprintf_r+0x4c>
 8007374:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007376:	e711      	b.n	800719c <_vfiprintf_r+0x50>
 8007378:	ab03      	add	r3, sp, #12
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	462a      	mov	r2, r5
 800737e:	4630      	mov	r0, r6
 8007380:	4b09      	ldr	r3, [pc, #36]	; (80073a8 <_vfiprintf_r+0x25c>)
 8007382:	a904      	add	r1, sp, #16
 8007384:	f7fe f85c 	bl	8005440 <_printf_i>
 8007388:	e7e4      	b.n	8007354 <_vfiprintf_r+0x208>
 800738a:	bf00      	nop
 800738c:	08008064 	.word	0x08008064
 8007390:	08008084 	.word	0x08008084
 8007394:	08008044 	.word	0x08008044
 8007398:	08007eec 	.word	0x08007eec
 800739c:	08007ef2 	.word	0x08007ef2
 80073a0:	08007ef6 	.word	0x08007ef6
 80073a4:	08004f09 	.word	0x08004f09
 80073a8:	08007129 	.word	0x08007129

080073ac <__swbuf_r>:
 80073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ae:	460e      	mov	r6, r1
 80073b0:	4614      	mov	r4, r2
 80073b2:	4605      	mov	r5, r0
 80073b4:	b118      	cbz	r0, 80073be <__swbuf_r+0x12>
 80073b6:	6983      	ldr	r3, [r0, #24]
 80073b8:	b90b      	cbnz	r3, 80073be <__swbuf_r+0x12>
 80073ba:	f000 f9e3 	bl	8007784 <__sinit>
 80073be:	4b21      	ldr	r3, [pc, #132]	; (8007444 <__swbuf_r+0x98>)
 80073c0:	429c      	cmp	r4, r3
 80073c2:	d12b      	bne.n	800741c <__swbuf_r+0x70>
 80073c4:	686c      	ldr	r4, [r5, #4]
 80073c6:	69a3      	ldr	r3, [r4, #24]
 80073c8:	60a3      	str	r3, [r4, #8]
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	071a      	lsls	r2, r3, #28
 80073ce:	d52f      	bpl.n	8007430 <__swbuf_r+0x84>
 80073d0:	6923      	ldr	r3, [r4, #16]
 80073d2:	b36b      	cbz	r3, 8007430 <__swbuf_r+0x84>
 80073d4:	6923      	ldr	r3, [r4, #16]
 80073d6:	6820      	ldr	r0, [r4, #0]
 80073d8:	b2f6      	uxtb	r6, r6
 80073da:	1ac0      	subs	r0, r0, r3
 80073dc:	6963      	ldr	r3, [r4, #20]
 80073de:	4637      	mov	r7, r6
 80073e0:	4283      	cmp	r3, r0
 80073e2:	dc04      	bgt.n	80073ee <__swbuf_r+0x42>
 80073e4:	4621      	mov	r1, r4
 80073e6:	4628      	mov	r0, r5
 80073e8:	f000 f938 	bl	800765c <_fflush_r>
 80073ec:	bb30      	cbnz	r0, 800743c <__swbuf_r+0x90>
 80073ee:	68a3      	ldr	r3, [r4, #8]
 80073f0:	3001      	adds	r0, #1
 80073f2:	3b01      	subs	r3, #1
 80073f4:	60a3      	str	r3, [r4, #8]
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	1c5a      	adds	r2, r3, #1
 80073fa:	6022      	str	r2, [r4, #0]
 80073fc:	701e      	strb	r6, [r3, #0]
 80073fe:	6963      	ldr	r3, [r4, #20]
 8007400:	4283      	cmp	r3, r0
 8007402:	d004      	beq.n	800740e <__swbuf_r+0x62>
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	07db      	lsls	r3, r3, #31
 8007408:	d506      	bpl.n	8007418 <__swbuf_r+0x6c>
 800740a:	2e0a      	cmp	r6, #10
 800740c:	d104      	bne.n	8007418 <__swbuf_r+0x6c>
 800740e:	4621      	mov	r1, r4
 8007410:	4628      	mov	r0, r5
 8007412:	f000 f923 	bl	800765c <_fflush_r>
 8007416:	b988      	cbnz	r0, 800743c <__swbuf_r+0x90>
 8007418:	4638      	mov	r0, r7
 800741a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800741c:	4b0a      	ldr	r3, [pc, #40]	; (8007448 <__swbuf_r+0x9c>)
 800741e:	429c      	cmp	r4, r3
 8007420:	d101      	bne.n	8007426 <__swbuf_r+0x7a>
 8007422:	68ac      	ldr	r4, [r5, #8]
 8007424:	e7cf      	b.n	80073c6 <__swbuf_r+0x1a>
 8007426:	4b09      	ldr	r3, [pc, #36]	; (800744c <__swbuf_r+0xa0>)
 8007428:	429c      	cmp	r4, r3
 800742a:	bf08      	it	eq
 800742c:	68ec      	ldreq	r4, [r5, #12]
 800742e:	e7ca      	b.n	80073c6 <__swbuf_r+0x1a>
 8007430:	4621      	mov	r1, r4
 8007432:	4628      	mov	r0, r5
 8007434:	f000 f81a 	bl	800746c <__swsetup_r>
 8007438:	2800      	cmp	r0, #0
 800743a:	d0cb      	beq.n	80073d4 <__swbuf_r+0x28>
 800743c:	f04f 37ff 	mov.w	r7, #4294967295
 8007440:	e7ea      	b.n	8007418 <__swbuf_r+0x6c>
 8007442:	bf00      	nop
 8007444:	08008064 	.word	0x08008064
 8007448:	08008084 	.word	0x08008084
 800744c:	08008044 	.word	0x08008044

08007450 <__ascii_wctomb>:
 8007450:	4603      	mov	r3, r0
 8007452:	4608      	mov	r0, r1
 8007454:	b141      	cbz	r1, 8007468 <__ascii_wctomb+0x18>
 8007456:	2aff      	cmp	r2, #255	; 0xff
 8007458:	d904      	bls.n	8007464 <__ascii_wctomb+0x14>
 800745a:	228a      	movs	r2, #138	; 0x8a
 800745c:	f04f 30ff 	mov.w	r0, #4294967295
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	4770      	bx	lr
 8007464:	2001      	movs	r0, #1
 8007466:	700a      	strb	r2, [r1, #0]
 8007468:	4770      	bx	lr
	...

0800746c <__swsetup_r>:
 800746c:	4b32      	ldr	r3, [pc, #200]	; (8007538 <__swsetup_r+0xcc>)
 800746e:	b570      	push	{r4, r5, r6, lr}
 8007470:	681d      	ldr	r5, [r3, #0]
 8007472:	4606      	mov	r6, r0
 8007474:	460c      	mov	r4, r1
 8007476:	b125      	cbz	r5, 8007482 <__swsetup_r+0x16>
 8007478:	69ab      	ldr	r3, [r5, #24]
 800747a:	b913      	cbnz	r3, 8007482 <__swsetup_r+0x16>
 800747c:	4628      	mov	r0, r5
 800747e:	f000 f981 	bl	8007784 <__sinit>
 8007482:	4b2e      	ldr	r3, [pc, #184]	; (800753c <__swsetup_r+0xd0>)
 8007484:	429c      	cmp	r4, r3
 8007486:	d10f      	bne.n	80074a8 <__swsetup_r+0x3c>
 8007488:	686c      	ldr	r4, [r5, #4]
 800748a:	89a3      	ldrh	r3, [r4, #12]
 800748c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007490:	0719      	lsls	r1, r3, #28
 8007492:	d42c      	bmi.n	80074ee <__swsetup_r+0x82>
 8007494:	06dd      	lsls	r5, r3, #27
 8007496:	d411      	bmi.n	80074bc <__swsetup_r+0x50>
 8007498:	2309      	movs	r3, #9
 800749a:	6033      	str	r3, [r6, #0]
 800749c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295
 80074a4:	81a3      	strh	r3, [r4, #12]
 80074a6:	e03e      	b.n	8007526 <__swsetup_r+0xba>
 80074a8:	4b25      	ldr	r3, [pc, #148]	; (8007540 <__swsetup_r+0xd4>)
 80074aa:	429c      	cmp	r4, r3
 80074ac:	d101      	bne.n	80074b2 <__swsetup_r+0x46>
 80074ae:	68ac      	ldr	r4, [r5, #8]
 80074b0:	e7eb      	b.n	800748a <__swsetup_r+0x1e>
 80074b2:	4b24      	ldr	r3, [pc, #144]	; (8007544 <__swsetup_r+0xd8>)
 80074b4:	429c      	cmp	r4, r3
 80074b6:	bf08      	it	eq
 80074b8:	68ec      	ldreq	r4, [r5, #12]
 80074ba:	e7e6      	b.n	800748a <__swsetup_r+0x1e>
 80074bc:	0758      	lsls	r0, r3, #29
 80074be:	d512      	bpl.n	80074e6 <__swsetup_r+0x7a>
 80074c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074c2:	b141      	cbz	r1, 80074d6 <__swsetup_r+0x6a>
 80074c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074c8:	4299      	cmp	r1, r3
 80074ca:	d002      	beq.n	80074d2 <__swsetup_r+0x66>
 80074cc:	4630      	mov	r0, r6
 80074ce:	f7ff fb37 	bl	8006b40 <_free_r>
 80074d2:	2300      	movs	r3, #0
 80074d4:	6363      	str	r3, [r4, #52]	; 0x34
 80074d6:	89a3      	ldrh	r3, [r4, #12]
 80074d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074dc:	81a3      	strh	r3, [r4, #12]
 80074de:	2300      	movs	r3, #0
 80074e0:	6063      	str	r3, [r4, #4]
 80074e2:	6923      	ldr	r3, [r4, #16]
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	f043 0308 	orr.w	r3, r3, #8
 80074ec:	81a3      	strh	r3, [r4, #12]
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	b94b      	cbnz	r3, 8007506 <__swsetup_r+0x9a>
 80074f2:	89a3      	ldrh	r3, [r4, #12]
 80074f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074fc:	d003      	beq.n	8007506 <__swsetup_r+0x9a>
 80074fe:	4621      	mov	r1, r4
 8007500:	4630      	mov	r0, r6
 8007502:	f000 fa05 	bl	8007910 <__smakebuf_r>
 8007506:	89a0      	ldrh	r0, [r4, #12]
 8007508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800750c:	f010 0301 	ands.w	r3, r0, #1
 8007510:	d00a      	beq.n	8007528 <__swsetup_r+0xbc>
 8007512:	2300      	movs	r3, #0
 8007514:	60a3      	str	r3, [r4, #8]
 8007516:	6963      	ldr	r3, [r4, #20]
 8007518:	425b      	negs	r3, r3
 800751a:	61a3      	str	r3, [r4, #24]
 800751c:	6923      	ldr	r3, [r4, #16]
 800751e:	b943      	cbnz	r3, 8007532 <__swsetup_r+0xc6>
 8007520:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007524:	d1ba      	bne.n	800749c <__swsetup_r+0x30>
 8007526:	bd70      	pop	{r4, r5, r6, pc}
 8007528:	0781      	lsls	r1, r0, #30
 800752a:	bf58      	it	pl
 800752c:	6963      	ldrpl	r3, [r4, #20]
 800752e:	60a3      	str	r3, [r4, #8]
 8007530:	e7f4      	b.n	800751c <__swsetup_r+0xb0>
 8007532:	2000      	movs	r0, #0
 8007534:	e7f7      	b.n	8007526 <__swsetup_r+0xba>
 8007536:	bf00      	nop
 8007538:	20000020 	.word	0x20000020
 800753c:	08008064 	.word	0x08008064
 8007540:	08008084 	.word	0x08008084
 8007544:	08008044 	.word	0x08008044

08007548 <abort>:
 8007548:	2006      	movs	r0, #6
 800754a:	b508      	push	{r3, lr}
 800754c:	f000 fa50 	bl	80079f0 <raise>
 8007550:	2001      	movs	r0, #1
 8007552:	f7fa ffb5 	bl	80024c0 <_exit>
	...

08007558 <__sflush_r>:
 8007558:	898a      	ldrh	r2, [r1, #12]
 800755a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755c:	4605      	mov	r5, r0
 800755e:	0710      	lsls	r0, r2, #28
 8007560:	460c      	mov	r4, r1
 8007562:	d457      	bmi.n	8007614 <__sflush_r+0xbc>
 8007564:	684b      	ldr	r3, [r1, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	dc04      	bgt.n	8007574 <__sflush_r+0x1c>
 800756a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800756c:	2b00      	cmp	r3, #0
 800756e:	dc01      	bgt.n	8007574 <__sflush_r+0x1c>
 8007570:	2000      	movs	r0, #0
 8007572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007576:	2e00      	cmp	r6, #0
 8007578:	d0fa      	beq.n	8007570 <__sflush_r+0x18>
 800757a:	2300      	movs	r3, #0
 800757c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007580:	682f      	ldr	r7, [r5, #0]
 8007582:	602b      	str	r3, [r5, #0]
 8007584:	d032      	beq.n	80075ec <__sflush_r+0x94>
 8007586:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007588:	89a3      	ldrh	r3, [r4, #12]
 800758a:	075a      	lsls	r2, r3, #29
 800758c:	d505      	bpl.n	800759a <__sflush_r+0x42>
 800758e:	6863      	ldr	r3, [r4, #4]
 8007590:	1ac0      	subs	r0, r0, r3
 8007592:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007594:	b10b      	cbz	r3, 800759a <__sflush_r+0x42>
 8007596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007598:	1ac0      	subs	r0, r0, r3
 800759a:	2300      	movs	r3, #0
 800759c:	4602      	mov	r2, r0
 800759e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075a0:	4628      	mov	r0, r5
 80075a2:	6a21      	ldr	r1, [r4, #32]
 80075a4:	47b0      	blx	r6
 80075a6:	1c43      	adds	r3, r0, #1
 80075a8:	89a3      	ldrh	r3, [r4, #12]
 80075aa:	d106      	bne.n	80075ba <__sflush_r+0x62>
 80075ac:	6829      	ldr	r1, [r5, #0]
 80075ae:	291d      	cmp	r1, #29
 80075b0:	d82c      	bhi.n	800760c <__sflush_r+0xb4>
 80075b2:	4a29      	ldr	r2, [pc, #164]	; (8007658 <__sflush_r+0x100>)
 80075b4:	40ca      	lsrs	r2, r1
 80075b6:	07d6      	lsls	r6, r2, #31
 80075b8:	d528      	bpl.n	800760c <__sflush_r+0xb4>
 80075ba:	2200      	movs	r2, #0
 80075bc:	6062      	str	r2, [r4, #4]
 80075be:	6922      	ldr	r2, [r4, #16]
 80075c0:	04d9      	lsls	r1, r3, #19
 80075c2:	6022      	str	r2, [r4, #0]
 80075c4:	d504      	bpl.n	80075d0 <__sflush_r+0x78>
 80075c6:	1c42      	adds	r2, r0, #1
 80075c8:	d101      	bne.n	80075ce <__sflush_r+0x76>
 80075ca:	682b      	ldr	r3, [r5, #0]
 80075cc:	b903      	cbnz	r3, 80075d0 <__sflush_r+0x78>
 80075ce:	6560      	str	r0, [r4, #84]	; 0x54
 80075d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075d2:	602f      	str	r7, [r5, #0]
 80075d4:	2900      	cmp	r1, #0
 80075d6:	d0cb      	beq.n	8007570 <__sflush_r+0x18>
 80075d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075dc:	4299      	cmp	r1, r3
 80075de:	d002      	beq.n	80075e6 <__sflush_r+0x8e>
 80075e0:	4628      	mov	r0, r5
 80075e2:	f7ff faad 	bl	8006b40 <_free_r>
 80075e6:	2000      	movs	r0, #0
 80075e8:	6360      	str	r0, [r4, #52]	; 0x34
 80075ea:	e7c2      	b.n	8007572 <__sflush_r+0x1a>
 80075ec:	6a21      	ldr	r1, [r4, #32]
 80075ee:	2301      	movs	r3, #1
 80075f0:	4628      	mov	r0, r5
 80075f2:	47b0      	blx	r6
 80075f4:	1c41      	adds	r1, r0, #1
 80075f6:	d1c7      	bne.n	8007588 <__sflush_r+0x30>
 80075f8:	682b      	ldr	r3, [r5, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0c4      	beq.n	8007588 <__sflush_r+0x30>
 80075fe:	2b1d      	cmp	r3, #29
 8007600:	d001      	beq.n	8007606 <__sflush_r+0xae>
 8007602:	2b16      	cmp	r3, #22
 8007604:	d101      	bne.n	800760a <__sflush_r+0xb2>
 8007606:	602f      	str	r7, [r5, #0]
 8007608:	e7b2      	b.n	8007570 <__sflush_r+0x18>
 800760a:	89a3      	ldrh	r3, [r4, #12]
 800760c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007610:	81a3      	strh	r3, [r4, #12]
 8007612:	e7ae      	b.n	8007572 <__sflush_r+0x1a>
 8007614:	690f      	ldr	r7, [r1, #16]
 8007616:	2f00      	cmp	r7, #0
 8007618:	d0aa      	beq.n	8007570 <__sflush_r+0x18>
 800761a:	0793      	lsls	r3, r2, #30
 800761c:	bf18      	it	ne
 800761e:	2300      	movne	r3, #0
 8007620:	680e      	ldr	r6, [r1, #0]
 8007622:	bf08      	it	eq
 8007624:	694b      	ldreq	r3, [r1, #20]
 8007626:	1bf6      	subs	r6, r6, r7
 8007628:	600f      	str	r7, [r1, #0]
 800762a:	608b      	str	r3, [r1, #8]
 800762c:	2e00      	cmp	r6, #0
 800762e:	dd9f      	ble.n	8007570 <__sflush_r+0x18>
 8007630:	4633      	mov	r3, r6
 8007632:	463a      	mov	r2, r7
 8007634:	4628      	mov	r0, r5
 8007636:	6a21      	ldr	r1, [r4, #32]
 8007638:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800763c:	47e0      	blx	ip
 800763e:	2800      	cmp	r0, #0
 8007640:	dc06      	bgt.n	8007650 <__sflush_r+0xf8>
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	f04f 30ff 	mov.w	r0, #4294967295
 8007648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800764c:	81a3      	strh	r3, [r4, #12]
 800764e:	e790      	b.n	8007572 <__sflush_r+0x1a>
 8007650:	4407      	add	r7, r0
 8007652:	1a36      	subs	r6, r6, r0
 8007654:	e7ea      	b.n	800762c <__sflush_r+0xd4>
 8007656:	bf00      	nop
 8007658:	20400001 	.word	0x20400001

0800765c <_fflush_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	690b      	ldr	r3, [r1, #16]
 8007660:	4605      	mov	r5, r0
 8007662:	460c      	mov	r4, r1
 8007664:	b913      	cbnz	r3, 800766c <_fflush_r+0x10>
 8007666:	2500      	movs	r5, #0
 8007668:	4628      	mov	r0, r5
 800766a:	bd38      	pop	{r3, r4, r5, pc}
 800766c:	b118      	cbz	r0, 8007676 <_fflush_r+0x1a>
 800766e:	6983      	ldr	r3, [r0, #24]
 8007670:	b90b      	cbnz	r3, 8007676 <_fflush_r+0x1a>
 8007672:	f000 f887 	bl	8007784 <__sinit>
 8007676:	4b14      	ldr	r3, [pc, #80]	; (80076c8 <_fflush_r+0x6c>)
 8007678:	429c      	cmp	r4, r3
 800767a:	d11b      	bne.n	80076b4 <_fflush_r+0x58>
 800767c:	686c      	ldr	r4, [r5, #4]
 800767e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0ef      	beq.n	8007666 <_fflush_r+0xa>
 8007686:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007688:	07d0      	lsls	r0, r2, #31
 800768a:	d404      	bmi.n	8007696 <_fflush_r+0x3a>
 800768c:	0599      	lsls	r1, r3, #22
 800768e:	d402      	bmi.n	8007696 <_fflush_r+0x3a>
 8007690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007692:	f000 f915 	bl	80078c0 <__retarget_lock_acquire_recursive>
 8007696:	4628      	mov	r0, r5
 8007698:	4621      	mov	r1, r4
 800769a:	f7ff ff5d 	bl	8007558 <__sflush_r>
 800769e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076a0:	4605      	mov	r5, r0
 80076a2:	07da      	lsls	r2, r3, #31
 80076a4:	d4e0      	bmi.n	8007668 <_fflush_r+0xc>
 80076a6:	89a3      	ldrh	r3, [r4, #12]
 80076a8:	059b      	lsls	r3, r3, #22
 80076aa:	d4dd      	bmi.n	8007668 <_fflush_r+0xc>
 80076ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076ae:	f000 f908 	bl	80078c2 <__retarget_lock_release_recursive>
 80076b2:	e7d9      	b.n	8007668 <_fflush_r+0xc>
 80076b4:	4b05      	ldr	r3, [pc, #20]	; (80076cc <_fflush_r+0x70>)
 80076b6:	429c      	cmp	r4, r3
 80076b8:	d101      	bne.n	80076be <_fflush_r+0x62>
 80076ba:	68ac      	ldr	r4, [r5, #8]
 80076bc:	e7df      	b.n	800767e <_fflush_r+0x22>
 80076be:	4b04      	ldr	r3, [pc, #16]	; (80076d0 <_fflush_r+0x74>)
 80076c0:	429c      	cmp	r4, r3
 80076c2:	bf08      	it	eq
 80076c4:	68ec      	ldreq	r4, [r5, #12]
 80076c6:	e7da      	b.n	800767e <_fflush_r+0x22>
 80076c8:	08008064 	.word	0x08008064
 80076cc:	08008084 	.word	0x08008084
 80076d0:	08008044 	.word	0x08008044

080076d4 <std>:
 80076d4:	2300      	movs	r3, #0
 80076d6:	b510      	push	{r4, lr}
 80076d8:	4604      	mov	r4, r0
 80076da:	e9c0 3300 	strd	r3, r3, [r0]
 80076de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076e2:	6083      	str	r3, [r0, #8]
 80076e4:	8181      	strh	r1, [r0, #12]
 80076e6:	6643      	str	r3, [r0, #100]	; 0x64
 80076e8:	81c2      	strh	r2, [r0, #14]
 80076ea:	6183      	str	r3, [r0, #24]
 80076ec:	4619      	mov	r1, r3
 80076ee:	2208      	movs	r2, #8
 80076f0:	305c      	adds	r0, #92	; 0x5c
 80076f2:	f7fd fb63 	bl	8004dbc <memset>
 80076f6:	4b05      	ldr	r3, [pc, #20]	; (800770c <std+0x38>)
 80076f8:	6224      	str	r4, [r4, #32]
 80076fa:	6263      	str	r3, [r4, #36]	; 0x24
 80076fc:	4b04      	ldr	r3, [pc, #16]	; (8007710 <std+0x3c>)
 80076fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8007700:	4b04      	ldr	r3, [pc, #16]	; (8007714 <std+0x40>)
 8007702:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007704:	4b04      	ldr	r3, [pc, #16]	; (8007718 <std+0x44>)
 8007706:	6323      	str	r3, [r4, #48]	; 0x30
 8007708:	bd10      	pop	{r4, pc}
 800770a:	bf00      	nop
 800770c:	08007a29 	.word	0x08007a29
 8007710:	08007a4b 	.word	0x08007a4b
 8007714:	08007a83 	.word	0x08007a83
 8007718:	08007aa7 	.word	0x08007aa7

0800771c <_cleanup_r>:
 800771c:	4901      	ldr	r1, [pc, #4]	; (8007724 <_cleanup_r+0x8>)
 800771e:	f000 b8af 	b.w	8007880 <_fwalk_reent>
 8007722:	bf00      	nop
 8007724:	0800765d 	.word	0x0800765d

08007728 <__sfmoreglue>:
 8007728:	2268      	movs	r2, #104	; 0x68
 800772a:	b570      	push	{r4, r5, r6, lr}
 800772c:	1e4d      	subs	r5, r1, #1
 800772e:	4355      	muls	r5, r2
 8007730:	460e      	mov	r6, r1
 8007732:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007736:	f7ff fa6b 	bl	8006c10 <_malloc_r>
 800773a:	4604      	mov	r4, r0
 800773c:	b140      	cbz	r0, 8007750 <__sfmoreglue+0x28>
 800773e:	2100      	movs	r1, #0
 8007740:	e9c0 1600 	strd	r1, r6, [r0]
 8007744:	300c      	adds	r0, #12
 8007746:	60a0      	str	r0, [r4, #8]
 8007748:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800774c:	f7fd fb36 	bl	8004dbc <memset>
 8007750:	4620      	mov	r0, r4
 8007752:	bd70      	pop	{r4, r5, r6, pc}

08007754 <__sfp_lock_acquire>:
 8007754:	4801      	ldr	r0, [pc, #4]	; (800775c <__sfp_lock_acquire+0x8>)
 8007756:	f000 b8b3 	b.w	80078c0 <__retarget_lock_acquire_recursive>
 800775a:	bf00      	nop
 800775c:	20000325 	.word	0x20000325

08007760 <__sfp_lock_release>:
 8007760:	4801      	ldr	r0, [pc, #4]	; (8007768 <__sfp_lock_release+0x8>)
 8007762:	f000 b8ae 	b.w	80078c2 <__retarget_lock_release_recursive>
 8007766:	bf00      	nop
 8007768:	20000325 	.word	0x20000325

0800776c <__sinit_lock_acquire>:
 800776c:	4801      	ldr	r0, [pc, #4]	; (8007774 <__sinit_lock_acquire+0x8>)
 800776e:	f000 b8a7 	b.w	80078c0 <__retarget_lock_acquire_recursive>
 8007772:	bf00      	nop
 8007774:	20000326 	.word	0x20000326

08007778 <__sinit_lock_release>:
 8007778:	4801      	ldr	r0, [pc, #4]	; (8007780 <__sinit_lock_release+0x8>)
 800777a:	f000 b8a2 	b.w	80078c2 <__retarget_lock_release_recursive>
 800777e:	bf00      	nop
 8007780:	20000326 	.word	0x20000326

08007784 <__sinit>:
 8007784:	b510      	push	{r4, lr}
 8007786:	4604      	mov	r4, r0
 8007788:	f7ff fff0 	bl	800776c <__sinit_lock_acquire>
 800778c:	69a3      	ldr	r3, [r4, #24]
 800778e:	b11b      	cbz	r3, 8007798 <__sinit+0x14>
 8007790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007794:	f7ff bff0 	b.w	8007778 <__sinit_lock_release>
 8007798:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800779c:	6523      	str	r3, [r4, #80]	; 0x50
 800779e:	4b13      	ldr	r3, [pc, #76]	; (80077ec <__sinit+0x68>)
 80077a0:	4a13      	ldr	r2, [pc, #76]	; (80077f0 <__sinit+0x6c>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80077a6:	42a3      	cmp	r3, r4
 80077a8:	bf08      	it	eq
 80077aa:	2301      	moveq	r3, #1
 80077ac:	4620      	mov	r0, r4
 80077ae:	bf08      	it	eq
 80077b0:	61a3      	streq	r3, [r4, #24]
 80077b2:	f000 f81f 	bl	80077f4 <__sfp>
 80077b6:	6060      	str	r0, [r4, #4]
 80077b8:	4620      	mov	r0, r4
 80077ba:	f000 f81b 	bl	80077f4 <__sfp>
 80077be:	60a0      	str	r0, [r4, #8]
 80077c0:	4620      	mov	r0, r4
 80077c2:	f000 f817 	bl	80077f4 <__sfp>
 80077c6:	2200      	movs	r2, #0
 80077c8:	2104      	movs	r1, #4
 80077ca:	60e0      	str	r0, [r4, #12]
 80077cc:	6860      	ldr	r0, [r4, #4]
 80077ce:	f7ff ff81 	bl	80076d4 <std>
 80077d2:	2201      	movs	r2, #1
 80077d4:	2109      	movs	r1, #9
 80077d6:	68a0      	ldr	r0, [r4, #8]
 80077d8:	f7ff ff7c 	bl	80076d4 <std>
 80077dc:	2202      	movs	r2, #2
 80077de:	2112      	movs	r1, #18
 80077e0:	68e0      	ldr	r0, [r4, #12]
 80077e2:	f7ff ff77 	bl	80076d4 <std>
 80077e6:	2301      	movs	r3, #1
 80077e8:	61a3      	str	r3, [r4, #24]
 80077ea:	e7d1      	b.n	8007790 <__sinit+0xc>
 80077ec:	08007cc8 	.word	0x08007cc8
 80077f0:	0800771d 	.word	0x0800771d

080077f4 <__sfp>:
 80077f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f6:	4607      	mov	r7, r0
 80077f8:	f7ff ffac 	bl	8007754 <__sfp_lock_acquire>
 80077fc:	4b1e      	ldr	r3, [pc, #120]	; (8007878 <__sfp+0x84>)
 80077fe:	681e      	ldr	r6, [r3, #0]
 8007800:	69b3      	ldr	r3, [r6, #24]
 8007802:	b913      	cbnz	r3, 800780a <__sfp+0x16>
 8007804:	4630      	mov	r0, r6
 8007806:	f7ff ffbd 	bl	8007784 <__sinit>
 800780a:	3648      	adds	r6, #72	; 0x48
 800780c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007810:	3b01      	subs	r3, #1
 8007812:	d503      	bpl.n	800781c <__sfp+0x28>
 8007814:	6833      	ldr	r3, [r6, #0]
 8007816:	b30b      	cbz	r3, 800785c <__sfp+0x68>
 8007818:	6836      	ldr	r6, [r6, #0]
 800781a:	e7f7      	b.n	800780c <__sfp+0x18>
 800781c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007820:	b9d5      	cbnz	r5, 8007858 <__sfp+0x64>
 8007822:	4b16      	ldr	r3, [pc, #88]	; (800787c <__sfp+0x88>)
 8007824:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007828:	60e3      	str	r3, [r4, #12]
 800782a:	6665      	str	r5, [r4, #100]	; 0x64
 800782c:	f000 f847 	bl	80078be <__retarget_lock_init_recursive>
 8007830:	f7ff ff96 	bl	8007760 <__sfp_lock_release>
 8007834:	2208      	movs	r2, #8
 8007836:	4629      	mov	r1, r5
 8007838:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800783c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007840:	6025      	str	r5, [r4, #0]
 8007842:	61a5      	str	r5, [r4, #24]
 8007844:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007848:	f7fd fab8 	bl	8004dbc <memset>
 800784c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007850:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007854:	4620      	mov	r0, r4
 8007856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007858:	3468      	adds	r4, #104	; 0x68
 800785a:	e7d9      	b.n	8007810 <__sfp+0x1c>
 800785c:	2104      	movs	r1, #4
 800785e:	4638      	mov	r0, r7
 8007860:	f7ff ff62 	bl	8007728 <__sfmoreglue>
 8007864:	4604      	mov	r4, r0
 8007866:	6030      	str	r0, [r6, #0]
 8007868:	2800      	cmp	r0, #0
 800786a:	d1d5      	bne.n	8007818 <__sfp+0x24>
 800786c:	f7ff ff78 	bl	8007760 <__sfp_lock_release>
 8007870:	230c      	movs	r3, #12
 8007872:	603b      	str	r3, [r7, #0]
 8007874:	e7ee      	b.n	8007854 <__sfp+0x60>
 8007876:	bf00      	nop
 8007878:	08007cc8 	.word	0x08007cc8
 800787c:	ffff0001 	.word	0xffff0001

08007880 <_fwalk_reent>:
 8007880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007884:	4606      	mov	r6, r0
 8007886:	4688      	mov	r8, r1
 8007888:	2700      	movs	r7, #0
 800788a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800788e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007892:	f1b9 0901 	subs.w	r9, r9, #1
 8007896:	d505      	bpl.n	80078a4 <_fwalk_reent+0x24>
 8007898:	6824      	ldr	r4, [r4, #0]
 800789a:	2c00      	cmp	r4, #0
 800789c:	d1f7      	bne.n	800788e <_fwalk_reent+0xe>
 800789e:	4638      	mov	r0, r7
 80078a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078a4:	89ab      	ldrh	r3, [r5, #12]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d907      	bls.n	80078ba <_fwalk_reent+0x3a>
 80078aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078ae:	3301      	adds	r3, #1
 80078b0:	d003      	beq.n	80078ba <_fwalk_reent+0x3a>
 80078b2:	4629      	mov	r1, r5
 80078b4:	4630      	mov	r0, r6
 80078b6:	47c0      	blx	r8
 80078b8:	4307      	orrs	r7, r0
 80078ba:	3568      	adds	r5, #104	; 0x68
 80078bc:	e7e9      	b.n	8007892 <_fwalk_reent+0x12>

080078be <__retarget_lock_init_recursive>:
 80078be:	4770      	bx	lr

080078c0 <__retarget_lock_acquire_recursive>:
 80078c0:	4770      	bx	lr

080078c2 <__retarget_lock_release_recursive>:
 80078c2:	4770      	bx	lr

080078c4 <__swhatbuf_r>:
 80078c4:	b570      	push	{r4, r5, r6, lr}
 80078c6:	460e      	mov	r6, r1
 80078c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078cc:	4614      	mov	r4, r2
 80078ce:	2900      	cmp	r1, #0
 80078d0:	461d      	mov	r5, r3
 80078d2:	b096      	sub	sp, #88	; 0x58
 80078d4:	da08      	bge.n	80078e8 <__swhatbuf_r+0x24>
 80078d6:	2200      	movs	r2, #0
 80078d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80078dc:	602a      	str	r2, [r5, #0]
 80078de:	061a      	lsls	r2, r3, #24
 80078e0:	d410      	bmi.n	8007904 <__swhatbuf_r+0x40>
 80078e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078e6:	e00e      	b.n	8007906 <__swhatbuf_r+0x42>
 80078e8:	466a      	mov	r2, sp
 80078ea:	f000 f903 	bl	8007af4 <_fstat_r>
 80078ee:	2800      	cmp	r0, #0
 80078f0:	dbf1      	blt.n	80078d6 <__swhatbuf_r+0x12>
 80078f2:	9a01      	ldr	r2, [sp, #4]
 80078f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078fc:	425a      	negs	r2, r3
 80078fe:	415a      	adcs	r2, r3
 8007900:	602a      	str	r2, [r5, #0]
 8007902:	e7ee      	b.n	80078e2 <__swhatbuf_r+0x1e>
 8007904:	2340      	movs	r3, #64	; 0x40
 8007906:	2000      	movs	r0, #0
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	b016      	add	sp, #88	; 0x58
 800790c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007910 <__smakebuf_r>:
 8007910:	898b      	ldrh	r3, [r1, #12]
 8007912:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007914:	079d      	lsls	r5, r3, #30
 8007916:	4606      	mov	r6, r0
 8007918:	460c      	mov	r4, r1
 800791a:	d507      	bpl.n	800792c <__smakebuf_r+0x1c>
 800791c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	6123      	str	r3, [r4, #16]
 8007924:	2301      	movs	r3, #1
 8007926:	6163      	str	r3, [r4, #20]
 8007928:	b002      	add	sp, #8
 800792a:	bd70      	pop	{r4, r5, r6, pc}
 800792c:	466a      	mov	r2, sp
 800792e:	ab01      	add	r3, sp, #4
 8007930:	f7ff ffc8 	bl	80078c4 <__swhatbuf_r>
 8007934:	9900      	ldr	r1, [sp, #0]
 8007936:	4605      	mov	r5, r0
 8007938:	4630      	mov	r0, r6
 800793a:	f7ff f969 	bl	8006c10 <_malloc_r>
 800793e:	b948      	cbnz	r0, 8007954 <__smakebuf_r+0x44>
 8007940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007944:	059a      	lsls	r2, r3, #22
 8007946:	d4ef      	bmi.n	8007928 <__smakebuf_r+0x18>
 8007948:	f023 0303 	bic.w	r3, r3, #3
 800794c:	f043 0302 	orr.w	r3, r3, #2
 8007950:	81a3      	strh	r3, [r4, #12]
 8007952:	e7e3      	b.n	800791c <__smakebuf_r+0xc>
 8007954:	4b0d      	ldr	r3, [pc, #52]	; (800798c <__smakebuf_r+0x7c>)
 8007956:	62b3      	str	r3, [r6, #40]	; 0x28
 8007958:	89a3      	ldrh	r3, [r4, #12]
 800795a:	6020      	str	r0, [r4, #0]
 800795c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007960:	81a3      	strh	r3, [r4, #12]
 8007962:	9b00      	ldr	r3, [sp, #0]
 8007964:	6120      	str	r0, [r4, #16]
 8007966:	6163      	str	r3, [r4, #20]
 8007968:	9b01      	ldr	r3, [sp, #4]
 800796a:	b15b      	cbz	r3, 8007984 <__smakebuf_r+0x74>
 800796c:	4630      	mov	r0, r6
 800796e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007972:	f000 f8d1 	bl	8007b18 <_isatty_r>
 8007976:	b128      	cbz	r0, 8007984 <__smakebuf_r+0x74>
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	f023 0303 	bic.w	r3, r3, #3
 800797e:	f043 0301 	orr.w	r3, r3, #1
 8007982:	81a3      	strh	r3, [r4, #12]
 8007984:	89a0      	ldrh	r0, [r4, #12]
 8007986:	4305      	orrs	r5, r0
 8007988:	81a5      	strh	r5, [r4, #12]
 800798a:	e7cd      	b.n	8007928 <__smakebuf_r+0x18>
 800798c:	0800771d 	.word	0x0800771d

08007990 <_malloc_usable_size_r>:
 8007990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007994:	1f18      	subs	r0, r3, #4
 8007996:	2b00      	cmp	r3, #0
 8007998:	bfbc      	itt	lt
 800799a:	580b      	ldrlt	r3, [r1, r0]
 800799c:	18c0      	addlt	r0, r0, r3
 800799e:	4770      	bx	lr

080079a0 <_raise_r>:
 80079a0:	291f      	cmp	r1, #31
 80079a2:	b538      	push	{r3, r4, r5, lr}
 80079a4:	4604      	mov	r4, r0
 80079a6:	460d      	mov	r5, r1
 80079a8:	d904      	bls.n	80079b4 <_raise_r+0x14>
 80079aa:	2316      	movs	r3, #22
 80079ac:	6003      	str	r3, [r0, #0]
 80079ae:	f04f 30ff 	mov.w	r0, #4294967295
 80079b2:	bd38      	pop	{r3, r4, r5, pc}
 80079b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80079b6:	b112      	cbz	r2, 80079be <_raise_r+0x1e>
 80079b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079bc:	b94b      	cbnz	r3, 80079d2 <_raise_r+0x32>
 80079be:	4620      	mov	r0, r4
 80079c0:	f000 f830 	bl	8007a24 <_getpid_r>
 80079c4:	462a      	mov	r2, r5
 80079c6:	4601      	mov	r1, r0
 80079c8:	4620      	mov	r0, r4
 80079ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079ce:	f000 b817 	b.w	8007a00 <_kill_r>
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d00a      	beq.n	80079ec <_raise_r+0x4c>
 80079d6:	1c59      	adds	r1, r3, #1
 80079d8:	d103      	bne.n	80079e2 <_raise_r+0x42>
 80079da:	2316      	movs	r3, #22
 80079dc:	6003      	str	r3, [r0, #0]
 80079de:	2001      	movs	r0, #1
 80079e0:	e7e7      	b.n	80079b2 <_raise_r+0x12>
 80079e2:	2400      	movs	r4, #0
 80079e4:	4628      	mov	r0, r5
 80079e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80079ea:	4798      	blx	r3
 80079ec:	2000      	movs	r0, #0
 80079ee:	e7e0      	b.n	80079b2 <_raise_r+0x12>

080079f0 <raise>:
 80079f0:	4b02      	ldr	r3, [pc, #8]	; (80079fc <raise+0xc>)
 80079f2:	4601      	mov	r1, r0
 80079f4:	6818      	ldr	r0, [r3, #0]
 80079f6:	f7ff bfd3 	b.w	80079a0 <_raise_r>
 80079fa:	bf00      	nop
 80079fc:	20000020 	.word	0x20000020

08007a00 <_kill_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	2300      	movs	r3, #0
 8007a04:	4d06      	ldr	r5, [pc, #24]	; (8007a20 <_kill_r+0x20>)
 8007a06:	4604      	mov	r4, r0
 8007a08:	4608      	mov	r0, r1
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	602b      	str	r3, [r5, #0]
 8007a0e:	f7fa fd47 	bl	80024a0 <_kill>
 8007a12:	1c43      	adds	r3, r0, #1
 8007a14:	d102      	bne.n	8007a1c <_kill_r+0x1c>
 8007a16:	682b      	ldr	r3, [r5, #0]
 8007a18:	b103      	cbz	r3, 8007a1c <_kill_r+0x1c>
 8007a1a:	6023      	str	r3, [r4, #0]
 8007a1c:	bd38      	pop	{r3, r4, r5, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000320 	.word	0x20000320

08007a24 <_getpid_r>:
 8007a24:	f7fa bd35 	b.w	8002492 <_getpid>

08007a28 <__sread>:
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a30:	f000 f894 	bl	8007b5c <_read_r>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	bfab      	itete	ge
 8007a38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a3a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a3c:	181b      	addge	r3, r3, r0
 8007a3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a42:	bfac      	ite	ge
 8007a44:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a46:	81a3      	strhlt	r3, [r4, #12]
 8007a48:	bd10      	pop	{r4, pc}

08007a4a <__swrite>:
 8007a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a4e:	461f      	mov	r7, r3
 8007a50:	898b      	ldrh	r3, [r1, #12]
 8007a52:	4605      	mov	r5, r0
 8007a54:	05db      	lsls	r3, r3, #23
 8007a56:	460c      	mov	r4, r1
 8007a58:	4616      	mov	r6, r2
 8007a5a:	d505      	bpl.n	8007a68 <__swrite+0x1e>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a64:	f000 f868 	bl	8007b38 <_lseek_r>
 8007a68:	89a3      	ldrh	r3, [r4, #12]
 8007a6a:	4632      	mov	r2, r6
 8007a6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a70:	81a3      	strh	r3, [r4, #12]
 8007a72:	4628      	mov	r0, r5
 8007a74:	463b      	mov	r3, r7
 8007a76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7e:	f000 b817 	b.w	8007ab0 <_write_r>

08007a82 <__sseek>:
 8007a82:	b510      	push	{r4, lr}
 8007a84:	460c      	mov	r4, r1
 8007a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a8a:	f000 f855 	bl	8007b38 <_lseek_r>
 8007a8e:	1c43      	adds	r3, r0, #1
 8007a90:	89a3      	ldrh	r3, [r4, #12]
 8007a92:	bf15      	itete	ne
 8007a94:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a9e:	81a3      	strheq	r3, [r4, #12]
 8007aa0:	bf18      	it	ne
 8007aa2:	81a3      	strhne	r3, [r4, #12]
 8007aa4:	bd10      	pop	{r4, pc}

08007aa6 <__sclose>:
 8007aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aaa:	f000 b813 	b.w	8007ad4 <_close_r>
	...

08007ab0 <_write_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	4608      	mov	r0, r1
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	2200      	movs	r2, #0
 8007aba:	4d05      	ldr	r5, [pc, #20]	; (8007ad0 <_write_r+0x20>)
 8007abc:	602a      	str	r2, [r5, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f7fa fd25 	bl	800250e <_write>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d102      	bne.n	8007ace <_write_r+0x1e>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	b103      	cbz	r3, 8007ace <_write_r+0x1e>
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	20000320 	.word	0x20000320

08007ad4 <_close_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	4d05      	ldr	r5, [pc, #20]	; (8007af0 <_close_r+0x1c>)
 8007ada:	4604      	mov	r4, r0
 8007adc:	4608      	mov	r0, r1
 8007ade:	602b      	str	r3, [r5, #0]
 8007ae0:	f7fa fd31 	bl	8002546 <_close>
 8007ae4:	1c43      	adds	r3, r0, #1
 8007ae6:	d102      	bne.n	8007aee <_close_r+0x1a>
 8007ae8:	682b      	ldr	r3, [r5, #0]
 8007aea:	b103      	cbz	r3, 8007aee <_close_r+0x1a>
 8007aec:	6023      	str	r3, [r4, #0]
 8007aee:	bd38      	pop	{r3, r4, r5, pc}
 8007af0:	20000320 	.word	0x20000320

08007af4 <_fstat_r>:
 8007af4:	b538      	push	{r3, r4, r5, lr}
 8007af6:	2300      	movs	r3, #0
 8007af8:	4d06      	ldr	r5, [pc, #24]	; (8007b14 <_fstat_r+0x20>)
 8007afa:	4604      	mov	r4, r0
 8007afc:	4608      	mov	r0, r1
 8007afe:	4611      	mov	r1, r2
 8007b00:	602b      	str	r3, [r5, #0]
 8007b02:	f7fa fd2b 	bl	800255c <_fstat>
 8007b06:	1c43      	adds	r3, r0, #1
 8007b08:	d102      	bne.n	8007b10 <_fstat_r+0x1c>
 8007b0a:	682b      	ldr	r3, [r5, #0]
 8007b0c:	b103      	cbz	r3, 8007b10 <_fstat_r+0x1c>
 8007b0e:	6023      	str	r3, [r4, #0]
 8007b10:	bd38      	pop	{r3, r4, r5, pc}
 8007b12:	bf00      	nop
 8007b14:	20000320 	.word	0x20000320

08007b18 <_isatty_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	4d05      	ldr	r5, [pc, #20]	; (8007b34 <_isatty_r+0x1c>)
 8007b1e:	4604      	mov	r4, r0
 8007b20:	4608      	mov	r0, r1
 8007b22:	602b      	str	r3, [r5, #0]
 8007b24:	f7fa fd29 	bl	800257a <_isatty>
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	d102      	bne.n	8007b32 <_isatty_r+0x1a>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	b103      	cbz	r3, 8007b32 <_isatty_r+0x1a>
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	20000320 	.word	0x20000320

08007b38 <_lseek_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	4608      	mov	r0, r1
 8007b3e:	4611      	mov	r1, r2
 8007b40:	2200      	movs	r2, #0
 8007b42:	4d05      	ldr	r5, [pc, #20]	; (8007b58 <_lseek_r+0x20>)
 8007b44:	602a      	str	r2, [r5, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	f7fa fd21 	bl	800258e <_lseek>
 8007b4c:	1c43      	adds	r3, r0, #1
 8007b4e:	d102      	bne.n	8007b56 <_lseek_r+0x1e>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	b103      	cbz	r3, 8007b56 <_lseek_r+0x1e>
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	bd38      	pop	{r3, r4, r5, pc}
 8007b58:	20000320 	.word	0x20000320

08007b5c <_read_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	4604      	mov	r4, r0
 8007b60:	4608      	mov	r0, r1
 8007b62:	4611      	mov	r1, r2
 8007b64:	2200      	movs	r2, #0
 8007b66:	4d05      	ldr	r5, [pc, #20]	; (8007b7c <_read_r+0x20>)
 8007b68:	602a      	str	r2, [r5, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	f7fa fcb2 	bl	80024d4 <_read>
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	d102      	bne.n	8007b7a <_read_r+0x1e>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	b103      	cbz	r3, 8007b7a <_read_r+0x1e>
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	20000320 	.word	0x20000320

08007b80 <_init>:
 8007b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b82:	bf00      	nop
 8007b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b86:	bc08      	pop	{r3}
 8007b88:	469e      	mov	lr, r3
 8007b8a:	4770      	bx	lr

08007b8c <_fini>:
 8007b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8e:	bf00      	nop
 8007b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b92:	bc08      	pop	{r3}
 8007b94:	469e      	mov	lr, r3
 8007b96:	4770      	bx	lr
